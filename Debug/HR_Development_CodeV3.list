
HR_Development_CodeV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001cac  08001cac  00011cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ce0  08001ce0  00011ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000004  08001cec  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000078  08001cec  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009e72  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001978  00000000  00000000  00029e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005133  00000000  00000000  0002b816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006a0  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007d0  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000042ac  00000000  00000000  000317c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000239a  00000000  00000000  00035a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037e06  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001294  00000000  00000000  00037e84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c94 	.word	0x08001c94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001c94 	.word	0x08001c94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80003f4:	21fa      	movs	r1, #250	; 0xfa
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <HAL_InitTick+0x2c>)
{
 80003f8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80003fa:	0089      	lsls	r1, r1, #2
{
 80003fc:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 f884 	bl	8000510 <HAL_SYSTICK_Config>
 8000408:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800040a:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800040c:	2c00      	cmp	r4, #0
 800040e:	d105      	bne.n	800041c <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000410:	3802      	subs	r0, #2
 8000412:	0022      	movs	r2, r4
 8000414:	0029      	movs	r1, r5
 8000416:	f000 f837 	bl	8000488 <HAL_NVIC_SetPriority>
 800041a:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	20000000 	.word	0x20000000

08000424 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	4a08      	ldr	r2, [pc, #32]	; (8000448 <HAL_Init+0x24>)
{
 8000428:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800042a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000432:	f7ff ffdf 	bl	80003f4 <HAL_InitTick>
 8000436:	1e04      	subs	r4, r0, #0
 8000438:	d103      	bne.n	8000442 <HAL_Init+0x1e>
    HAL_MspInit();
 800043a:	f001 fb59 	bl	8001af0 <HAL_MspInit>
}
 800043e:	0020      	movs	r0, r4
 8000440:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000442:	2401      	movs	r4, #1
 8000444:	e7fb      	b.n	800043e <HAL_Init+0x1a>
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40022000 	.word	0x40022000

0800044c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800044c:	4a02      	ldr	r2, [pc, #8]	; (8000458 <HAL_IncTick+0xc>)
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	3301      	adds	r3, #1
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000028 	.word	0x20000028

0800045c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <HAL_GetTick+0x8>)
 800045e:	6818      	ldr	r0, [r3, #0]
}
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000028 	.word	0x20000028

08000468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800046c:	f7ff fff6 	bl	800045c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000470:	1c63      	adds	r3, r4, #1
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000476:	0005      	movs	r5, r0
    wait++;
 8000478:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800047a:	f7ff ffef 	bl	800045c <HAL_GetTick>
 800047e:	1b40      	subs	r0, r0, r5
 8000480:	4284      	cmp	r4, r0
 8000482:	d8fa      	bhi.n	800047a <HAL_Delay+0x12>
  {
  }
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
	...

08000488 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800048c:	2800      	cmp	r0, #0
 800048e:	da14      	bge.n	80004ba <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000490:	230f      	movs	r3, #15
 8000492:	b2c0      	uxtb	r0, r0
 8000494:	4003      	ands	r3, r0
 8000496:	3b08      	subs	r3, #8
 8000498:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <HAL_NVIC_SetPriority+0x58>)
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	189b      	adds	r3, r3, r2
 80004a0:	2203      	movs	r2, #3
 80004a2:	4010      	ands	r0, r2
 80004a4:	4090      	lsls	r0, r2
 80004a6:	32fc      	adds	r2, #252	; 0xfc
 80004a8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004aa:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ae:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b0:	69dc      	ldr	r4, [r3, #28]
 80004b2:	43ac      	bics	r4, r5
 80004b4:	4321      	orrs	r1, r4
 80004b6:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ba:	2503      	movs	r5, #3
 80004bc:	0883      	lsrs	r3, r0, #2
 80004be:	4028      	ands	r0, r5
 80004c0:	40a8      	lsls	r0, r5
 80004c2:	35fc      	adds	r5, #252	; 0xfc
 80004c4:	002e      	movs	r6, r5
 80004c6:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_NVIC_SetPriority+0x5c>)
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	189b      	adds	r3, r3, r2
 80004cc:	22c0      	movs	r2, #192	; 0xc0
 80004ce:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d0:	4029      	ands	r1, r5
 80004d2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	589c      	ldr	r4, [r3, r2]
 80004d8:	43b4      	bics	r4, r6
 80004da:	4321      	orrs	r1, r4
 80004dc:	5099      	str	r1, [r3, r2]
 80004de:	e7eb      	b.n	80004b8 <HAL_NVIC_SetPriority+0x30>
 80004e0:	e000ed00 	.word	0xe000ed00
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004e8:	231f      	movs	r3, #31
 80004ea:	4018      	ands	r0, r3
 80004ec:	3b1e      	subs	r3, #30
 80004ee:	4083      	lsls	r3, r0
 80004f0:	4a01      	ldr	r2, [pc, #4]	; (80004f8 <HAL_NVIC_EnableIRQ+0x10>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004f4:	4770      	bx	lr
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	e000e100 	.word	0xe000e100

080004fc <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004fc:	231f      	movs	r3, #31
 80004fe:	4018      	ands	r0, r3
 8000500:	3b1e      	subs	r3, #30
 8000502:	4083      	lsls	r3, r0
 8000504:	4a01      	ldr	r2, [pc, #4]	; (800050c <HAL_NVIC_DisableIRQ+0x10>)
 8000506:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000508:	4770      	bx	lr
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	e000e104 	.word	0xe000e104

08000510 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_SYSTICK_Config+0x28>)
 8000512:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000514:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000516:	4293      	cmp	r3, r2
 8000518:	d80d      	bhi.n	8000536 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051e:	4808      	ldr	r0, [pc, #32]	; (8000540 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000520:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000522:	6a03      	ldr	r3, [r0, #32]
 8000524:	0609      	lsls	r1, r1, #24
 8000526:	021b      	lsls	r3, r3, #8
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	430b      	orrs	r3, r1
 800052c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800052e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000530:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000532:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000534:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000536:	4770      	bx	lr
 8000538:	00ffffff 	.word	0x00ffffff
 800053c:	e000e010 	.word	0xe000e010
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000546:	4a53      	ldr	r2, [pc, #332]	; (8000694 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000548:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800054a:	1882      	adds	r2, r0, r2
 800054c:	1e54      	subs	r4, r2, #1
 800054e:	41a2      	sbcs	r2, r4
{
 8000550:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000552:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000554:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000556:	3205      	adds	r2, #5
 8000558:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800055a:	9a01      	ldr	r2, [sp, #4]
 800055c:	40da      	lsrs	r2, r3
 800055e:	d101      	bne.n	8000564 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000560:	b005      	add	sp, #20
 8000562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000564:	2501      	movs	r5, #1
 8000566:	409d      	lsls	r5, r3
 8000568:	9a01      	ldr	r2, [sp, #4]
 800056a:	402a      	ands	r2, r5
 800056c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800056e:	d100      	bne.n	8000572 <HAL_GPIO_Init+0x2e>
 8000570:	e08d      	b.n	800068e <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000572:	684a      	ldr	r2, [r1, #4]
 8000574:	4694      	mov	ip, r2
 8000576:	2210      	movs	r2, #16
 8000578:	4664      	mov	r4, ip
 800057a:	4394      	bics	r4, r2
 800057c:	0022      	movs	r2, r4
 800057e:	3c01      	subs	r4, #1
 8000580:	2a02      	cmp	r2, #2
 8000582:	d11f      	bne.n	80005c4 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000584:	2407      	movs	r4, #7
 8000586:	270f      	movs	r7, #15
 8000588:	401c      	ands	r4, r3
 800058a:	00a4      	lsls	r4, r4, #2
 800058c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800058e:	08da      	lsrs	r2, r3, #3
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	1882      	adds	r2, r0, r2
 8000594:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000596:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000598:	690f      	ldr	r7, [r1, #16]
 800059a:	40a7      	lsls	r7, r4
 800059c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800059e:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005a0:	2403      	movs	r4, #3
 80005a2:	005e      	lsls	r6, r3, #1
 80005a4:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005a6:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005a8:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005aa:	68cc      	ldr	r4, [r1, #12]
 80005ac:	40b4      	lsls	r4, r6
 80005ae:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005b0:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005b2:	4662      	mov	r2, ip
 80005b4:	06d2      	lsls	r2, r2, #27
 80005b6:	0fd2      	lsrs	r2, r2, #31
 80005b8:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005ba:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005bc:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005c0:	6042      	str	r2, [r0, #4]
 80005c2:	e001      	b.n	80005c8 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c4:	2c01      	cmp	r4, #1
 80005c6:	d9eb      	bls.n	80005a0 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005c8:	2603      	movs	r6, #3
 80005ca:	0034      	movs	r4, r6
 80005cc:	005d      	lsls	r5, r3, #1
 80005ce:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005d0:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005d2:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005d4:	4032      	ands	r2, r6
 80005d6:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80005d8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005da:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005dc:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80005de:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80005e0:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005e2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80005e4:	688a      	ldr	r2, [r1, #8]
 80005e6:	40aa      	lsls	r2, r5
 80005e8:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ea:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80005ec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ee:	00d2      	lsls	r2, r2, #3
 80005f0:	d54d      	bpl.n	800068e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2501      	movs	r5, #1
 80005f4:	4c28      	ldr	r4, [pc, #160]	; (8000698 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80005f6:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80005fa:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80005fc:	001d      	movs	r5, r3
 80005fe:	4035      	ands	r5, r6
 8000600:	00ad      	lsls	r5, r5, #2
 8000602:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000604:	6362      	str	r2, [r4, #52]	; 0x34
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000608:	089c      	lsrs	r4, r3, #2
 800060a:	00a4      	lsls	r4, r4, #2
 800060c:	18a4      	adds	r4, r4, r2
 800060e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000610:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000612:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000614:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000616:	05ff      	lsls	r7, r7, #23
 8000618:	2200      	movs	r2, #0
 800061a:	42b8      	cmp	r0, r7
 800061c:	d00c      	beq.n	8000638 <HAL_GPIO_Init+0xf4>
 800061e:	4f20      	ldr	r7, [pc, #128]	; (80006a0 <HAL_GPIO_Init+0x15c>)
 8000620:	3201      	adds	r2, #1
 8000622:	42b8      	cmp	r0, r7
 8000624:	d008      	beq.n	8000638 <HAL_GPIO_Init+0xf4>
 8000626:	4f1f      	ldr	r7, [pc, #124]	; (80006a4 <HAL_GPIO_Init+0x160>)
 8000628:	3201      	adds	r2, #1
 800062a:	42b8      	cmp	r0, r7
 800062c:	d004      	beq.n	8000638 <HAL_GPIO_Init+0xf4>
 800062e:	4f1e      	ldr	r7, [pc, #120]	; (80006a8 <HAL_GPIO_Init+0x164>)
 8000630:	0032      	movs	r2, r6
 8000632:	42b8      	cmp	r0, r7
 8000634:	d000      	beq.n	8000638 <HAL_GPIO_Init+0xf4>
 8000636:	9a03      	ldr	r2, [sp, #12]
 8000638:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800063c:	9d02      	ldr	r5, [sp, #8]
 800063e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000640:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8000644:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000646:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000648:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800064a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800064c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800064e:	03ff      	lsls	r7, r7, #15
 8000650:	d401      	bmi.n	8000656 <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 8000652:	0035      	movs	r5, r6
 8000654:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000658:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800065a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800065c:	9d00      	ldr	r5, [sp, #0]
 800065e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000660:	03bf      	lsls	r7, r7, #14
 8000662:	d401      	bmi.n	8000668 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000664:	0035      	movs	r5, r6
 8000666:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000668:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800066a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800066c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800066e:	9d00      	ldr	r5, [sp, #0]
 8000670:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000672:	02ff      	lsls	r7, r7, #11
 8000674:	d401      	bmi.n	800067a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8000676:	0035      	movs	r5, r6
 8000678:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800067a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800067c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800067e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000680:	9e00      	ldr	r6, [sp, #0]
 8000682:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000684:	02bf      	lsls	r7, r7, #10
 8000686:	d401      	bmi.n	800068c <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8000688:	4025      	ands	r5, r4
 800068a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800068c:	60d6      	str	r6, [r2, #12]
    position++;
 800068e:	3301      	adds	r3, #1
 8000690:	e763      	b.n	800055a <HAL_GPIO_Init+0x16>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	afffe400 	.word	0xafffe400
 8000698:	40021000 	.word	0x40021000
 800069c:	40010000 	.word	0x40010000
 80006a0:	50000400 	.word	0x50000400
 80006a4:	50000800 	.word	0x50000800
 80006a8:	50000c00 	.word	0x50000c00
 80006ac:	40010400 	.word	0x40010400

080006b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d001      	beq.n	80006b8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006b4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006b6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80006b8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006ba:	e7fc      	b.n	80006b6 <HAL_GPIO_WritePin+0x6>

080006bc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80006be:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4210      	tst	r0, r2
 80006c4:	d002      	beq.n	80006cc <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80006c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80006c8:	f001 f9fc 	bl	8001ac4 <HAL_GPIO_EXTI_Callback>
  }
}
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40010400 	.word	0x40010400

080006d4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80006d4:	6803      	ldr	r3, [r0, #0]
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	0792      	lsls	r2, r2, #30
 80006da:	d501      	bpl.n	80006e0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80006e0:	2201      	movs	r2, #1
 80006e2:	6999      	ldr	r1, [r3, #24]
 80006e4:	4211      	tst	r1, r2
 80006e6:	d102      	bne.n	80006ee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80006e8:	6999      	ldr	r1, [r3, #24]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	619a      	str	r2, [r3, #24]
  }
}
 80006ee:	4770      	bx	lr

080006f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80006f4:	0589      	lsls	r1, r1, #22
 80006f6:	4333      	orrs	r3, r6
 80006f8:	0d89      	lsrs	r1, r1, #22
 80006fa:	4319      	orrs	r1, r3
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	6804      	ldr	r4, [r0, #0]
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	0d70      	lsrs	r0, r6, #21
 8000704:	4018      	ands	r0, r3
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <I2C_TransferConfig+0x28>)
 8000708:	6865      	ldr	r5, [r4, #4]
 800070a:	0412      	lsls	r2, r2, #16
 800070c:	4318      	orrs	r0, r3
 800070e:	4385      	bics	r5, r0
 8000710:	4311      	orrs	r1, r2
 8000712:	4329      	orrs	r1, r5
 8000714:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	03ff63ff 	.word	0x03ff63ff

0800071c <I2C_WaitOnFlagUntilTimeout>:
{
 800071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071e:	0004      	movs	r4, r0
 8000720:	000e      	movs	r6, r1
 8000722:	0017      	movs	r7, r2
 8000724:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000726:	6822      	ldr	r2, [r4, #0]
 8000728:	6993      	ldr	r3, [r2, #24]
 800072a:	4033      	ands	r3, r6
 800072c:	1b9b      	subs	r3, r3, r6
 800072e:	4259      	negs	r1, r3
 8000730:	414b      	adcs	r3, r1
 8000732:	42bb      	cmp	r3, r7
 8000734:	d001      	beq.n	800073a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000736:	2000      	movs	r0, #0
 8000738:	e017      	b.n	800076a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800073a:	1c6b      	adds	r3, r5, #1
 800073c:	d0f4      	beq.n	8000728 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800073e:	f7ff fe8d 	bl	800045c <HAL_GetTick>
 8000742:	9b06      	ldr	r3, [sp, #24]
 8000744:	1ac0      	subs	r0, r0, r3
 8000746:	4285      	cmp	r5, r0
 8000748:	d301      	bcc.n	800074e <I2C_WaitOnFlagUntilTimeout+0x32>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d1eb      	bne.n	8000726 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800074e:	2220      	movs	r2, #32
 8000750:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000752:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000754:	4313      	orrs	r3, r2
 8000756:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000758:	0023      	movs	r3, r4
 800075a:	3341      	adds	r3, #65	; 0x41
 800075c:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800075e:	0022      	movs	r2, r4
 8000760:	2300      	movs	r3, #0
 8000762:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000764:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000766:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000768:	7023      	strb	r3, [r4, #0]
}
 800076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800076c <I2C_IsAcknowledgeFailed>:
{
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800076e:	6803      	ldr	r3, [r0, #0]
{
 8000770:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000772:	6998      	ldr	r0, [r3, #24]
 8000774:	2310      	movs	r3, #16
{
 8000776:	000e      	movs	r6, r1
 8000778:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800077a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800077c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800077e:	2800      	cmp	r0, #0
 8000780:	d118      	bne.n	80007b4 <I2C_IsAcknowledgeFailed+0x48>
}
 8000782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000784:	1c72      	adds	r2, r6, #1
 8000786:	d016      	beq.n	80007b6 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000788:	f7ff fe68 	bl	800045c <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	4286      	cmp	r6, r0
 8000790:	d301      	bcc.n	8000796 <I2C_IsAcknowledgeFailed+0x2a>
 8000792:	2e00      	cmp	r6, #0
 8000794:	d10e      	bne.n	80007b4 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000796:	2220      	movs	r2, #32
 8000798:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800079a:	4313      	orrs	r3, r2
 800079c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800079e:	0023      	movs	r3, r4
 80007a0:	3341      	adds	r3, #65	; 0x41
 80007a2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80007a4:	0022      	movs	r2, r4
 80007a6:	2300      	movs	r3, #0
 80007a8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80007aa:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80007ac:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80007ae:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80007b0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80007b2:	e7e6      	b.n	8000782 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	699a      	ldr	r2, [r3, #24]
 80007b8:	422a      	tst	r2, r5
 80007ba:	d0e3      	beq.n	8000784 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007bc:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80007be:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007c0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007c2:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80007c4:	f7ff ff86 	bl	80006d4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80007c8:	6822      	ldr	r2, [r4, #0]
 80007ca:	4906      	ldr	r1, [pc, #24]	; (80007e4 <I2C_IsAcknowledgeFailed+0x78>)
 80007cc:	6853      	ldr	r3, [r2, #4]
 80007ce:	400b      	ands	r3, r1
 80007d0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80007d2:	2304      	movs	r3, #4
 80007d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007d6:	4313      	orrs	r3, r2
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80007da:	0023      	movs	r3, r4
 80007dc:	3341      	adds	r3, #65	; 0x41
 80007de:	701d      	strb	r5, [r3, #0]
 80007e0:	e7e0      	b.n	80007a4 <I2C_IsAcknowledgeFailed+0x38>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	fe00e800 	.word	0xfe00e800

080007e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	0004      	movs	r4, r0
 80007ec:	000d      	movs	r5, r1
 80007ee:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80007f0:	2702      	movs	r7, #2
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	423b      	tst	r3, r7
 80007f8:	d001      	beq.n	80007fe <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80007fa:	2000      	movs	r0, #0
}
 80007fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80007fe:	0032      	movs	r2, r6
 8000800:	0029      	movs	r1, r5
 8000802:	0020      	movs	r0, r4
 8000804:	f7ff ffb2 	bl	800076c <I2C_IsAcknowledgeFailed>
 8000808:	2800      	cmp	r0, #0
 800080a:	d115      	bne.n	8000838 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800080c:	1c6b      	adds	r3, r5, #1
 800080e:	d0f0      	beq.n	80007f2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000810:	f7ff fe24 	bl	800045c <HAL_GetTick>
 8000814:	1b80      	subs	r0, r0, r6
 8000816:	4285      	cmp	r5, r0
 8000818:	d301      	bcc.n	800081e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d1e9      	bne.n	80007f2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800081e:	2220      	movs	r2, #32
 8000820:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000822:	4313      	orrs	r3, r2
 8000824:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000826:	0023      	movs	r3, r4
 8000828:	3341      	adds	r3, #65	; 0x41
 800082a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800082c:	0022      	movs	r2, r4
 800082e:	2300      	movs	r3, #0
 8000830:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000832:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000834:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000836:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000838:	2001      	movs	r0, #1
 800083a:	e7df      	b.n	80007fc <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800083c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	0004      	movs	r4, r0
 8000840:	000d      	movs	r5, r1
 8000842:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000844:	2720      	movs	r7, #32
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	423b      	tst	r3, r7
 800084c:	d001      	beq.n	8000852 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800084e:	2000      	movs	r0, #0
}
 8000850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000852:	0032      	movs	r2, r6
 8000854:	0029      	movs	r1, r5
 8000856:	0020      	movs	r0, r4
 8000858:	f7ff ff88 	bl	800076c <I2C_IsAcknowledgeFailed>
 800085c:	2800      	cmp	r0, #0
 800085e:	d113      	bne.n	8000888 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000860:	f7ff fdfc 	bl	800045c <HAL_GetTick>
 8000864:	1b80      	subs	r0, r0, r6
 8000866:	4285      	cmp	r5, r0
 8000868:	d301      	bcc.n	800086e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800086a:	2d00      	cmp	r5, #0
 800086c:	d1eb      	bne.n	8000846 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800086e:	2220      	movs	r2, #32
 8000870:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000872:	4313      	orrs	r3, r2
 8000874:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000876:	0023      	movs	r3, r4
 8000878:	3341      	adds	r3, #65	; 0x41
 800087a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800087c:	0022      	movs	r2, r4
 800087e:	2300      	movs	r3, #0
 8000880:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000882:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000884:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000886:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000888:	2001      	movs	r0, #1
 800088a:	e7e1      	b.n	8000850 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800088c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	0004      	movs	r4, r0
 8000890:	000d      	movs	r5, r1
 8000892:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000894:	2604      	movs	r6, #4
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4233      	tst	r3, r6
 800089c:	d111      	bne.n	80008c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800089e:	003a      	movs	r2, r7
 80008a0:	0029      	movs	r1, r5
 80008a2:	0020      	movs	r0, r4
 80008a4:	f7ff ff62 	bl	800076c <I2C_IsAcknowledgeFailed>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d11a      	bne.n	80008e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80008ac:	2120      	movs	r1, #32
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	420a      	tst	r2, r1
 80008b4:	d017      	beq.n	80008e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80008b6:	699a      	ldr	r2, [r3, #24]
 80008b8:	4232      	tst	r2, r6
 80008ba:	d004      	beq.n	80008c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80008bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d001      	beq.n	80008c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80008c2:	2000      	movs	r0, #0
}
 80008c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008c6:	2120      	movs	r1, #32
 80008c8:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	480e      	ldr	r0, [pc, #56]	; (8000908 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 80008ce:	4002      	ands	r2, r0
 80008d0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80008d2:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008d4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80008d6:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008d8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80008da:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80008dc:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80008de:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 80008e0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80008e2:	2001      	movs	r0, #1
 80008e4:	e7ee      	b.n	80008c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008e6:	f7ff fdb9 	bl	800045c <HAL_GetTick>
 80008ea:	1bc0      	subs	r0, r0, r7
 80008ec:	4285      	cmp	r5, r0
 80008ee:	d301      	bcc.n	80008f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d1d0      	bne.n	8000896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008f4:	2220      	movs	r2, #32
 80008f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008f8:	4313      	orrs	r3, r2
 80008fa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008fc:	0023      	movs	r3, r4
 80008fe:	3341      	adds	r3, #65	; 0x41
 8000900:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8000902:	3440      	adds	r4, #64	; 0x40
 8000904:	2300      	movs	r3, #0
 8000906:	e7eb      	b.n	80008e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8000908:	fe00e800 	.word	0xfe00e800

0800090c <HAL_I2C_Init>:
{
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000910:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000912:	2c00      	cmp	r4, #0
 8000914:	d03f      	beq.n	8000996 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000916:	0025      	movs	r5, r4
 8000918:	3541      	adds	r5, #65	; 0x41
 800091a:	782b      	ldrb	r3, [r5, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000922:	0022      	movs	r2, r4
 8000924:	3240      	adds	r2, #64	; 0x40
 8000926:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000928:	0020      	movs	r0, r4
 800092a:	f001 f8ef 	bl	8001b0c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800092e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000930:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000932:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000934:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000936:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	68a6      	ldr	r6, [r4, #8]
 800093c:	438a      	bics	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000940:	6861      	ldr	r1, [r4, #4]
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <HAL_I2C_Init+0xa0>)
 8000944:	400a      	ands	r2, r1
 8000946:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000948:	6899      	ldr	r1, [r3, #8]
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_I2C_Init+0xa4>)
 800094c:	4011      	ands	r1, r2
 800094e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000950:	2801      	cmp	r0, #1
 8000952:	d121      	bne.n	8000998 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0209      	lsls	r1, r1, #8
 8000958:	4331      	orrs	r1, r6
 800095a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800095c:	6858      	ldr	r0, [r3, #4]
 800095e:	4915      	ldr	r1, [pc, #84]	; (80009b4 <HAL_I2C_Init+0xa8>)
 8000960:	4301      	orrs	r1, r0
 8000962:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000964:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000966:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000968:	400a      	ands	r2, r1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800096c:	6961      	ldr	r1, [r4, #20]
 800096e:	6922      	ldr	r2, [r4, #16]
 8000970:	430a      	orrs	r2, r1
 8000972:	69a1      	ldr	r1, [r4, #24]
 8000974:	0209      	lsls	r1, r1, #8
 8000976:	430a      	orrs	r2, r1
 8000978:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800097a:	6a21      	ldr	r1, [r4, #32]
 800097c:	69e2      	ldr	r2, [r4, #28]
 800097e:	430a      	orrs	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000982:	2201      	movs	r2, #1
 8000984:	6819      	ldr	r1, [r3, #0]
 8000986:	430a      	orrs	r2, r1
 8000988:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800098a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800098c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800098e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000990:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000992:	3442      	adds	r4, #66	; 0x42
 8000994:	7020      	strb	r0, [r4, #0]
}
 8000996:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000998:	2184      	movs	r1, #132	; 0x84
 800099a:	0209      	lsls	r1, r1, #8
 800099c:	4331      	orrs	r1, r6
 800099e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d1db      	bne.n	800095c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0109      	lsls	r1, r1, #4
 80009a8:	6059      	str	r1, [r3, #4]
 80009aa:	e7d7      	b.n	800095c <HAL_I2C_Init+0x50>
 80009ac:	f0ffffff 	.word	0xf0ffffff
 80009b0:	ffff7fff 	.word	0xffff7fff
 80009b4:	02008000 	.word	0x02008000

080009b8 <HAL_I2C_Master_Transmit>:
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009ba:	0005      	movs	r5, r0
{
 80009bc:	b087      	sub	sp, #28
 80009be:	9103      	str	r1, [sp, #12]
 80009c0:	9204      	str	r2, [sp, #16]
 80009c2:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009c4:	3541      	adds	r5, #65	; 0x41
 80009c6:	782b      	ldrb	r3, [r5, #0]
{
 80009c8:	0004      	movs	r4, r0
    return HAL_BUSY;
 80009ca:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009cc:	2b20      	cmp	r3, #32
 80009ce:	d114      	bne.n	80009fa <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 80009d0:	0023      	movs	r3, r4
 80009d2:	3340      	adds	r3, #64	; 0x40
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	2a01      	cmp	r2, #1
 80009d8:	d00f      	beq.n	80009fa <HAL_I2C_Master_Transmit+0x42>
 80009da:	2601      	movs	r6, #1
 80009dc:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80009de:	f7ff fd3d 	bl	800045c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80009e2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80009e4:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80009e6:	9000      	str	r0, [sp, #0]
 80009e8:	2319      	movs	r3, #25
 80009ea:	0032      	movs	r2, r6
 80009ec:	0209      	lsls	r1, r1, #8
 80009ee:	0020      	movs	r0, r4
 80009f0:	f7ff fe94 	bl	800071c <I2C_WaitOnFlagUntilTimeout>
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d002      	beq.n	80009fe <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
}
 80009fa:	b007      	add	sp, #28
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009fe:	2321      	movs	r3, #33	; 0x21
 8000a00:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000a02:	0025      	movs	r5, r4
 8000a04:	3b11      	subs	r3, #17
 8000a06:	3542      	adds	r5, #66	; 0x42
 8000a08:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000a0a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a0c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000a0e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000a10:	466b      	mov	r3, sp
 8000a12:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000a14:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000a16:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_I2C_Master_Transmit+0x124>)
 8000a1c:	2aff      	cmp	r2, #255	; 0xff
 8000a1e:	d921      	bls.n	8000a64 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a20:	22ff      	movs	r2, #255	; 0xff
 8000a22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	045b      	lsls	r3, r3, #17
 8000a2a:	9903      	ldr	r1, [sp, #12]
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	f7ff fe5f 	bl	80006f0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a32:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a36:	003a      	movs	r2, r7
 8000a38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000a3a:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d119      	bne.n	8000a74 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a40:	f7ff fefc 	bl	800083c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d1d7      	bne.n	80009f8 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a48:	2120      	movs	r1, #32
 8000a4a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000a4c:	4e24      	ldr	r6, [pc, #144]	; (8000ae0 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a4e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	4032      	ands	r2, r6
 8000a54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a56:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000a58:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000a5a:	3341      	adds	r3, #65	; 0x41
 8000a5c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000a5e:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000a60:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000a62:	e7ca      	b.n	80009fa <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000a64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000a66:	b292      	uxth	r2, r2
 8000a68:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	049b      	lsls	r3, r3, #18
 8000a72:	e7da      	b.n	8000a2a <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a74:	f7ff feb8 	bl	80007e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d1bd      	bne.n	80009f8 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000a82:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a84:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000a86:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000a88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a92:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a96:	b292      	uxth	r2, r2
 8000a98:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0ca      	beq.n	8000a34 <HAL_I2C_Master_Transmit+0x7c>
 8000a9e:	2a00      	cmp	r2, #0
 8000aa0:	d1c8      	bne.n	8000a34 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000aa2:	9700      	str	r7, [sp, #0]
 8000aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0020      	movs	r0, r4
 8000aaa:	f7ff fe37 	bl	800071c <I2C_WaitOnFlagUntilTimeout>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1a2      	bne.n	80009f8 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ab2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ab4:	2bff      	cmp	r3, #255	; 0xff
 8000ab6:	d909      	bls.n	8000acc <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000abc:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000abe:	045b      	lsls	r3, r3, #17
 8000ac0:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ac2:	9903      	ldr	r1, [sp, #12]
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	f7ff fe13 	bl	80006f0 <I2C_TransferConfig>
 8000aca:	e7b3      	b.n	8000a34 <HAL_I2C_Master_Transmit+0x7c>
 8000acc:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000ace:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ad0:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	9000      	str	r0, [sp, #0]
 8000ada:	e7f2      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x10a>
 8000adc:	80002000 	.word	0x80002000
 8000ae0:	fe00e800 	.word	0xfe00e800

08000ae4 <HAL_I2C_Master_Receive>:
{
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ae6:	0005      	movs	r5, r0
{
 8000ae8:	b087      	sub	sp, #28
 8000aea:	9103      	str	r1, [sp, #12]
 8000aec:	9204      	str	r2, [sp, #16]
 8000aee:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000af0:	3541      	adds	r5, #65	; 0x41
 8000af2:	782b      	ldrb	r3, [r5, #0]
{
 8000af4:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000af6:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000af8:	2b20      	cmp	r3, #32
 8000afa:	d114      	bne.n	8000b26 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8000afc:	0023      	movs	r3, r4
 8000afe:	3340      	adds	r3, #64	; 0x40
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	2a01      	cmp	r2, #1
 8000b04:	d00f      	beq.n	8000b26 <HAL_I2C_Master_Receive+0x42>
 8000b06:	2601      	movs	r6, #1
 8000b08:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000b0a:	f7ff fca7 	bl	800045c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b0e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000b10:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b12:	9000      	str	r0, [sp, #0]
 8000b14:	2319      	movs	r3, #25
 8000b16:	0032      	movs	r2, r6
 8000b18:	0209      	lsls	r1, r1, #8
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f7ff fdfe 	bl	800071c <I2C_WaitOnFlagUntilTimeout>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d002      	beq.n	8000b2a <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
}
 8000b26:	b007      	add	sp, #28
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000b2a:	2322      	movs	r3, #34	; 0x22
 8000b2c:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b2e:	0025      	movs	r5, r4
 8000b30:	3b12      	subs	r3, #18
 8000b32:	3542      	adds	r5, #66	; 0x42
 8000b34:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000b36:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b38:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000b3a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000b3c:	466b      	mov	r3, sp
 8000b3e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000b40:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000b42:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <HAL_I2C_Master_Receive+0x128>)
 8000b48:	2aff      	cmp	r2, #255	; 0xff
 8000b4a:	d921      	bls.n	8000b90 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	045b      	lsls	r3, r3, #17
 8000b56:	9903      	ldr	r1, [sp, #12]
 8000b58:	0020      	movs	r0, r4
 8000b5a:	f7ff fdc9 	bl	80006f0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b5e:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b62:	003a      	movs	r2, r7
 8000b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000b66:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d119      	bne.n	8000ba0 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b6c:	f7ff fe66 	bl	800083c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1d7      	bne.n	8000b24 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b74:	2120      	movs	r1, #32
 8000b76:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000b78:	4e25      	ldr	r6, [pc, #148]	; (8000c10 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b7a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4032      	ands	r2, r6
 8000b80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b82:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000b84:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000b86:	3341      	adds	r3, #65	; 0x41
 8000b88:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b8a:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000b8c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000b8e:	e7ca      	b.n	8000b26 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000b90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b92:	b292      	uxth	r2, r2
 8000b94:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	049b      	lsls	r3, r3, #18
 8000b9e:	e7da      	b.n	8000b56 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ba0:	f7ff fe74 	bl	800088c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d1bd      	bne.n	8000b24 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000bb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000bb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bba:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bc4:	b292      	uxth	r2, r2
 8000bc6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0c9      	beq.n	8000b60 <HAL_I2C_Master_Receive+0x7c>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d1c7      	bne.n	8000b60 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000bd0:	9700      	str	r7, [sp, #0]
 8000bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0020      	movs	r0, r4
 8000bd8:	f7ff fda0 	bl	800071c <I2C_WaitOnFlagUntilTimeout>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1a1      	bne.n	8000b24 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d909      	bls.n	8000bfa <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bea:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bec:	045b      	lsls	r3, r3, #17
 8000bee:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bf0:	9903      	ldr	r1, [sp, #12]
 8000bf2:	0020      	movs	r0, r4
 8000bf4:	f7ff fd7c 	bl	80006f0 <I2C_TransferConfig>
 8000bf8:	e7b2      	b.n	8000b60 <HAL_I2C_Master_Receive+0x7c>
 8000bfa:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000bfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bfe:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000c00:	b292      	uxth	r2, r2
 8000c02:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	9000      	str	r0, [sp, #0]
 8000c08:	e7f2      	b.n	8000bf0 <HAL_I2C_Master_Receive+0x10c>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	80002400 	.word	0x80002400
 8000c10:	fe00e800 	.word	0xfe00e800

08000c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c16:	0004      	movs	r4, r0
 8000c18:	3441      	adds	r4, #65	; 0x41
 8000c1a:	7822      	ldrb	r2, [r4, #0]
{
 8000c1c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c1e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000c20:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c22:	2a20      	cmp	r2, #32
 8000c24:	d118      	bne.n	8000c58 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000c26:	001d      	movs	r5, r3
 8000c28:	3540      	adds	r5, #64	; 0x40
 8000c2a:	782e      	ldrb	r6, [r5, #0]
 8000c2c:	2e01      	cmp	r6, #1
 8000c2e:	d013      	beq.n	8000c58 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000c30:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c32:	3022      	adds	r0, #34	; 0x22
 8000c34:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000c36:	681e      	ldr	r6, [r3, #0]
 8000c38:	3823      	subs	r0, #35	; 0x23
 8000c3a:	4386      	bics	r6, r0
 8000c3c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c3e:	681e      	ldr	r6, [r3, #0]
 8000c40:	4f06      	ldr	r7, [pc, #24]	; (8000c5c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000c42:	403e      	ands	r6, r7
 8000c44:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000c46:	681e      	ldr	r6, [r3, #0]
 8000c48:	4331      	orrs	r1, r6
 8000c4a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4308      	orrs	r0, r1
 8000c50:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000c52:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c54:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000c56:	7028      	strb	r0, [r5, #0]
  }
}
 8000c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	ffffefff 	.word	0xffffefff

08000c60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c62:	0005      	movs	r5, r0
 8000c64:	3541      	adds	r5, #65	; 0x41
 8000c66:	782a      	ldrb	r2, [r5, #0]
{
 8000c68:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c6a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000c6c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c6e:	2a20      	cmp	r2, #32
 8000c70:	d117      	bne.n	8000ca2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000c72:	001c      	movs	r4, r3
 8000c74:	3440      	adds	r4, #64	; 0x40
 8000c76:	7826      	ldrb	r6, [r4, #0]
 8000c78:	2e01      	cmp	r6, #1
 8000c7a:	d012      	beq.n	8000ca2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000c7c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c7e:	3022      	adds	r0, #34	; 0x22
 8000c80:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000c82:	681e      	ldr	r6, [r3, #0]
 8000c84:	3823      	subs	r0, #35	; 0x23
 8000c86:	4386      	bics	r6, r0
 8000c88:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000c8a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000c8c:	4f05      	ldr	r7, [pc, #20]	; (8000ca4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000c8e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000c90:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000c92:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000c94:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000c96:	6819      	ldr	r1, [r3, #0]
 8000c98:	4308      	orrs	r0, r1
 8000c9a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000c9c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c9e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000ca0:	7020      	strb	r0, [r4, #0]
  }
}
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca4:	fffff0ff 	.word	0xfffff0ff

08000ca8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ca8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000cac:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000cae:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	2a08      	cmp	r2, #8
 8000cb4:	d026      	beq.n	8000d04 <HAL_RCC_GetSysClockFreq+0x5c>
 8000cb6:	2a0c      	cmp	r2, #12
 8000cb8:	d006      	beq.n	8000cc8 <HAL_RCC_GetSysClockFreq+0x20>
 8000cba:	2a04      	cmp	r2, #4
 8000cbc:	d11a      	bne.n	8000cf4 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	06db      	lsls	r3, r3, #27
 8000cc2:	d421      	bmi.n	8000d08 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000cc6:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000cc8:	028a      	lsls	r2, r1, #10
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000ccc:	0f12      	lsrs	r2, r2, #28
 8000cce:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000cd0:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cd2:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000cd4:	0f89      	lsrs	r1, r1, #30
 8000cd6:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cd8:	03c0      	lsls	r0, r0, #15
 8000cda:	d504      	bpl.n	8000ce6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000cde:	4350      	muls	r0, r2
 8000ce0:	f7ff fa12 	bl	8000108 <__udivsi3>
 8000ce4:	e7ef      	b.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	06db      	lsls	r3, r3, #27
 8000cea:	d501      	bpl.n	8000cf0 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x74>)
 8000cee:	e7f6      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x68>)
 8000cf2:	e7f4      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000cf4:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000cf6:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000cf8:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4098      	lsls	r0, r3
 8000d02:	e7e0      	b.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x70>)
 8000d06:	e7de      	b.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000d0a:	e7dc      	b.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x1e>
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	00f42400 	.word	0x00f42400
 8000d14:	08001cd4 	.word	0x08001cd4
 8000d18:	007a1200 	.word	0x007a1200
 8000d1c:	003d0900 	.word	0x003d0900

08000d20 <HAL_RCC_OscConfig>:
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	0005      	movs	r5, r0
 8000d24:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d102      	bne.n	8000d30 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	b007      	add	sp, #28
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d30:	230c      	movs	r3, #12
 8000d32:	4cbe      	ldr	r4, [pc, #760]	; (800102c <HAL_RCC_OscConfig+0x30c>)
 8000d34:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d36:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d38:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	025b      	lsls	r3, r3, #9
 8000d3e:	401a      	ands	r2, r3
 8000d40:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d42:	6802      	ldr	r2, [r0, #0]
 8000d44:	07d2      	lsls	r2, r2, #31
 8000d46:	d441      	bmi.n	8000dcc <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	079b      	lsls	r3, r3, #30
 8000d4c:	d500      	bpl.n	8000d50 <HAL_RCC_OscConfig+0x30>
 8000d4e:	e087      	b.n	8000e60 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	06db      	lsls	r3, r3, #27
 8000d54:	d528      	bpl.n	8000da8 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d000      	beq.n	8000d5c <HAL_RCC_OscConfig+0x3c>
 8000d5a:	e0d9      	b.n	8000f10 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	059b      	lsls	r3, r3, #22
 8000d60:	d502      	bpl.n	8000d68 <HAL_RCC_OscConfig+0x48>
 8000d62:	69eb      	ldr	r3, [r5, #28]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0e0      	beq.n	8000d2a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d68:	6862      	ldr	r2, [r4, #4]
 8000d6a:	49b1      	ldr	r1, [pc, #708]	; (8001030 <HAL_RCC_OscConfig+0x310>)
 8000d6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d6e:	400a      	ands	r2, r1
 8000d70:	431a      	orrs	r2, r3
 8000d72:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d74:	6861      	ldr	r1, [r4, #4]
 8000d76:	6a2a      	ldr	r2, [r5, #32]
 8000d78:	0209      	lsls	r1, r1, #8
 8000d7a:	0a09      	lsrs	r1, r1, #8
 8000d7c:	0612      	lsls	r2, r2, #24
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	0b5b      	lsrs	r3, r3, #13
 8000d86:	3301      	adds	r3, #1
 8000d88:	0212      	lsls	r2, r2, #8
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d8e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d90:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d92:	060a      	lsls	r2, r1, #24
 8000d94:	49a7      	ldr	r1, [pc, #668]	; (8001034 <HAL_RCC_OscConfig+0x314>)
 8000d96:	0f12      	lsrs	r2, r2, #28
 8000d98:	5c8a      	ldrb	r2, [r1, r2]
 8000d9a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d9c:	4aa6      	ldr	r2, [pc, #664]	; (8001038 <HAL_RCC_OscConfig+0x318>)
 8000d9e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000da0:	f7ff fb28 	bl	80003f4 <HAL_InitTick>
        if(status != HAL_OK)
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d1c1      	bne.n	8000d2c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	071b      	lsls	r3, r3, #28
 8000dac:	d500      	bpl.n	8000db0 <HAL_RCC_OscConfig+0x90>
 8000dae:	e0e6      	b.n	8000f7e <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	075b      	lsls	r3, r3, #29
 8000db4:	d500      	bpl.n	8000db8 <HAL_RCC_OscConfig+0x98>
 8000db6:	e108      	b.n	8000fca <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	069b      	lsls	r3, r3, #26
 8000dbc:	d500      	bpl.n	8000dc0 <HAL_RCC_OscConfig+0xa0>
 8000dbe:	e18d      	b.n	80010dc <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d000      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xa8>
 8000dc6:	e1bc      	b.n	8001142 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e7af      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dcc:	2e08      	cmp	r6, #8
 8000dce:	d004      	beq.n	8000dda <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dd0:	2e0c      	cmp	r6, #12
 8000dd2:	d109      	bne.n	8000de8 <HAL_RCC_OscConfig+0xc8>
 8000dd4:	9a01      	ldr	r2, [sp, #4]
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d006      	beq.n	8000de8 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	039b      	lsls	r3, r3, #14
 8000dde:	d5b3      	bpl.n	8000d48 <HAL_RCC_OscConfig+0x28>
 8000de0:	686b      	ldr	r3, [r5, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1b0      	bne.n	8000d48 <HAL_RCC_OscConfig+0x28>
 8000de6:	e7a0      	b.n	8000d2a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	686a      	ldr	r2, [r5, #4]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d111      	bne.n	8000e12 <HAL_RCC_OscConfig+0xf2>
 8000dee:	6822      	ldr	r2, [r4, #0]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000df4:	f7ff fb32 	bl	800045c <HAL_GetTick>
 8000df8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	0292      	lsls	r2, r2, #10
 8000e00:	4213      	tst	r3, r2
 8000e02:	d1a1      	bne.n	8000d48 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fb2a 	bl	800045c <HAL_GetTick>
 8000e08:	1bc0      	subs	r0, r0, r7
 8000e0a:	2864      	cmp	r0, #100	; 0x64
 8000e0c:	d9f5      	bls.n	8000dfa <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000e0e:	2003      	movs	r0, #3
 8000e10:	e78c      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e12:	21a0      	movs	r1, #160	; 0xa0
 8000e14:	02c9      	lsls	r1, r1, #11
 8000e16:	428a      	cmp	r2, r1
 8000e18:	d105      	bne.n	8000e26 <HAL_RCC_OscConfig+0x106>
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	6821      	ldr	r1, [r4, #0]
 8000e1e:	02d2      	lsls	r2, r2, #11
 8000e20:	430a      	orrs	r2, r1
 8000e22:	6022      	str	r2, [r4, #0]
 8000e24:	e7e3      	b.n	8000dee <HAL_RCC_OscConfig+0xce>
 8000e26:	6821      	ldr	r1, [r4, #0]
 8000e28:	4884      	ldr	r0, [pc, #528]	; (800103c <HAL_RCC_OscConfig+0x31c>)
 8000e2a:	4001      	ands	r1, r0
 8000e2c:	6021      	str	r1, [r4, #0]
 8000e2e:	6821      	ldr	r1, [r4, #0]
 8000e30:	400b      	ands	r3, r1
 8000e32:	9305      	str	r3, [sp, #20]
 8000e34:	9b05      	ldr	r3, [sp, #20]
 8000e36:	4982      	ldr	r1, [pc, #520]	; (8001040 <HAL_RCC_OscConfig+0x320>)
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d1d8      	bne.n	8000df4 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000e42:	f7ff fb0b 	bl	800045c <HAL_GetTick>
 8000e46:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	0292      	lsls	r2, r2, #10
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d100      	bne.n	8000e54 <HAL_RCC_OscConfig+0x134>
 8000e52:	e779      	b.n	8000d48 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fb02 	bl	800045c <HAL_GetTick>
 8000e58:	1bc0      	subs	r0, r0, r7
 8000e5a:	2864      	cmp	r0, #100	; 0x64
 8000e5c:	d9f4      	bls.n	8000e48 <HAL_RCC_OscConfig+0x128>
 8000e5e:	e7d6      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000e60:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e62:	2e04      	cmp	r6, #4
 8000e64:	d004      	beq.n	8000e70 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e66:	2e0c      	cmp	r6, #12
 8000e68:	d125      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x196>
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d122      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	075b      	lsls	r3, r3, #29
 8000e74:	d502      	bpl.n	8000e7c <HAL_RCC_OscConfig+0x15c>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d100      	bne.n	8000e7c <HAL_RCC_OscConfig+0x15c>
 8000e7a:	e756      	b.n	8000d2a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7c:	6861      	ldr	r1, [r4, #4]
 8000e7e:	692b      	ldr	r3, [r5, #16]
 8000e80:	4870      	ldr	r0, [pc, #448]	; (8001044 <HAL_RCC_OscConfig+0x324>)
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	4001      	ands	r1, r0
 8000e86:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e88:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	438b      	bics	r3, r1
 8000e90:	4313      	orrs	r3, r2
 8000e92:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e94:	f7ff ff08 	bl	8000ca8 <HAL_RCC_GetSysClockFreq>
 8000e98:	68e3      	ldr	r3, [r4, #12]
 8000e9a:	4a66      	ldr	r2, [pc, #408]	; (8001034 <HAL_RCC_OscConfig+0x314>)
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	0f1b      	lsrs	r3, r3, #28
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	40d8      	lsrs	r0, r3
 8000ea4:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_RCC_OscConfig+0x318>)
 8000ea6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff faa3 	bl	80003f4 <HAL_InitTick>
      if(status != HAL_OK)
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d100      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x194>
 8000eb2:	e74d      	b.n	8000d50 <HAL_RCC_OscConfig+0x30>
 8000eb4:	e73a      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000eb6:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d018      	beq.n	8000eee <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ebc:	2109      	movs	r1, #9
 8000ebe:	438b      	bics	r3, r1
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ec4:	f7ff faca 	bl	800045c <HAL_GetTick>
 8000ec8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	4213      	tst	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed2:	6862      	ldr	r2, [r4, #4]
 8000ed4:	692b      	ldr	r3, [r5, #16]
 8000ed6:	495b      	ldr	r1, [pc, #364]	; (8001044 <HAL_RCC_OscConfig+0x324>)
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	400a      	ands	r2, r1
 8000edc:	4313      	orrs	r3, r2
 8000ede:	6063      	str	r3, [r4, #4]
 8000ee0:	e736      	b.n	8000d50 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fabb 	bl	800045c <HAL_GetTick>
 8000ee6:	1bc0      	subs	r0, r0, r7
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d9ee      	bls.n	8000eca <HAL_RCC_OscConfig+0x1aa>
 8000eec:	e78f      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4393      	bics	r3, r2
 8000ef2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fab2 	bl	800045c <HAL_GetTick>
 8000ef8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000efa:	2204      	movs	r2, #4
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	4213      	tst	r3, r2
 8000f00:	d100      	bne.n	8000f04 <HAL_RCC_OscConfig+0x1e4>
 8000f02:	e725      	b.n	8000d50 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f04:	f7ff faaa 	bl	800045c <HAL_GetTick>
 8000f08:	1bc0      	subs	r0, r0, r7
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9f5      	bls.n	8000efa <HAL_RCC_OscConfig+0x1da>
 8000f0e:	e77e      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f10:	69eb      	ldr	r3, [r5, #28]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d020      	beq.n	8000f58 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f20:	f7ff fa9c 	bl	800045c <HAL_GetTick>
 8000f24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4213      	tst	r3, r2
 8000f2e:	d00d      	beq.n	8000f4c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f30:	6863      	ldr	r3, [r4, #4]
 8000f32:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <HAL_RCC_OscConfig+0x310>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f3c:	6862      	ldr	r2, [r4, #4]
 8000f3e:	6a2b      	ldr	r3, [r5, #32]
 8000f40:	0212      	lsls	r2, r2, #8
 8000f42:	061b      	lsls	r3, r3, #24
 8000f44:	0a12      	lsrs	r2, r2, #8
 8000f46:	4313      	orrs	r3, r2
 8000f48:	6063      	str	r3, [r4, #4]
 8000f4a:	e72d      	b.n	8000da8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fa86 	bl	800045c <HAL_GetTick>
 8000f50:	1bc0      	subs	r0, r0, r7
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9e7      	bls.n	8000f26 <HAL_RCC_OscConfig+0x206>
 8000f56:	e75a      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <HAL_RCC_OscConfig+0x328>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f60:	f7ff fa7c 	bl	800045c <HAL_GetTick>
 8000f64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4213      	tst	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x252>
 8000f70:	e71a      	b.n	8000da8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f72:	f7ff fa73 	bl	800045c <HAL_GetTick>
 8000f76:	1bc0      	subs	r0, r0, r7
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9f4      	bls.n	8000f66 <HAL_RCC_OscConfig+0x246>
 8000f7c:	e747      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f7e:	696a      	ldr	r2, [r5, #20]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d010      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000f86:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fa66 	bl	800045c <HAL_GetTick>
 8000f90:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f92:	2202      	movs	r2, #2
 8000f94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f96:	4213      	tst	r3, r2
 8000f98:	d000      	beq.n	8000f9c <HAL_RCC_OscConfig+0x27c>
 8000f9a:	e709      	b.n	8000db0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fa5e 	bl	800045c <HAL_GetTick>
 8000fa0:	1bc0      	subs	r0, r0, r7
 8000fa2:	2802      	cmp	r0, #2
 8000fa4:	d9f5      	bls.n	8000f92 <HAL_RCC_OscConfig+0x272>
 8000fa6:	e732      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000fa8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000faa:	439a      	bics	r2, r3
 8000fac:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fae:	f7ff fa55 	bl	800045c <HAL_GetTick>
 8000fb2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fb8:	4213      	tst	r3, r2
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x29e>
 8000fbc:	e6f8      	b.n	8000db0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fa4d 	bl	800045c <HAL_GetTick>
 8000fc2:	1bc0      	subs	r0, r0, r7
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9f5      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x294>
 8000fc8:	e721      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fca:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000fcc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000fd0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd4:	421a      	tst	r2, r3
 8000fd6:	d104      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	4f19      	ldr	r7, [pc, #100]	; (800104c <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	0052      	lsls	r2, r2, #1
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4213      	tst	r3, r2
 8000fec:	d008      	beq.n	8001000 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	68ab      	ldr	r3, [r5, #8]
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d12b      	bne.n	8001050 <HAL_RCC_OscConfig+0x330>
 8000ff8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8000ffe:	e04c      	b.n	800109a <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0052      	lsls	r2, r2, #1
 8001006:	4313      	orrs	r3, r2
 8001008:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800100a:	f7ff fa27 	bl	800045c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001012:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	9a03      	ldr	r2, [sp, #12]
 800101a:	4213      	tst	r3, r2
 800101c:	d1e7      	bne.n	8000fee <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff fa1d 	bl	800045c <HAL_GetTick>
 8001022:	9b02      	ldr	r3, [sp, #8]
 8001024:	1ac0      	subs	r0, r0, r3
 8001026:	2864      	cmp	r0, #100	; 0x64
 8001028:	d9f5      	bls.n	8001016 <HAL_RCC_OscConfig+0x2f6>
 800102a:	e6f0      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
 800102c:	40021000 	.word	0x40021000
 8001030:	ffff1fff 	.word	0xffff1fff
 8001034:	08001cc4 	.word	0x08001cc4
 8001038:	20000000 	.word	0x20000000
 800103c:	fffeffff 	.word	0xfffeffff
 8001040:	fffbffff 	.word	0xfffbffff
 8001044:	ffffe0ff 	.word	0xffffe0ff
 8001048:	fffffeff 	.word	0xfffffeff
 800104c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001050:	2b00      	cmp	r3, #0
 8001052:	d116      	bne.n	8001082 <HAL_RCC_OscConfig+0x362>
 8001054:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001056:	4a6c      	ldr	r2, [pc, #432]	; (8001208 <HAL_RCC_OscConfig+0x4e8>)
 8001058:	4013      	ands	r3, r2
 800105a:	6523      	str	r3, [r4, #80]	; 0x50
 800105c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800105e:	4a6b      	ldr	r2, [pc, #428]	; (800120c <HAL_RCC_OscConfig+0x4ec>)
 8001060:	4013      	ands	r3, r2
 8001062:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001064:	f7ff f9fa 	bl	800045c <HAL_GetTick>
 8001068:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4213      	tst	r3, r2
 8001072:	d02a      	beq.n	80010ca <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001074:	f7ff f9f2 	bl	800045c <HAL_GetTick>
 8001078:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_RCC_OscConfig+0x4f0>)
 800107a:	1bc0      	subs	r0, r0, r7
 800107c:	4298      	cmp	r0, r3
 800107e:	d9f4      	bls.n	800106a <HAL_RCC_OscConfig+0x34a>
 8001080:	e6c5      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001082:	21a0      	movs	r1, #160	; 0xa0
 8001084:	00c9      	lsls	r1, r1, #3
 8001086:	428b      	cmp	r3, r1
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x382>
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	430b      	orrs	r3, r1
 8001092:	6523      	str	r3, [r4, #80]	; 0x50
 8001094:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001096:	431a      	orrs	r2, r3
 8001098:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800109a:	f7ff f9df 	bl	800045c <HAL_GetTick>
 800109e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010a0:	e00e      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010a4:	4a58      	ldr	r2, [pc, #352]	; (8001208 <HAL_RCC_OscConfig+0x4e8>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	6523      	str	r3, [r4, #80]	; 0x50
 80010aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010ac:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_RCC_OscConfig+0x4ec>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	e7a4      	b.n	8000ffc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff f9d3 	bl	800045c <HAL_GetTick>
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <HAL_RCC_OscConfig+0x4f0>)
 80010b8:	1bc0      	subs	r0, r0, r7
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d900      	bls.n	80010c0 <HAL_RCC_OscConfig+0x3a0>
 80010be:	e6a6      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4213      	tst	r3, r2
 80010c8:	d0f3      	beq.n	80010b2 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d000      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3b2>
 80010d0:	e672      	b.n	8000db8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80010da:	e66d      	b.n	8000db8 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010dc:	69a9      	ldr	r1, [r5, #24]
 80010de:	2301      	movs	r3, #1
 80010e0:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_RCC_OscConfig+0x4f8>)
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d018      	beq.n	8001118 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 80010e6:	68a1      	ldr	r1, [r4, #8]
 80010e8:	4319      	orrs	r1, r3
 80010ea:	60a1      	str	r1, [r4, #8]
 80010ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6363      	str	r3, [r4, #52]	; 0x34
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	6a11      	ldr	r1, [r2, #32]
 80010f6:	019b      	lsls	r3, r3, #6
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80010fc:	f7ff f9ae 	bl	800045c <HAL_GetTick>
 8001100:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001102:	2202      	movs	r2, #2
 8001104:	68a3      	ldr	r3, [r4, #8]
 8001106:	4213      	tst	r3, r2
 8001108:	d000      	beq.n	800110c <HAL_RCC_OscConfig+0x3ec>
 800110a:	e659      	b.n	8000dc0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800110c:	f7ff f9a6 	bl	800045c <HAL_GetTick>
 8001110:	1bc0      	subs	r0, r0, r7
 8001112:	2802      	cmp	r0, #2
 8001114:	d9f5      	bls.n	8001102 <HAL_RCC_OscConfig+0x3e2>
 8001116:	e67a      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8001118:	68a1      	ldr	r1, [r4, #8]
 800111a:	4399      	bics	r1, r3
 800111c:	60a1      	str	r1, [r4, #8]
 800111e:	6a13      	ldr	r3, [r2, #32]
 8001120:	493e      	ldr	r1, [pc, #248]	; (800121c <HAL_RCC_OscConfig+0x4fc>)
 8001122:	400b      	ands	r3, r1
 8001124:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001126:	f7ff f999 	bl	800045c <HAL_GetTick>
 800112a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800112c:	2202      	movs	r2, #2
 800112e:	68a3      	ldr	r3, [r4, #8]
 8001130:	4213      	tst	r3, r2
 8001132:	d100      	bne.n	8001136 <HAL_RCC_OscConfig+0x416>
 8001134:	e644      	b.n	8000dc0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001136:	f7ff f991 	bl	800045c <HAL_GetTick>
 800113a:	1bc0      	subs	r0, r0, r7
 800113c:	2802      	cmp	r0, #2
 800113e:	d9f5      	bls.n	800112c <HAL_RCC_OscConfig+0x40c>
 8001140:	e665      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001142:	2e0c      	cmp	r6, #12
 8001144:	d043      	beq.n	80011ce <HAL_RCC_OscConfig+0x4ae>
 8001146:	4a36      	ldr	r2, [pc, #216]	; (8001220 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001148:	2b02      	cmp	r3, #2
 800114a:	d12e      	bne.n	80011aa <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 800114c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800114e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001150:	4013      	ands	r3, r2
 8001152:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001154:	f7ff f982 	bl	800045c <HAL_GetTick>
 8001158:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800115a:	04b6      	lsls	r6, r6, #18
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	4233      	tst	r3, r6
 8001160:	d11d      	bne.n	800119e <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001162:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001164:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001166:	68e2      	ldr	r2, [r4, #12]
 8001168:	430b      	orrs	r3, r1
 800116a:	492e      	ldr	r1, [pc, #184]	; (8001224 <HAL_RCC_OscConfig+0x504>)
 800116c:	400a      	ands	r2, r1
 800116e:	4313      	orrs	r3, r2
 8001170:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001172:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001174:	4313      	orrs	r3, r2
 8001176:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	045b      	lsls	r3, r3, #17
 800117e:	4313      	orrs	r3, r2
 8001180:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001182:	f7ff f96b 	bl	800045c <HAL_GetTick>
 8001186:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001188:	04ad      	lsls	r5, r5, #18
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	422b      	tst	r3, r5
 800118e:	d000      	beq.n	8001192 <HAL_RCC_OscConfig+0x472>
 8001190:	e61a      	b.n	8000dc8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff f963 	bl	800045c <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2802      	cmp	r0, #2
 800119a:	d9f6      	bls.n	800118a <HAL_RCC_OscConfig+0x46a>
 800119c:	e637      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff f95d 	bl	800045c <HAL_GetTick>
 80011a2:	1bc0      	subs	r0, r0, r7
 80011a4:	2802      	cmp	r0, #2
 80011a6:	d9d9      	bls.n	800115c <HAL_RCC_OscConfig+0x43c>
 80011a8:	e631      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80011aa:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011ac:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80011ae:	4013      	ands	r3, r2
 80011b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011b2:	f7ff f953 	bl	800045c <HAL_GetTick>
 80011b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011b8:	04ad      	lsls	r5, r5, #18
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	422b      	tst	r3, r5
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x4a2>
 80011c0:	e602      	b.n	8000dc8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff f94b 	bl	800045c <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f6      	bls.n	80011ba <HAL_RCC_OscConfig+0x49a>
 80011cc:	e61f      	b.n	8000e0e <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80011ce:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d100      	bne.n	80011d6 <HAL_RCC_OscConfig+0x4b6>
 80011d4:	e5aa      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80011d8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011da:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80011dc:	0252      	lsls	r2, r2, #9
 80011de:	401a      	ands	r2, r3
        return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	428a      	cmp	r2, r1
 80011e4:	d000      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4c8>
 80011e6:	e5a1      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011e8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011ec:	0392      	lsls	r2, r2, #14
 80011ee:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d000      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4d6>
 80011f4:	e59a      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80011f6:	20c0      	movs	r0, #192	; 0xc0
 80011f8:	0400      	lsls	r0, r0, #16
 80011fa:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011fc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80011fe:	1a18      	subs	r0, r3, r0
 8001200:	1e43      	subs	r3, r0, #1
 8001202:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	e591      	b.n	8000d2c <HAL_RCC_OscConfig+0xc>
 8001208:	fffffeff 	.word	0xfffffeff
 800120c:	fffffbff 	.word	0xfffffbff
 8001210:	00001388 	.word	0x00001388
 8001214:	efffffff 	.word	0xefffffff
 8001218:	40010000 	.word	0x40010000
 800121c:	ffffdfff 	.word	0xffffdfff
 8001220:	feffffff 	.word	0xfeffffff
 8001224:	ff02ffff 	.word	0xff02ffff

08001228 <HAL_RCC_ClockConfig>:
{
 8001228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800122a:	1e06      	subs	r6, r0, #0
 800122c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
}
 8001232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	2201      	movs	r2, #1
 8001236:	4c51      	ldr	r4, [pc, #324]	; (800137c <HAL_RCC_ClockConfig+0x154>)
 8001238:	9901      	ldr	r1, [sp, #4]
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	4013      	ands	r3, r2
 800123e:	428b      	cmp	r3, r1
 8001240:	d327      	bcc.n	8001292 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001242:	6832      	ldr	r2, [r6, #0]
 8001244:	0793      	lsls	r3, r2, #30
 8001246:	d42f      	bmi.n	80012a8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001248:	07d3      	lsls	r3, r2, #31
 800124a:	d435      	bmi.n	80012b8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800124c:	2301      	movs	r3, #1
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	9901      	ldr	r1, [sp, #4]
 8001252:	401a      	ands	r2, r3
 8001254:	4291      	cmp	r1, r2
 8001256:	d200      	bcs.n	800125a <HAL_RCC_ClockConfig+0x32>
 8001258:	e081      	b.n	800135e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125a:	6832      	ldr	r2, [r6, #0]
 800125c:	4c48      	ldr	r4, [pc, #288]	; (8001380 <HAL_RCC_ClockConfig+0x158>)
 800125e:	0753      	lsls	r3, r2, #29
 8001260:	d500      	bpl.n	8001264 <HAL_RCC_ClockConfig+0x3c>
 8001262:	e084      	b.n	800136e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	0713      	lsls	r3, r2, #28
 8001266:	d506      	bpl.n	8001276 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001268:	68e2      	ldr	r2, [r4, #12]
 800126a:	6933      	ldr	r3, [r6, #16]
 800126c:	4945      	ldr	r1, [pc, #276]	; (8001384 <HAL_RCC_ClockConfig+0x15c>)
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	400a      	ands	r2, r1
 8001272:	4313      	orrs	r3, r2
 8001274:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001276:	f7ff fd17 	bl	8000ca8 <HAL_RCC_GetSysClockFreq>
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	4a42      	ldr	r2, [pc, #264]	; (8001388 <HAL_RCC_ClockConfig+0x160>)
 800127e:	061b      	lsls	r3, r3, #24
 8001280:	0f1b      	lsrs	r3, r3, #28
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	40d8      	lsrs	r0, r3
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_ClockConfig+0x164>)
 8001288:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff f8b2 	bl	80003f4 <HAL_InitTick>
 8001290:	e7cf      	b.n	8001232 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	9901      	ldr	r1, [sp, #4]
 8001296:	4393      	bics	r3, r2
 8001298:	430b      	orrs	r3, r1
 800129a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	4013      	ands	r3, r2
 80012a0:	9a01      	ldr	r2, [sp, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d1c4      	bne.n	8001230 <HAL_RCC_ClockConfig+0x8>
 80012a6:	e7cc      	b.n	8001242 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	20f0      	movs	r0, #240	; 0xf0
 80012aa:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_RCC_ClockConfig+0x158>)
 80012ac:	68cb      	ldr	r3, [r1, #12]
 80012ae:	4383      	bics	r3, r0
 80012b0:	68b0      	ldr	r0, [r6, #8]
 80012b2:	4303      	orrs	r3, r0
 80012b4:	60cb      	str	r3, [r1, #12]
 80012b6:	e7c7      	b.n	8001248 <HAL_RCC_ClockConfig+0x20>
 80012b8:	4d31      	ldr	r5, [pc, #196]	; (8001380 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012bc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012be:	2a02      	cmp	r2, #2
 80012c0:	d119      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012c2:	039b      	lsls	r3, r3, #14
 80012c4:	d5b4      	bpl.n	8001230 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	2103      	movs	r1, #3
 80012c8:	68eb      	ldr	r3, [r5, #12]
 80012ca:	438b      	bics	r3, r1
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80012d0:	f7ff f8c4 	bl	800045c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80012d6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d119      	bne.n	8001310 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012dc:	220c      	movs	r2, #12
 80012de:	68eb      	ldr	r3, [r5, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d0b2      	beq.n	800124c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e6:	f7ff f8b9 	bl	800045c <HAL_GetTick>
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_RCC_ClockConfig+0x168>)
 80012ec:	1bc0      	subs	r0, r0, r7
 80012ee:	4298      	cmp	r0, r3
 80012f0:	d9f4      	bls.n	80012dc <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
 80012f4:	e79d      	b.n	8001232 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	2a03      	cmp	r2, #3
 80012f8:	d102      	bne.n	8001300 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012fa:	019b      	lsls	r3, r3, #6
 80012fc:	d4e3      	bmi.n	80012c6 <HAL_RCC_ClockConfig+0x9e>
 80012fe:	e797      	b.n	8001230 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001300:	2a01      	cmp	r2, #1
 8001302:	d102      	bne.n	800130a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001304:	075b      	lsls	r3, r3, #29
 8001306:	d4de      	bmi.n	80012c6 <HAL_RCC_ClockConfig+0x9e>
 8001308:	e792      	b.n	8001230 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800130a:	059b      	lsls	r3, r3, #22
 800130c:	d4db      	bmi.n	80012c6 <HAL_RCC_ClockConfig+0x9e>
 800130e:	e78f      	b.n	8001230 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001310:	2b03      	cmp	r3, #3
 8001312:	d10b      	bne.n	800132c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001314:	220c      	movs	r2, #12
 8001316:	68eb      	ldr	r3, [r5, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	4293      	cmp	r3, r2
 800131c:	d096      	beq.n	800124c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131e:	f7ff f89d 	bl	800045c <HAL_GetTick>
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_RCC_ClockConfig+0x168>)
 8001324:	1bc0      	subs	r0, r0, r7
 8001326:	4298      	cmp	r0, r3
 8001328:	d9f4      	bls.n	8001314 <HAL_RCC_ClockConfig+0xec>
 800132a:	e7e2      	b.n	80012f2 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800132c:	2b01      	cmp	r3, #1
 800132e:	d010      	beq.n	8001352 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001330:	220c      	movs	r2, #12
 8001332:	68eb      	ldr	r3, [r5, #12]
 8001334:	4213      	tst	r3, r2
 8001336:	d089      	beq.n	800124c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff f890 	bl	800045c <HAL_GetTick>
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_RCC_ClockConfig+0x168>)
 800133e:	1bc0      	subs	r0, r0, r7
 8001340:	4298      	cmp	r0, r3
 8001342:	d9f5      	bls.n	8001330 <HAL_RCC_ClockConfig+0x108>
 8001344:	e7d5      	b.n	80012f2 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001346:	f7ff f889 	bl	800045c <HAL_GetTick>
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_RCC_ClockConfig+0x168>)
 800134c:	1bc0      	subs	r0, r0, r7
 800134e:	4298      	cmp	r0, r3
 8001350:	d8cf      	bhi.n	80012f2 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	220c      	movs	r2, #12
 8001354:	68eb      	ldr	r3, [r5, #12]
 8001356:	4013      	ands	r3, r2
 8001358:	2b04      	cmp	r3, #4
 800135a:	d1f4      	bne.n	8001346 <HAL_RCC_ClockConfig+0x11e>
 800135c:	e776      	b.n	800124c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	439a      	bics	r2, r3
 8001362:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	421a      	tst	r2, r3
 8001368:	d000      	beq.n	800136c <HAL_RCC_ClockConfig+0x144>
 800136a:	e761      	b.n	8001230 <HAL_RCC_ClockConfig+0x8>
 800136c:	e775      	b.n	800125a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136e:	68e3      	ldr	r3, [r4, #12]
 8001370:	4908      	ldr	r1, [pc, #32]	; (8001394 <HAL_RCC_ClockConfig+0x16c>)
 8001372:	400b      	ands	r3, r1
 8001374:	68f1      	ldr	r1, [r6, #12]
 8001376:	430b      	orrs	r3, r1
 8001378:	60e3      	str	r3, [r4, #12]
 800137a:	e773      	b.n	8001264 <HAL_RCC_ClockConfig+0x3c>
 800137c:	40022000 	.word	0x40022000
 8001380:	40021000 	.word	0x40021000
 8001384:	ffffc7ff 	.word	0xffffc7ff
 8001388:	08001cc4 	.word	0x08001cc4
 800138c:	20000000 	.word	0x20000000
 8001390:	00001388 	.word	0x00001388
 8001394:	fffff8ff 	.word	0xfffff8ff

08001398 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001398:	2382      	movs	r3, #130	; 0x82
{
 800139a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800139c:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800139e:	011b      	lsls	r3, r3, #4
{
 80013a0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80013a2:	421a      	tst	r2, r3
 80013a4:	d047      	beq.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80013a8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013aa:	4c5f      	ldr	r4, [pc, #380]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80013b0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	421a      	tst	r2, r3
 80013b4:	d104      	bne.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013b8:	4313      	orrs	r3, r2
 80013ba:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	2780      	movs	r7, #128	; 0x80
 80013c2:	4e5a      	ldr	r6, [pc, #360]	; (800152c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80013c4:	007f      	lsls	r7, r7, #1
 80013c6:	6833      	ldr	r3, [r6, #0]
 80013c8:	423b      	tst	r3, r7
 80013ca:	d06d      	beq.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80013cc:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80013ce:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80013d0:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	0392      	lsls	r2, r2, #14
 80013d6:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80013d8:	4010      	ands	r0, r2
 80013da:	4283      	cmp	r3, r0
 80013dc:	d103      	bne.n	80013e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80013de:	68a8      	ldr	r0, [r5, #8]
 80013e0:	4002      	ands	r2, r0
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d009      	beq.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	000a      	movs	r2, r1
 80013ea:	029b      	lsls	r3, r3, #10
 80013ec:	401a      	ands	r2, r3
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d103      	bne.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80013f2:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80013f6:	039b      	lsls	r3, r3, #14
 80013f8:	d466      	bmi.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80013fa:	22c0      	movs	r2, #192	; 0xc0
 80013fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013fe:	0292      	lsls	r2, r2, #10
 8001400:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001402:	d162      	bne.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001404:	6869      	ldr	r1, [r5, #4]
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	000a      	movs	r2, r1
 800140a:	029b      	lsls	r3, r3, #10
 800140c:	401a      	ands	r2, r3
 800140e:	429a      	cmp	r2, r3
 8001410:	d107      	bne.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	4846      	ldr	r0, [pc, #280]	; (8001530 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001416:	4003      	ands	r3, r0
 8001418:	20c0      	movs	r0, #192	; 0xc0
 800141a:	0380      	lsls	r0, r0, #14
 800141c:	4001      	ands	r1, r0
 800141e:	430b      	orrs	r3, r1
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001424:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001426:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001428:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800142a:	2b01      	cmp	r3, #1
 800142c:	d103      	bne.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001430:	4a40      	ldr	r2, [pc, #256]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001432:	4013      	ands	r3, r2
 8001434:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	07da      	lsls	r2, r3, #31
 800143a:	d506      	bpl.n	800144a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800143c:	2003      	movs	r0, #3
 800143e:	493a      	ldr	r1, [pc, #232]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001440:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001442:	4382      	bics	r2, r0
 8001444:	68e8      	ldr	r0, [r5, #12]
 8001446:	4302      	orrs	r2, r0
 8001448:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800144a:	079a      	lsls	r2, r3, #30
 800144c:	d506      	bpl.n	800145c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800144e:	200c      	movs	r0, #12
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001452:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001454:	4382      	bics	r2, r0
 8001456:	6928      	ldr	r0, [r5, #16]
 8001458:	4302      	orrs	r2, r0
 800145a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	d506      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001460:	4931      	ldr	r1, [pc, #196]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001462:	4835      	ldr	r0, [pc, #212]	; (8001538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001464:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001466:	4002      	ands	r2, r0
 8001468:	6968      	ldr	r0, [r5, #20]
 800146a:	4302      	orrs	r2, r0
 800146c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800146e:	071a      	lsls	r2, r3, #28
 8001470:	d506      	bpl.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001472:	492d      	ldr	r1, [pc, #180]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001474:	4831      	ldr	r0, [pc, #196]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001476:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001478:	4002      	ands	r2, r0
 800147a:	69a8      	ldr	r0, [r5, #24]
 800147c:	4302      	orrs	r2, r0
 800147e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001480:	065a      	lsls	r2, r3, #25
 8001482:	d506      	bpl.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001484:	4928      	ldr	r1, [pc, #160]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001486:	482e      	ldr	r0, [pc, #184]	; (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001488:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800148a:	4002      	ands	r2, r0
 800148c:	6a28      	ldr	r0, [r5, #32]
 800148e:	4302      	orrs	r2, r0
 8001490:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001492:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	d517      	bpl.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001498:	4a23      	ldr	r2, [pc, #140]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800149a:	492a      	ldr	r1, [pc, #168]	; (8001544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800149c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800149e:	400b      	ands	r3, r1
 80014a0:	69e9      	ldr	r1, [r5, #28]
 80014a2:	430b      	orrs	r3, r1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	e00f      	b.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a8:	6833      	ldr	r3, [r6, #0]
 80014aa:	433b      	orrs	r3, r7
 80014ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014ae:	f7fe ffd5 	bl	800045c <HAL_GetTick>
 80014b2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	6833      	ldr	r3, [r6, #0]
 80014b6:	423b      	tst	r3, r7
 80014b8:	d188      	bne.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7fe ffcf 	bl	800045c <HAL_GetTick>
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	1ac0      	subs	r0, r0, r3
 80014c2:	2864      	cmp	r0, #100	; 0x64
 80014c4:	d9f6      	bls.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 80014c6:	2003      	movs	r0, #3
}
 80014c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80014ca:	4011      	ands	r1, r2
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d002      	beq.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014d0:	6829      	ldr	r1, [r5, #0]
 80014d2:	0689      	lsls	r1, r1, #26
 80014d4:	d408      	bmi.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80014d6:	68a9      	ldr	r1, [r5, #8]
 80014d8:	400a      	ands	r2, r1
 80014da:	4293      	cmp	r3, r2
 80014dc:	d100      	bne.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80014de:	e791      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	051b      	lsls	r3, r3, #20
 80014e4:	d400      	bmi.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80014e6:	e78d      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 80014e8:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80014ea:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80014ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80014ee:	0312      	lsls	r2, r2, #12
 80014f0:	4302      	orrs	r2, r0
 80014f2:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014f8:	4814      	ldr	r0, [pc, #80]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80014fa:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014fc:	4002      	ands	r2, r0
 80014fe:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001500:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001502:	05cb      	lsls	r3, r1, #23
 8001504:	d400      	bmi.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001506:	e77d      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8001508:	f7fe ffa8 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800150c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800150e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001510:	00bf      	lsls	r7, r7, #2
 8001512:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001514:	423b      	tst	r3, r7
 8001516:	d000      	beq.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001518:	e774      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7fe ff9f 	bl	800045c <HAL_GetTick>
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001520:	1b80      	subs	r0, r0, r6
 8001522:	4298      	cmp	r0, r3
 8001524:	d9f5      	bls.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001526:	e7ce      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001528:	40021000 	.word	0x40021000
 800152c:	40007000 	.word	0x40007000
 8001530:	ffcfffff 	.word	0xffcfffff
 8001534:	efffffff 	.word	0xefffffff
 8001538:	fffff3ff 	.word	0xfffff3ff
 800153c:	ffffcfff 	.word	0xffffcfff
 8001540:	fbffffff 	.word	0xfbffffff
 8001544:	fff3ffff 	.word	0xfff3ffff
 8001548:	fffcffff 	.word	0xfffcffff
 800154c:	fff7ffff 	.word	0xfff7ffff
 8001550:	00001388 	.word	0x00001388

08001554 <HR_APP_MODE>:
uint8_t  alg_status = 0;



void HR_APP_MODE()
{
 8001554:	b570      	push	{r4, r5, r6, lr}
	  //HAL_Delay(10);
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET); //set MFIO LOW
 8001556:	2680      	movs	r6, #128	; 0x80
 8001558:	4d12      	ldr	r5, [pc, #72]	; (80015a4 <HR_APP_MODE+0x50>)
 800155a:	0236      	lsls	r6, r6, #8
 800155c:	0031      	movs	r1, r6
 800155e:	0028      	movs	r0, r5
 8001560:	2200      	movs	r2, #0
	  HAL_Delay(10);
	  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_RESET); //set RSTN low for 10ms
 8001562:	4c11      	ldr	r4, [pc, #68]	; (80015a8 <HR_APP_MODE+0x54>)
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET); //set MFIO LOW
 8001564:	f7ff f8a4 	bl	80006b0 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001568:	200a      	movs	r0, #10
 800156a:	f7fe ff7d 	bl	8000468 <HAL_Delay>
	  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_RESET); //set RSTN low for 10ms
 800156e:	2200      	movs	r2, #0
 8001570:	2120      	movs	r1, #32
 8001572:	0020      	movs	r0, r4
 8001574:	f7ff f89c 	bl	80006b0 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 8001578:	2003      	movs	r0, #3
 800157a:	f7fe ff75 	bl	8000468 <HAL_Delay>
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_SET); //set MFIO high while RSTN is low
 800157e:	0031      	movs	r1, r6
 8001580:	0028      	movs	r0, r5
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff f894 	bl	80006b0 <HAL_GPIO_WritePin>
	  //GPIOB->BSRR = HR_MFIO_Pin;
	  HAL_Delay(5);
 8001588:	2005      	movs	r0, #5
 800158a:	f7fe ff6d 	bl	8000468 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, HR_RESET_Pin, GPIO_PIN_SET); //return RSTN to its high state
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	0020      	movs	r0, r4
 8001594:	f7ff f88c 	bl	80006b0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);	//wait 1 second (in app mode after 50ms) - will have to replace with timer later
 8001598:	20fa      	movs	r0, #250	; 0xfa
 800159a:	0080      	lsls	r0, r0, #2
 800159c:	f7fe ff64 	bl	8000468 <HAL_Delay>

	  //GPIOB->MODER &= ~(GPIO_MODER_MODE4); //Set MFIO to be input so it can act as an interrupt
}
 80015a0:	bd70      	pop	{r4, r5, r6, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	50000800 	.word	0x50000800
 80015a8:	50000400 	.word	0x50000400

080015ac <HR_MFIO_SET>:




void HR_MFIO_SET()
{
 80015ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	2214      	movs	r2, #20
 80015b0:	2100      	movs	r1, #0
 80015b2:	a801      	add	r0, sp, #4
 80015b4:	f000 fb65 	bl	8001c82 <memset>
	  GPIO_InitStruct.Pin = HR_MFIO_Pin;
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	9301      	str	r3, [sp, #4]
	  //GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HR_MFIO_SET+0x38>)
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80015c0:	a901      	add	r1, sp, #4
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c2:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2302      	movs	r3, #2
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <HR_MFIO_SET+0x3c>)
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f7fe ffbb 	bl	8000544 <HAL_GPIO_Init>

	  //enable the interrupt
	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2007      	movs	r0, #7
 80015d2:	0011      	movs	r1, r2
 80015d4:	f7fe ff58 	bl	8000488 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80015d8:	2007      	movs	r0, #7
 80015da:	f7fe ff85 	bl	80004e8 <HAL_NVIC_EnableIRQ>

}
 80015de:	b007      	add	sp, #28
 80015e0:	bd00      	pop	{pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	10210000 	.word	0x10210000
 80015e8:	50000800 	.word	0x50000800

080015ec <HR_INIT>:




uint8_t HR_INIT()
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	//1.1 - configure default spo2 alg values
	//uint8_t arr_1_1[15] = {0x50, 0x02, 0x0B, 0x00, 0x02, 0x6F, 0x60, 0xFF, 0xCB, 0x1D, 0x12, 0x00, 0xAB, 0xF3, 0x7B};
	uint16_t writeAddr = 0xAA;
	uint16_t readAddr = 0xAB;
	//HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_1_1, sizeof(arr_1_1), 1000);
	uint8_t receive_buff = -1;
 80015ee:	250b      	movs	r5, #11
 80015f0:	23ff      	movs	r3, #255	; 0xff
	//	return 1;
	//}


	//1.2 - set output mode to sensor
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x03};
 80015f2:	4e93      	ldr	r6, [pc, #588]	; (8001840 <HR_INIT+0x254>)
{
 80015f4:	b089      	sub	sp, #36	; 0x24
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x03};
 80015f6:	2203      	movs	r2, #3
 80015f8:	0031      	movs	r1, r6
	uint8_t receive_buff = -1;
 80015fa:	446d      	add	r5, sp
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x03};
 80015fc:	a803      	add	r0, sp, #12
	uint8_t receive_buff = -1;
 80015fe:	702b      	strb	r3, [r5, #0]
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x03};
 8001600:	f000 fb36 	bl	8001c70 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_1_2, sizeof(arr_1_2), 1000);
 8001604:	23fa      	movs	r3, #250	; 0xfa
 8001606:	4c8f      	ldr	r4, [pc, #572]	; (8001844 <HR_INIT+0x258>)
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	aa03      	add	r2, sp, #12
 800160e:	2303      	movs	r3, #3
 8001610:	21aa      	movs	r1, #170	; 0xaa
 8001612:	0020      	movs	r0, r4
 8001614:	f7ff f9d0 	bl	80009b8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001618:	0022      	movs	r2, r4
 800161a:	3241      	adds	r2, #65	; 0x41
 800161c:	7813      	ldrb	r3, [r2, #0]
 800161e:	2b20      	cmp	r3, #32
 8001620:	d1fc      	bne.n	800161c <HR_INIT+0x30>
	receive_buff = -3;
 8001622:	33dd      	adds	r3, #221	; 0xdd
 8001624:	702b      	strb	r3, [r5, #0]
	//HAL_Delay(20);
	HAL_I2C_Master_Receive(&hi2c1, readAddr, &receive_buff, sizeof(receive_buff), 1000);
 8001626:	23fa      	movs	r3, #250	; 0xfa
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	002a      	movs	r2, r5
 800162e:	2301      	movs	r3, #1
 8001630:	21ab      	movs	r1, #171	; 0xab
 8001632:	0020      	movs	r0, r4
 8001634:	f7ff fa56 	bl	8000ae4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001638:	0022      	movs	r2, r4
 800163a:	3241      	adds	r2, #65	; 0x41
 800163c:	7813      	ldrb	r3, [r2, #0]
 800163e:	2b20      	cmp	r3, #32
 8001640:	d1fc      	bne.n	800163c <HR_INIT+0x50>
	while(receive_buff == 0xFE)
	{
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001642:	27fa      	movs	r7, #250	; 0xfa
 8001644:	00bf      	lsls	r7, r7, #2
	while(receive_buff == 0xFE)
 8001646:	782b      	ldrb	r3, [r5, #0]
 8001648:	2bfe      	cmp	r3, #254	; 0xfe
 800164a:	d004      	beq.n	8001656 <HR_INIT+0x6a>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}
	if(receive_buff != 0x00)
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00f      	beq.n	8001670 <HR_INIT+0x84>
	{
		return 1;
 8001650:	2001      	movs	r0, #1
		return 1;
	}


	return 0;
}
 8001652:	b009      	add	sp, #36	; 0x24
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001656:	002a      	movs	r2, r5
 8001658:	9700      	str	r7, [sp, #0]
 800165a:	2301      	movs	r3, #1
 800165c:	21ab      	movs	r1, #171	; 0xab
 800165e:	0020      	movs	r0, r4
 8001660:	f7ff fa40 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001664:	0022      	movs	r2, r4
 8001666:	3241      	adds	r2, #65	; 0x41
 8001668:	7813      	ldrb	r3, [r2, #0]
 800166a:	2b20      	cmp	r3, #32
 800166c:	d1fc      	bne.n	8001668 <HR_INIT+0x7c>
 800166e:	e7ea      	b.n	8001646 <HR_INIT+0x5a>
	uint8_t arr_1_3[3] = {0x10, 0x01, 0x0F};
 8001670:	1cf1      	adds	r1, r6, #3
 8001672:	2203      	movs	r2, #3
 8001674:	a804      	add	r0, sp, #16
 8001676:	f000 fafb 	bl	8001c70 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, 0xAA, arr_1_3, sizeof(arr_1_3), 1000);
 800167a:	23fa      	movs	r3, #250	; 0xfa
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	aa04      	add	r2, sp, #16
 8001682:	2303      	movs	r3, #3
 8001684:	21aa      	movs	r1, #170	; 0xaa
 8001686:	0020      	movs	r0, r4
 8001688:	f7ff f996 	bl	80009b8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 800168c:	0022      	movs	r2, r4
 800168e:	3241      	adds	r2, #65	; 0x41
 8001690:	7813      	ldrb	r3, [r2, #0]
 8001692:	2b20      	cmp	r3, #32
 8001694:	d1fc      	bne.n	8001690 <HR_INIT+0xa4>
	receive_buff = -1;
 8001696:	33df      	adds	r3, #223	; 0xdf
 8001698:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 800169a:	23fa      	movs	r3, #250	; 0xfa
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	002a      	movs	r2, r5
 80016a2:	2301      	movs	r3, #1
 80016a4:	21ab      	movs	r1, #171	; 0xab
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7ff fa1c 	bl	8000ae4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80016ac:	0022      	movs	r2, r4
 80016ae:	3241      	adds	r2, #65	; 0x41
 80016b0:	7813      	ldrb	r3, [r2, #0]
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d1fc      	bne.n	80016b0 <HR_INIT+0xc4>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80016b6:	27fa      	movs	r7, #250	; 0xfa
 80016b8:	00bf      	lsls	r7, r7, #2
	while(receive_buff == 0xFE)
 80016ba:	782b      	ldrb	r3, [r5, #0]
 80016bc:	2bfe      	cmp	r3, #254	; 0xfe
 80016be:	d100      	bne.n	80016c2 <HR_INIT+0xd6>
 80016c0:	e08a      	b.n	80017d8 <HR_INIT+0x1ec>
	if(receive_buff != 0x00)
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1c4      	bne.n	8001650 <HR_INIT+0x64>
	uint8_t arr_1_4[3] = {0x52, 0x00, 0x01};
 80016c6:	1db1      	adds	r1, r6, #6
 80016c8:	2203      	movs	r2, #3
 80016ca:	a805      	add	r0, sp, #20
 80016cc:	f000 fad0 	bl	8001c70 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, 0xAA, arr_1_4, sizeof(arr_1_4), 1000);
 80016d0:	23fa      	movs	r3, #250	; 0xfa
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	aa05      	add	r2, sp, #20
 80016d8:	2303      	movs	r3, #3
 80016da:	21aa      	movs	r1, #170	; 0xaa
 80016dc:	0020      	movs	r0, r4
 80016de:	f7ff f96b 	bl	80009b8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80016e2:	0022      	movs	r2, r4
 80016e4:	3241      	adds	r2, #65	; 0x41
 80016e6:	7813      	ldrb	r3, [r2, #0]
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	d1fc      	bne.n	80016e6 <HR_INIT+0xfa>
	receive_buff = -1;
 80016ec:	33df      	adds	r3, #223	; 0xdf
 80016ee:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80016f0:	23fa      	movs	r3, #250	; 0xfa
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	002a      	movs	r2, r5
 80016f8:	2301      	movs	r3, #1
 80016fa:	21ab      	movs	r1, #171	; 0xab
 80016fc:	0020      	movs	r0, r4
 80016fe:	f7ff f9f1 	bl	8000ae4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001702:	0022      	movs	r2, r4
 8001704:	3241      	adds	r2, #65	; 0x41
 8001706:	7813      	ldrb	r3, [r2, #0]
 8001708:	2b20      	cmp	r3, #32
 800170a:	d1fc      	bne.n	8001706 <HR_INIT+0x11a>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 800170c:	27fa      	movs	r7, #250	; 0xfa
 800170e:	00bf      	lsls	r7, r7, #2
	while(receive_buff == 0xFE)
 8001710:	782b      	ldrb	r3, [r5, #0]
 8001712:	2bfe      	cmp	r3, #254	; 0xfe
 8001714:	d06d      	beq.n	80017f2 <HR_INIT+0x206>
	if(receive_buff != 0x00)
 8001716:	2b00      	cmp	r3, #0
 8001718:	d19a      	bne.n	8001650 <HR_INIT+0x64>
	uint8_t arr_1_6[3] = {0x44, 0x03, 0x01};
 800171a:	0031      	movs	r1, r6
 800171c:	2203      	movs	r2, #3
 800171e:	3109      	adds	r1, #9
 8001720:	a806      	add	r0, sp, #24
 8001722:	f000 faa5 	bl	8001c70 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, 0xAA, arr_1_6, sizeof(arr_1_6), 1000);
 8001726:	23fa      	movs	r3, #250	; 0xfa
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	aa06      	add	r2, sp, #24
 800172e:	2303      	movs	r3, #3
 8001730:	21aa      	movs	r1, #170	; 0xaa
 8001732:	0020      	movs	r0, r4
 8001734:	f7ff f940 	bl	80009b8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001738:	0022      	movs	r2, r4
 800173a:	3241      	adds	r2, #65	; 0x41
 800173c:	7813      	ldrb	r3, [r2, #0]
 800173e:	2b20      	cmp	r3, #32
 8001740:	d1fc      	bne.n	800173c <HR_INIT+0x150>
	receive_buff = -1;
 8001742:	33df      	adds	r3, #223	; 0xdf
 8001744:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001746:	23fa      	movs	r3, #250	; 0xfa
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	002a      	movs	r2, r5
 800174e:	2301      	movs	r3, #1
 8001750:	21ab      	movs	r1, #171	; 0xab
 8001752:	0020      	movs	r0, r4
 8001754:	f7ff f9c6 	bl	8000ae4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001758:	0022      	movs	r2, r4
 800175a:	3241      	adds	r2, #65	; 0x41
 800175c:	7813      	ldrb	r3, [r2, #0]
 800175e:	2b20      	cmp	r3, #32
 8001760:	d1fc      	bne.n	800175c <HR_INIT+0x170>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001762:	27fa      	movs	r7, #250	; 0xfa
 8001764:	00bf      	lsls	r7, r7, #2
	while(receive_buff == 0xFE)
 8001766:	782b      	ldrb	r3, [r5, #0]
 8001768:	2bfe      	cmp	r3, #254	; 0xfe
 800176a:	d04f      	beq.n	800180c <HR_INIT+0x220>
	if(receive_buff != 0x00)
 800176c:	2b00      	cmp	r3, #0
 800176e:	d000      	beq.n	8001772 <HR_INIT+0x186>
 8001770:	e76e      	b.n	8001650 <HR_INIT+0x64>
	uint8_t arr_1_7[3] = {0x52, 0x02, 0x01};
 8001772:	0031      	movs	r1, r6
 8001774:	2203      	movs	r2, #3
 8001776:	310c      	adds	r1, #12
 8001778:	a807      	add	r0, sp, #28
 800177a:	f000 fa79 	bl	8001c70 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, 0xAA, arr_1_7, sizeof(arr_1_7), 1000);
 800177e:	23fa      	movs	r3, #250	; 0xfa
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	aa07      	add	r2, sp, #28
 8001786:	2303      	movs	r3, #3
 8001788:	21aa      	movs	r1, #170	; 0xaa
 800178a:	0020      	movs	r0, r4
 800178c:	f7ff f914 	bl	80009b8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001790:	0022      	movs	r2, r4
 8001792:	3241      	adds	r2, #65	; 0x41
 8001794:	7813      	ldrb	r3, [r2, #0]
 8001796:	2b20      	cmp	r3, #32
 8001798:	d1fc      	bne.n	8001794 <HR_INIT+0x1a8>
	receive_buff = -1;
 800179a:	33df      	adds	r3, #223	; 0xdf
	HAL_Delay(50);
 800179c:	2032      	movs	r0, #50	; 0x32
	receive_buff = -1;
 800179e:	702b      	strb	r3, [r5, #0]
	HAL_Delay(50);
 80017a0:	f7fe fe62 	bl	8000468 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80017a4:	23fa      	movs	r3, #250	; 0xfa
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	002a      	movs	r2, r5
 80017ac:	0020      	movs	r0, r4
 80017ae:	2301      	movs	r3, #1
 80017b0:	21ab      	movs	r1, #171	; 0xab
 80017b2:	f7ff f997 	bl	8000ae4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80017b6:	4c23      	ldr	r4, [pc, #140]	; (8001844 <HR_INIT+0x258>)
 80017b8:	0022      	movs	r2, r4
 80017ba:	3241      	adds	r2, #65	; 0x41
 80017bc:	7813      	ldrb	r3, [r2, #0]
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d1fc      	bne.n	80017bc <HR_INIT+0x1d0>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80017c2:	25fa      	movs	r5, #250	; 0xfa
 80017c4:	00ad      	lsls	r5, r5, #2
	while(receive_buff == 0xFE)
 80017c6:	220b      	movs	r2, #11
 80017c8:	446a      	add	r2, sp
 80017ca:	7810      	ldrb	r0, [r2, #0]
 80017cc:	28fe      	cmp	r0, #254	; 0xfe
 80017ce:	d02a      	beq.n	8001826 <HR_INIT+0x23a>
	if(receive_buff != 0x00)
 80017d0:	1e43      	subs	r3, r0, #1
 80017d2:	4198      	sbcs	r0, r3
		return 1;
 80017d4:	b2c0      	uxtb	r0, r0
 80017d6:	e73c      	b.n	8001652 <HR_INIT+0x66>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80017d8:	002a      	movs	r2, r5
 80017da:	9700      	str	r7, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	21ab      	movs	r1, #171	; 0xab
 80017e0:	0020      	movs	r0, r4
 80017e2:	f7ff f97f 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80017e6:	0022      	movs	r2, r4
 80017e8:	3241      	adds	r2, #65	; 0x41
 80017ea:	7813      	ldrb	r3, [r2, #0]
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d1fc      	bne.n	80017ea <HR_INIT+0x1fe>
 80017f0:	e763      	b.n	80016ba <HR_INIT+0xce>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80017f2:	002a      	movs	r2, r5
 80017f4:	9700      	str	r7, [sp, #0]
 80017f6:	2301      	movs	r3, #1
 80017f8:	21ab      	movs	r1, #171	; 0xab
 80017fa:	0020      	movs	r0, r4
 80017fc:	f7ff f972 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001800:	0022      	movs	r2, r4
 8001802:	3241      	adds	r2, #65	; 0x41
 8001804:	7813      	ldrb	r3, [r2, #0]
 8001806:	2b20      	cmp	r3, #32
 8001808:	d1fc      	bne.n	8001804 <HR_INIT+0x218>
 800180a:	e781      	b.n	8001710 <HR_INIT+0x124>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 800180c:	002a      	movs	r2, r5
 800180e:	9700      	str	r7, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	21ab      	movs	r1, #171	; 0xab
 8001814:	0020      	movs	r0, r4
 8001816:	f7ff f965 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 800181a:	0022      	movs	r2, r4
 800181c:	3241      	adds	r2, #65	; 0x41
 800181e:	7813      	ldrb	r3, [r2, #0]
 8001820:	2b20      	cmp	r3, #32
 8001822:	d1fc      	bne.n	800181e <HR_INIT+0x232>
 8001824:	e79f      	b.n	8001766 <HR_INIT+0x17a>
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	21ab      	movs	r1, #171	; 0xab
 800182c:	0020      	movs	r0, r4
 800182e:	f7ff f959 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001832:	0022      	movs	r2, r4
 8001834:	3241      	adds	r2, #65	; 0x41
 8001836:	7813      	ldrb	r3, [r2, #0]
 8001838:	2b20      	cmp	r3, #32
 800183a:	d1fc      	bne.n	8001836 <HR_INIT+0x24a>
 800183c:	e7c3      	b.n	80017c6 <HR_INIT+0x1da>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	08001cac 	.word	0x08001cac
 8001844:	2000002c 	.word	0x2000002c

08001848 <HR_READ>:




uint8_t HR_READ(uint8_t * receive_data)
{
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}

	//2.1 - Data finished when bit3 of AA0000 is full (DATARDYINT)
	uint8_t arr_2_1[2] = {0x00, 0x00};
	uint16_t writeAddr = 0xAA;
	uint16_t readAddr = 0xAB;
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_1, sizeof(arr_2_1), 1000);
 800184a:	26fa      	movs	r6, #250	; 0xfa
	uint8_t arr_2_1[2] = {0x00, 0x00};
 800184c:	2300      	movs	r3, #0
{
 800184e:	b087      	sub	sp, #28
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_1, sizeof(arr_2_1), 1000);
 8001850:	4c40      	ldr	r4, [pc, #256]	; (8001954 <HR_READ+0x10c>)
	uint8_t arr_2_1[2] = {0x00, 0x00};
 8001852:	aa02      	add	r2, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_1, sizeof(arr_2_1), 1000);
 8001854:	00b6      	lsls	r6, r6, #2
	uint8_t arr_2_1[2] = {0x00, 0x00};
 8001856:	7013      	strb	r3, [r2, #0]
 8001858:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_1, sizeof(arr_2_1), 1000);
 800185a:	21aa      	movs	r1, #170	; 0xaa
 800185c:	3302      	adds	r3, #2
{
 800185e:	0005      	movs	r5, r0
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_1, sizeof(arr_2_1), 1000);
 8001860:	9600      	str	r6, [sp, #0]
 8001862:	0020      	movs	r0, r4
 8001864:	f7ff f8a8 	bl	80009b8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001868:	0021      	movs	r1, r4
 800186a:	0033      	movs	r3, r6
 800186c:	3141      	adds	r1, #65	; 0x41
 800186e:	780a      	ldrb	r2, [r1, #0]
 8001870:	2a20      	cmp	r2, #32
 8001872:	d1fc      	bne.n	800186e <HR_READ+0x26>
	uint8_t receive_hub[2];
	HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_hub, sizeof(receive_hub), 1000);
 8001874:	ae03      	add	r6, sp, #12
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0032      	movs	r2, r6
 800187a:	2302      	movs	r3, #2
 800187c:	21ab      	movs	r1, #171	; 0xab
 800187e:	0020      	movs	r0, r4
 8001880:	f7ff f930 	bl	8000ae4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001884:	0022      	movs	r2, r4
 8001886:	3241      	adds	r2, #65	; 0x41
 8001888:	7813      	ldrb	r3, [r2, #0]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d1fc      	bne.n	8001888 <HR_READ+0x40>
	if(receive_hub[0] != 0x00)   //failed read
 800188e:	7833      	ldrb	r3, [r6, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d15c      	bne.n	800194e <HR_READ+0x106>
		HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_hub, sizeof(receive_hub), 1000);
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}
*/

	if(receive_hub[1] == 0x08)
 8001894:	7872      	ldrb	r2, [r6, #1]
 8001896:	2a08      	cmp	r2, #8
 8001898:	d159      	bne.n	800194e <HR_READ+0x106>
	{
		//2.2 - get number of samples in FIFO
		uint8_t arr_2_2[2] = {0x12, 0x00};
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_2, sizeof(arr_2_2), 1000);
 800189a:	27fa      	movs	r7, #250	; 0xfa
		uint8_t arr_2_2[2] = {0x12, 0x00};
 800189c:	2112      	movs	r1, #18
 800189e:	aa04      	add	r2, sp, #16
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_2, sizeof(arr_2_2), 1000);
 80018a0:	00bf      	lsls	r7, r7, #2
		uint8_t arr_2_2[2] = {0x12, 0x00};
 80018a2:	7011      	strb	r1, [r2, #0]
 80018a4:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_2, sizeof(arr_2_2), 1000);
 80018a6:	3198      	adds	r1, #152	; 0x98
 80018a8:	9700      	str	r7, [sp, #0]
 80018aa:	3302      	adds	r3, #2
 80018ac:	0020      	movs	r0, r4
 80018ae:	f7ff f883 	bl	80009b8 <HAL_I2C_Master_Transmit>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80018b2:	0022      	movs	r2, r4
 80018b4:	3241      	adds	r2, #65	; 0x41
 80018b6:	7813      	ldrb	r3, [r2, #0]
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	d1fc      	bne.n	80018b6 <HR_READ+0x6e>
		HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_hub, sizeof(receive_hub), 1000);
 80018bc:	0032      	movs	r2, r6
 80018be:	9700      	str	r7, [sp, #0]
 80018c0:	3b1e      	subs	r3, #30
 80018c2:	21ab      	movs	r1, #171	; 0xab
 80018c4:	0020      	movs	r0, r4
 80018c6:	f7ff f90d 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80018ca:	0022      	movs	r2, r4
 80018cc:	3241      	adds	r2, #65	; 0x41
 80018ce:	7813      	ldrb	r3, [r2, #0]
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d1fc      	bne.n	80018ce <HR_READ+0x86>
		if(receive_hub[0] != 0x00)	//failed read
 80018d4:	7833      	ldrb	r3, [r6, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d139      	bne.n	800194e <HR_READ+0x106>
			return 1;
		}

		//2.3 - read all samples from FIFO
		uint8_t arr_2_3[2] = {0x12, 0x01};
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_3, sizeof(arr_2_3), 1000);
 80018da:	26fa      	movs	r6, #250	; 0xfa
		uint8_t arr_2_3[2] = {0x12, 0x01};
 80018dc:	491e      	ldr	r1, [pc, #120]	; (8001958 <HR_READ+0x110>)
 80018de:	2202      	movs	r2, #2
 80018e0:	310f      	adds	r1, #15
 80018e2:	a805      	add	r0, sp, #20
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_3, sizeof(arr_2_3), 1000);
 80018e4:	00b6      	lsls	r6, r6, #2
		uint8_t arr_2_3[2] = {0x12, 0x01};
 80018e6:	f000 f9c3 	bl	8001c70 <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr_2_3, sizeof(arr_2_3), 1000);
 80018ea:	aa05      	add	r2, sp, #20
 80018ec:	9600      	str	r6, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	21aa      	movs	r1, #170	; 0xaa
 80018f2:	0020      	movs	r0, r4
 80018f4:	f7ff f860 	bl	80009b8 <HAL_I2C_Master_Transmit>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80018f8:	0022      	movs	r2, r4
 80018fa:	3241      	adds	r2, #65	; 0x41
 80018fc:	7813      	ldrb	r3, [r2, #0]
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d1fc      	bne.n	80018fc <HR_READ+0xb4>
		HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_data, 22, 1000);
 8001902:	0020      	movs	r0, r4
 8001904:	9600      	str	r6, [sp, #0]
 8001906:	3b0a      	subs	r3, #10
 8001908:	002a      	movs	r2, r5
 800190a:	21ab      	movs	r1, #171	; 0xab
 800190c:	f7ff f8ea 	bl	8000ae4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001910:	3441      	adds	r4, #65	; 0x41
 8001912:	7823      	ldrb	r3, [r4, #0]
 8001914:	2b20      	cmp	r3, #32
 8001916:	d1fc      	bne.n	8001912 <HR_READ+0xca>
			return 0;
		}
*/


		heartrate  = ((((uint16_t) receive_data[13]) << 8) | (receive_data[14])) / 10;
 8001918:	7b68      	ldrb	r0, [r5, #13]
 800191a:	7bab      	ldrb	r3, [r5, #14]
 800191c:	0200      	lsls	r0, r0, #8
 800191e:	4318      	orrs	r0, r3
 8001920:	210a      	movs	r1, #10
 8001922:	f7fe fc7b 	bl	800021c <__divsi3>
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HR_READ+0x114>)
		HR_conf    =  receive_data[15];
 8001928:	7bea      	ldrb	r2, [r5, #15]
		heartrate  = ((((uint16_t) receive_data[13]) << 8) | (receive_data[14])) / 10;
 800192a:	8018      	strh	r0, [r3, #0]
		HR_conf    =  receive_data[15];
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HR_READ+0x118>)
		spo2  = ((((uint16_t) receive_data[16]) << 8) | (receive_data[17])) / 10;
 800192e:	7c28      	ldrb	r0, [r5, #16]
		HR_conf    =  receive_data[15];
 8001930:	701a      	strb	r2, [r3, #0]
		spo2  = ((((uint16_t) receive_data[16]) << 8) | (receive_data[17])) / 10;
 8001932:	7c6b      	ldrb	r3, [r5, #17]
 8001934:	0200      	lsls	r0, r0, #8
 8001936:	4318      	orrs	r0, r3
 8001938:	210a      	movs	r1, #10
 800193a:	f7fe fc6f 	bl	800021c <__divsi3>
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HR_READ+0x11c>)
		alg_state  =  receive_data[18];
 8001940:	7caa      	ldrb	r2, [r5, #18]
		spo2  = ((((uint16_t) receive_data[16]) << 8) | (receive_data[17])) / 10;
 8001942:	8018      	strh	r0, [r3, #0]
		alg_state  =  receive_data[18];
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HR_READ+0x120>)
 8001946:	701a      	strb	r2, [r3, #0]
		alg_status =  receive_data[19];
 8001948:	7cea      	ldrb	r2, [r5, #19]
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HR_READ+0x124>)
 800194c:	701a      	strb	r2, [r3, #0]

		return 1;
	}

	return 1;
}
 800194e:	2001      	movs	r0, #1
 8001950:	b007      	add	sp, #28
 8001952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001954:	2000002c 	.word	0x2000002c
 8001958:	08001cac 	.word	0x08001cac
 800195c:	20000024 	.word	0x20000024
 8001960:	20000020 	.word	0x20000020
 8001964:	20000026 	.word	0x20000026
 8001968:	20000021 	.word	0x20000021
 800196c:	20000022 	.word	0x20000022

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b510      	push	{r4, lr}
 8001972:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001974:	2238      	movs	r2, #56	; 0x38
 8001976:	2100      	movs	r1, #0
 8001978:	a80e      	add	r0, sp, #56	; 0x38
 800197a:	f000 f982 	bl	8001c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197e:	2214      	movs	r2, #20
 8001980:	2100      	movs	r1, #0
 8001982:	4668      	mov	r0, sp
 8001984:	f000 f97d 	bl	8001c82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	2224      	movs	r2, #36	; 0x24
 800198a:	2100      	movs	r1, #0
 800198c:	a805      	add	r0, sp, #20
 800198e:	f000 f978 	bl	8001c82 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001992:	4913      	ldr	r1, [pc, #76]	; (80019e0 <SystemClock_Config+0x70>)
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <SystemClock_Config+0x74>)
 8001996:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001998:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800199a:	401a      	ands	r2, r3
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019a4:	2310      	movs	r3, #16
 80019a6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a8:	3b0f      	subs	r3, #15
 80019aa:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80019ac:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019b4:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b6:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f7ff f9b2 	bl	8000d20 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019bc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019be:	0021      	movs	r1, r4
 80019c0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019c4:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ca:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019cc:	f7ff fc2c 	bl	8001228 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d0:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d4:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019d6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	f7ff fcde 	bl	8001398 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80019dc:	b01c      	add	sp, #112	; 0x70
 80019de:	bd10      	pop	{r4, pc}
 80019e0:	40007000 	.word	0x40007000
 80019e4:	ffffe7ff 	.word	0xffffe7ff

080019e8 <main>:
{
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	b088      	sub	sp, #32
  HAL_Init();
 80019ec:	f7fe fd1a 	bl	8000424 <HAL_Init>
  SystemClock_Config();
 80019f0:	f7ff ffbe 	bl	8001970 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	2214      	movs	r2, #20
 80019f6:	2100      	movs	r1, #0
 80019f8:	a803      	add	r0, sp, #12
 80019fa:	f000 f942 	bl	8001c82 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	2004      	movs	r0, #4
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <main+0xbc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8001a02:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : HR_MFIO_Pin */
  GPIO_InitStruct.Pin = HR_MFIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	4301      	orrs	r1, r0
 8001a0a:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	2102      	movs	r1, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8001a12:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	4002      	ands	r2, r0
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8001a1c:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <main+0xc0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	400b      	ands	r3, r1
 8001a28:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8001a2a:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8001a2e:	f7fe fe3f 	bl	80006b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2120      	movs	r1, #32
 8001a36:	481d      	ldr	r0, [pc, #116]	; (8001aac <main+0xc4>)
 8001a38:	f7fe fe3a 	bl	80006b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	a903      	add	r1, sp, #12
 8001a3e:	481a      	ldr	r0, [pc, #104]	; (8001aa8 <main+0xc0>)
  GPIO_InitStruct.Pin = HR_MFIO_Pin;
 8001a40:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f7fe fd7c 	bl	8000544 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_RESET_Pin */
  GPIO_InitStruct.Pin = HR_RESET_Pin;
 8001a4c:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HR_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	a903      	add	r1, sp, #12
 8001a50:	4816      	ldr	r0, [pc, #88]	; (8001aac <main+0xc4>)
  GPIO_InitStruct.Pin = HR_RESET_Pin;
 8001a52:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(HR_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f7fe fd73 	bl	8000544 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001a5e:	4c14      	ldr	r4, [pc, #80]	; (8001ab0 <main+0xc8>)
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <main+0xcc>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a62:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 8001a64:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001a66:	23e1      	movs	r3, #225	; 0xe1
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6c:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6e:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a72:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a74:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a76:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7a:	f7fe ff47 	bl	800090c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7e:	0029      	movs	r1, r5
 8001a80:	0020      	movs	r0, r4
 8001a82:	f7ff f8c7 	bl	8000c14 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a86:	0029      	movs	r1, r5
 8001a88:	0020      	movs	r0, r4
 8001a8a:	f7ff f8e9 	bl	8000c60 <HAL_I2CEx_ConfigDigitalFilter>
	HR_APP_MODE(); //call function to put module in application mode
 8001a8e:	f7ff fd61 	bl	8001554 <HR_APP_MODE>
	HR_MFIO_SET();
 8001a92:	f7ff fd8b 	bl	80015ac <HR_MFIO_SET>
	if(HR_INIT() == 1) //equals 1 means initialization failed - do something? make while loop that runs until it isnt 0?
 8001a96:	f7ff fda9 	bl	80015ec <HR_INIT>
 8001a9a:	42b0      	cmp	r0, r6
 8001a9c:	d100      	bne.n	8001aa0 <main+0xb8>
 		asm("NOP");
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	e7fe      	b.n	8001aa0 <main+0xb8>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	50000800 	.word	0x50000800
 8001aac:	50000400 	.word	0x50000400
 8001ab0:	2000002c 	.word	0x2000002c
 8001ab4:	40005400 	.word	0x40005400

08001ab8 <EXTI4_15_IRQHandler>:



void EXTI4_15_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 8001ab8:	2080      	movs	r0, #128	; 0x80
{
 8001aba:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 8001abc:	0200      	lsls	r0, r0, #8
 8001abe:	f7fe fdfd 	bl	80006bc <HAL_GPIO_EXTI_IRQHandler>
}
 8001ac2:	bd10      	pop	{r4, pc}

08001ac4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	0004      	movs	r4, r0
 8001ac8:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8001aca:	2007      	movs	r0, #7
 8001acc:	f7fe fd16 	bl	80004fc <HAL_NVIC_DisableIRQ>
	if(GPIO_Pin == HR_MFIO_Pin)
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d105      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x20>
	{
		//do stuff now that the interrupt was set
		uint8_t received_data[22];
		uint8_t err_flag_read;
		err_flag_read = HR_READ(received_data);
 8001ad8:	4668      	mov	r0, sp
 8001ada:	f7ff feb5 	bl	8001848 <HR_READ>

		if(err_flag_read == 1)
 8001ade:	2801      	cmp	r0, #1
 8001ae0:	d100      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x20>
		  {
			  asm("NOP");
 8001ae2:	46c0      	nop			; (mov r8, r8)
		  }
	}

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001ae4:	2007      	movs	r0, #7
 8001ae6:	f7fe fcff 	bl	80004e8 <HAL_NVIC_EnableIRQ>
}
 8001aea:	b006      	add	sp, #24
 8001aec:	bd10      	pop	{r4, pc}
	...

08001af0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af0:	2201      	movs	r2, #1
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_MspInit+0x18>)
 8001af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001afe:	0552      	lsls	r2, r2, #21
 8001b00:	430a      	orrs	r2, r1
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	4770      	bx	lr
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	0004      	movs	r4, r0
 8001b10:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	2214      	movs	r2, #20
 8001b14:	2100      	movs	r1, #0
 8001b16:	a801      	add	r0, sp, #4
 8001b18:	f000 f8b3 	bl	8001c82 <memset>
  if(hi2c->Instance==I2C1)
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_I2C_MspInit+0x50>)
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d119      	bne.n	8001b58 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	2102      	movs	r1, #2
 8001b26:	4c0e      	ldr	r4, [pc, #56]	; (8001b60 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b32:	400b      	ands	r3, r1
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b38:	23c0      	movs	r3, #192	; 0xc0
 8001b3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3c:	3bae      	subs	r3, #174	; 0xae
 8001b3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	3b0f      	subs	r3, #15
 8001b42:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b46:	3b02      	subs	r3, #2
 8001b48:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f7fe fcfb 	bl	8000544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b52:	039b      	lsls	r3, r3, #14
 8001b54:	4313      	orrs	r3, r2
 8001b56:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b58:	b006      	add	sp, #24
 8001b5a:	bd10      	pop	{r4, pc}
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	50000400 	.word	0x50000400

08001b68 <NMI_Handler>:
 8001b68:	4770      	bx	lr

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler>

08001b6c <SVC_Handler>:
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f7fe fc6b 	bl	800044c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bd10      	pop	{r4, pc}

08001b78 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <SystemInit+0x44>)
 8001b7c:	0052      	lsls	r2, r2, #1
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <SystemInit+0x48>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <SystemInit+0x4c>)
 8001b90:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b92:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001b94:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	438a      	bics	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <SystemInit+0x50>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	4909      	ldr	r1, [pc, #36]	; (8001bcc <SystemInit+0x54>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <SystemInit+0x58>)
 8001bb4:	0512      	lsls	r2, r2, #20
 8001bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb8:	4770      	bx	lr
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	88ff400c 	.word	0x88ff400c
 8001bc4:	fef6fff6 	.word	0xfef6fff6
 8001bc8:	fffbffff 	.word	0xfffbffff
 8001bcc:	ff02ffff 	.word	0xff02ffff
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr  r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopForever+0x12>)
  b  LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001bf4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf6:	3204      	adds	r2, #4

08001bf8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopForever+0x16>)
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bfe:	f7ff ffbb 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f000 f811 	bl	8001c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff feef 	bl	80019e8 <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
  ldr   r0, =_estack
 8001c0c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001c10:	08001ce8 	.word	0x08001ce8
  ldr  r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c18:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001c1c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001c20:	20000078 	.word	0x20000078

08001c24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_COMP_IRQHandler>
	...

08001c28 <__libc_init_array>:
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	2600      	movs	r6, #0
 8001c2c:	4d0c      	ldr	r5, [pc, #48]	; (8001c60 <__libc_init_array+0x38>)
 8001c2e:	4c0d      	ldr	r4, [pc, #52]	; (8001c64 <__libc_init_array+0x3c>)
 8001c30:	1b64      	subs	r4, r4, r5
 8001c32:	10a4      	asrs	r4, r4, #2
 8001c34:	42a6      	cmp	r6, r4
 8001c36:	d109      	bne.n	8001c4c <__libc_init_array+0x24>
 8001c38:	2600      	movs	r6, #0
 8001c3a:	f000 f82b 	bl	8001c94 <_init>
 8001c3e:	4d0a      	ldr	r5, [pc, #40]	; (8001c68 <__libc_init_array+0x40>)
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <__libc_init_array+0x44>)
 8001c42:	1b64      	subs	r4, r4, r5
 8001c44:	10a4      	asrs	r4, r4, #2
 8001c46:	42a6      	cmp	r6, r4
 8001c48:	d105      	bne.n	8001c56 <__libc_init_array+0x2e>
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
 8001c4c:	00b3      	lsls	r3, r6, #2
 8001c4e:	58eb      	ldr	r3, [r5, r3]
 8001c50:	4798      	blx	r3
 8001c52:	3601      	adds	r6, #1
 8001c54:	e7ee      	b.n	8001c34 <__libc_init_array+0xc>
 8001c56:	00b3      	lsls	r3, r6, #2
 8001c58:	58eb      	ldr	r3, [r5, r3]
 8001c5a:	4798      	blx	r3
 8001c5c:	3601      	adds	r6, #1
 8001c5e:	e7f2      	b.n	8001c46 <__libc_init_array+0x1e>
 8001c60:	08001ce0 	.word	0x08001ce0
 8001c64:	08001ce0 	.word	0x08001ce0
 8001c68:	08001ce0 	.word	0x08001ce0
 8001c6c:	08001ce4 	.word	0x08001ce4

08001c70 <memcpy>:
 8001c70:	2300      	movs	r3, #0
 8001c72:	b510      	push	{r4, lr}
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d100      	bne.n	8001c7a <memcpy+0xa>
 8001c78:	bd10      	pop	{r4, pc}
 8001c7a:	5ccc      	ldrb	r4, [r1, r3]
 8001c7c:	54c4      	strb	r4, [r0, r3]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	e7f8      	b.n	8001c74 <memcpy+0x4>

08001c82 <memset>:
 8001c82:	0003      	movs	r3, r0
 8001c84:	1882      	adds	r2, r0, r2
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d100      	bne.n	8001c8c <memset+0xa>
 8001c8a:	4770      	bx	lr
 8001c8c:	7019      	strb	r1, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	e7f9      	b.n	8001c86 <memset+0x4>
	...

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
