
HR_Development_CodeV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002698  08002698  00012698  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  2000000c  08002710  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000104  08002710  00020104  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000de1b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021dd  00000000  00000000  0002de4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000072d4  00000000  00000000  0003002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000978  00000000  00000000  00037300  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b08  00000000  00000000  00037c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005b00  00000000  00000000  00038780  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000030de  00000000  00000000  0003e280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004135e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bf0  00000000  00000000  000413dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002680 	.word	0x08002680

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002680 	.word	0x08002680

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f806 	bl	8000448 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__udivmoddi4>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	b5e0      	push	{r5, r6, r7, lr}
 8000454:	0004      	movs	r4, r0
 8000456:	b083      	sub	sp, #12
 8000458:	000d      	movs	r5, r1
 800045a:	4692      	mov	sl, r2
 800045c:	4699      	mov	r9, r3
 800045e:	428b      	cmp	r3, r1
 8000460:	d82f      	bhi.n	80004c2 <__udivmoddi4+0x7a>
 8000462:	d02c      	beq.n	80004be <__udivmoddi4+0x76>
 8000464:	4649      	mov	r1, r9
 8000466:	4650      	mov	r0, sl
 8000468:	f000 f8ae 	bl	80005c8 <__clzdi2>
 800046c:	0029      	movs	r1, r5
 800046e:	0006      	movs	r6, r0
 8000470:	0020      	movs	r0, r4
 8000472:	f000 f8a9 	bl	80005c8 <__clzdi2>
 8000476:	1a33      	subs	r3, r6, r0
 8000478:	4698      	mov	r8, r3
 800047a:	3b20      	subs	r3, #32
 800047c:	469b      	mov	fp, r3
 800047e:	d500      	bpl.n	8000482 <__udivmoddi4+0x3a>
 8000480:	e074      	b.n	800056c <__udivmoddi4+0x124>
 8000482:	4653      	mov	r3, sl
 8000484:	465a      	mov	r2, fp
 8000486:	4093      	lsls	r3, r2
 8000488:	001f      	movs	r7, r3
 800048a:	4653      	mov	r3, sl
 800048c:	4642      	mov	r2, r8
 800048e:	4093      	lsls	r3, r2
 8000490:	001e      	movs	r6, r3
 8000492:	42af      	cmp	r7, r5
 8000494:	d829      	bhi.n	80004ea <__udivmoddi4+0xa2>
 8000496:	d026      	beq.n	80004e6 <__udivmoddi4+0x9e>
 8000498:	465b      	mov	r3, fp
 800049a:	1ba4      	subs	r4, r4, r6
 800049c:	41bd      	sbcs	r5, r7
 800049e:	2b00      	cmp	r3, #0
 80004a0:	da00      	bge.n	80004a4 <__udivmoddi4+0x5c>
 80004a2:	e079      	b.n	8000598 <__udivmoddi4+0x150>
 80004a4:	2200      	movs	r2, #0
 80004a6:	2300      	movs	r3, #0
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2301      	movs	r3, #1
 80004ae:	465a      	mov	r2, fp
 80004b0:	4093      	lsls	r3, r2
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	2301      	movs	r3, #1
 80004b6:	4642      	mov	r2, r8
 80004b8:	4093      	lsls	r3, r2
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	e019      	b.n	80004f2 <__udivmoddi4+0xaa>
 80004be:	4282      	cmp	r2, r0
 80004c0:	d9d0      	bls.n	8000464 <__udivmoddi4+0x1c>
 80004c2:	2200      	movs	r2, #0
 80004c4:	2300      	movs	r3, #0
 80004c6:	9200      	str	r2, [sp, #0]
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <__udivmoddi4+0x8c>
 80004d0:	601c      	str	r4, [r3, #0]
 80004d2:	605d      	str	r5, [r3, #4]
 80004d4:	9800      	ldr	r0, [sp, #0]
 80004d6:	9901      	ldr	r1, [sp, #4]
 80004d8:	b003      	add	sp, #12
 80004da:	bc3c      	pop	{r2, r3, r4, r5}
 80004dc:	4690      	mov	r8, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	46a2      	mov	sl, r4
 80004e2:	46ab      	mov	fp, r5
 80004e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d9d6      	bls.n	8000498 <__udivmoddi4+0x50>
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	4643      	mov	r3, r8
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0e8      	beq.n	80004ca <__udivmoddi4+0x82>
 80004f8:	07fb      	lsls	r3, r7, #31
 80004fa:	0872      	lsrs	r2, r6, #1
 80004fc:	431a      	orrs	r2, r3
 80004fe:	4646      	mov	r6, r8
 8000500:	087b      	lsrs	r3, r7, #1
 8000502:	e00e      	b.n	8000522 <__udivmoddi4+0xda>
 8000504:	42ab      	cmp	r3, r5
 8000506:	d101      	bne.n	800050c <__udivmoddi4+0xc4>
 8000508:	42a2      	cmp	r2, r4
 800050a:	d80c      	bhi.n	8000526 <__udivmoddi4+0xde>
 800050c:	1aa4      	subs	r4, r4, r2
 800050e:	419d      	sbcs	r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	1924      	adds	r4, r4, r4
 8000514:	416d      	adcs	r5, r5
 8000516:	2100      	movs	r1, #0
 8000518:	3e01      	subs	r6, #1
 800051a:	1824      	adds	r4, r4, r0
 800051c:	414d      	adcs	r5, r1
 800051e:	2e00      	cmp	r6, #0
 8000520:	d006      	beq.n	8000530 <__udivmoddi4+0xe8>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d9ee      	bls.n	8000504 <__udivmoddi4+0xbc>
 8000526:	3e01      	subs	r6, #1
 8000528:	1924      	adds	r4, r4, r4
 800052a:	416d      	adcs	r5, r5
 800052c:	2e00      	cmp	r6, #0
 800052e:	d1f8      	bne.n	8000522 <__udivmoddi4+0xda>
 8000530:	465b      	mov	r3, fp
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	1900      	adds	r0, r0, r4
 8000538:	4169      	adcs	r1, r5
 800053a:	2b00      	cmp	r3, #0
 800053c:	db22      	blt.n	8000584 <__udivmoddi4+0x13c>
 800053e:	002b      	movs	r3, r5
 8000540:	465a      	mov	r2, fp
 8000542:	40d3      	lsrs	r3, r2
 8000544:	002a      	movs	r2, r5
 8000546:	4644      	mov	r4, r8
 8000548:	40e2      	lsrs	r2, r4
 800054a:	001c      	movs	r4, r3
 800054c:	465b      	mov	r3, fp
 800054e:	0015      	movs	r5, r2
 8000550:	2b00      	cmp	r3, #0
 8000552:	db2c      	blt.n	80005ae <__udivmoddi4+0x166>
 8000554:	0026      	movs	r6, r4
 8000556:	409e      	lsls	r6, r3
 8000558:	0033      	movs	r3, r6
 800055a:	0026      	movs	r6, r4
 800055c:	4647      	mov	r7, r8
 800055e:	40be      	lsls	r6, r7
 8000560:	0032      	movs	r2, r6
 8000562:	1a80      	subs	r0, r0, r2
 8000564:	4199      	sbcs	r1, r3
 8000566:	9000      	str	r0, [sp, #0]
 8000568:	9101      	str	r1, [sp, #4]
 800056a:	e7ae      	b.n	80004ca <__udivmoddi4+0x82>
 800056c:	4642      	mov	r2, r8
 800056e:	2320      	movs	r3, #32
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	4652      	mov	r2, sl
 8000574:	40da      	lsrs	r2, r3
 8000576:	4641      	mov	r1, r8
 8000578:	0013      	movs	r3, r2
 800057a:	464a      	mov	r2, r9
 800057c:	408a      	lsls	r2, r1
 800057e:	0017      	movs	r7, r2
 8000580:	431f      	orrs	r7, r3
 8000582:	e782      	b.n	800048a <__udivmoddi4+0x42>
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	002a      	movs	r2, r5
 800058c:	4646      	mov	r6, r8
 800058e:	409a      	lsls	r2, r3
 8000590:	0023      	movs	r3, r4
 8000592:	40f3      	lsrs	r3, r6
 8000594:	4313      	orrs	r3, r2
 8000596:	e7d5      	b.n	8000544 <__udivmoddi4+0xfc>
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	2100      	movs	r1, #0
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	9100      	str	r1, [sp, #0]
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	e782      	b.n	80004b4 <__udivmoddi4+0x6c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	2320      	movs	r3, #32
 80005b2:	0026      	movs	r6, r4
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	40de      	lsrs	r6, r3
 80005b8:	002f      	movs	r7, r5
 80005ba:	46b4      	mov	ip, r6
 80005bc:	4097      	lsls	r7, r2
 80005be:	4666      	mov	r6, ip
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7c9      	b.n	800055a <__udivmoddi4+0x112>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800061c:	21fa      	movs	r1, #250	; 0xfa
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_InitTick+0x2c>)
{
 8000620:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000622:	0089      	lsls	r1, r1, #2
{
 8000624:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	f7ff fd78 	bl	800011c <__udivsi3>
 800062c:	f000 f884 	bl	8000738 <HAL_SYSTICK_Config>
 8000630:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000632:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000634:	2c00      	cmp	r4, #0
 8000636:	d105      	bne.n	8000644 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000638:	3802      	subs	r0, #2
 800063a:	0022      	movs	r2, r4
 800063c:	0029      	movs	r1, r5
 800063e:	f000 f837 	bl	80006b0 <HAL_NVIC_SetPriority>
 8000642:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000644:	bd70      	pop	{r4, r5, r6, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000008 	.word	0x20000008

0800064c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800064c:	2340      	movs	r3, #64	; 0x40
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <HAL_Init+0x24>)
{
 8000650:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000652:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000654:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000656:	430b      	orrs	r3, r1
 8000658:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065a:	f7ff ffdf 	bl	800061c <HAL_InitTick>
 800065e:	1e04      	subs	r4, r0, #0
 8000660:	d103      	bne.n	800066a <HAL_Init+0x1e>
    HAL_MspInit();
 8000662:	f001 fef7 	bl	8002454 <HAL_MspInit>
}
 8000666:	0020      	movs	r0, r4
 8000668:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800066a:	2401      	movs	r4, #1
 800066c:	e7fb      	b.n	8000666 <HAL_Init+0x1a>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000674:	4a02      	ldr	r2, [pc, #8]	; (8000680 <HAL_IncTick+0xc>)
 8000676:	6813      	ldr	r3, [r2, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000034 	.word	0x20000034

08000684 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <HAL_GetTick+0x8>)
 8000686:	6818      	ldr	r0, [r3, #0]
}
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000034 	.word	0x20000034

08000690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000694:	f7ff fff6 	bl	8000684 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000698:	1c63      	adds	r3, r4, #1
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 800069e:	0005      	movs	r5, r0
    wait++;
 80006a0:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006a2:	f7ff ffef 	bl	8000684 <HAL_GetTick>
 80006a6:	1b40      	subs	r0, r0, r5
 80006a8:	4284      	cmp	r4, r0
 80006aa:	d8fa      	bhi.n	80006a2 <HAL_Delay+0x12>
  {
  }
}
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080006b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80006b4:	2800      	cmp	r0, #0
 80006b6:	da14      	bge.n	80006e2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b8:	230f      	movs	r3, #15
 80006ba:	b2c0      	uxtb	r0, r0
 80006bc:	4003      	ands	r3, r0
 80006be:	3b08      	subs	r3, #8
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <HAL_NVIC_SetPriority+0x58>)
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	189b      	adds	r3, r3, r2
 80006c8:	2203      	movs	r2, #3
 80006ca:	4010      	ands	r0, r2
 80006cc:	4090      	lsls	r0, r2
 80006ce:	32fc      	adds	r2, #252	; 0xfc
 80006d0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006d2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006d6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d8:	69dc      	ldr	r4, [r3, #28]
 80006da:	43ac      	bics	r4, r5
 80006dc:	4321      	orrs	r1, r4
 80006de:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e2:	2503      	movs	r5, #3
 80006e4:	0883      	lsrs	r3, r0, #2
 80006e6:	4028      	ands	r0, r5
 80006e8:	40a8      	lsls	r0, r5
 80006ea:	35fc      	adds	r5, #252	; 0xfc
 80006ec:	002e      	movs	r6, r5
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_NVIC_SetPriority+0x5c>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	189b      	adds	r3, r3, r2
 80006f4:	22c0      	movs	r2, #192	; 0xc0
 80006f6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f8:	4029      	ands	r1, r5
 80006fa:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	589c      	ldr	r4, [r3, r2]
 8000700:	43b4      	bics	r4, r6
 8000702:	4321      	orrs	r1, r4
 8000704:	5099      	str	r1, [r3, r2]
 8000706:	e7eb      	b.n	80006e0 <HAL_NVIC_SetPriority+0x30>
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000710:	231f      	movs	r3, #31
 8000712:	4018      	ands	r0, r3
 8000714:	3b1e      	subs	r3, #30
 8000716:	4083      	lsls	r3, r0
 8000718:	4a01      	ldr	r2, [pc, #4]	; (8000720 <HAL_NVIC_EnableIRQ+0x10>)
 800071a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800071c:	4770      	bx	lr
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	e000e100 	.word	0xe000e100

08000724 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000724:	231f      	movs	r3, #31
 8000726:	4018      	ands	r0, r3
 8000728:	3b1e      	subs	r3, #30
 800072a:	4083      	lsls	r3, r0
 800072c:	4a01      	ldr	r2, [pc, #4]	; (8000734 <HAL_NVIC_DisableIRQ+0x10>)
 800072e:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000730:	4770      	bx	lr
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	e000e104 	.word	0xe000e104

08000738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <HAL_SYSTICK_Config+0x28>)
 800073a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800073c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073e:	4293      	cmp	r3, r2
 8000740:	d80d      	bhi.n	800075e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000742:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074a:	6a03      	ldr	r3, [r0, #32]
 800074c:	0609      	lsls	r1, r1, #24
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	430b      	orrs	r3, r1
 8000754:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000756:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075e:	4770      	bx	lr
 8000760:	00ffffff 	.word	0x00ffffff
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800076c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800076e:	1d84      	adds	r4, r0, #6
 8000770:	7fe3      	ldrb	r3, [r4, #31]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d004      	beq.n	8000780 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000776:	2304      	movs	r3, #4
 8000778:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800077a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800077c:	0018      	movs	r0, r3
 800077e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000780:	210e      	movs	r1, #14
 8000782:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000784:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	438a      	bics	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800078c:	2201      	movs	r2, #1
 800078e:	6819      	ldr	r1, [r3, #0]
 8000790:	4391      	bics	r1, r2
 8000792:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000794:	231c      	movs	r3, #28
 8000796:	402b      	ands	r3, r5
 8000798:	0015      	movs	r5, r2
 800079a:	409d      	lsls	r5, r3
 800079c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800079e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80007a0:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80007a2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80007a4:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80007a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80007a8:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80007aa:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80007ac:	42a2      	cmp	r2, r4
 80007ae:	d0e5      	beq.n	800077c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80007b0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80007b2:	0023      	movs	r3, r4
 80007b4:	e7e2      	b.n	800077c <HAL_DMA_Abort_IT+0x10>
	...

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007ba:	4a53      	ldr	r2, [pc, #332]	; (8000908 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80007bc:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007be:	1882      	adds	r2, r0, r2
 80007c0:	1e54      	subs	r4, r2, #1
 80007c2:	41a2      	sbcs	r2, r4
{
 80007c4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80007c6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80007c8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007ca:	3205      	adds	r2, #5
 80007cc:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ce:	9a01      	ldr	r2, [sp, #4]
 80007d0:	40da      	lsrs	r2, r3
 80007d2:	d101      	bne.n	80007d8 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80007d4:	b005      	add	sp, #20
 80007d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007d8:	2501      	movs	r5, #1
 80007da:	409d      	lsls	r5, r3
 80007dc:	9a01      	ldr	r2, [sp, #4]
 80007de:	402a      	ands	r2, r5
 80007e0:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80007e2:	d100      	bne.n	80007e6 <HAL_GPIO_Init+0x2e>
 80007e4:	e08d      	b.n	8000902 <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007e6:	684a      	ldr	r2, [r1, #4]
 80007e8:	4694      	mov	ip, r2
 80007ea:	2210      	movs	r2, #16
 80007ec:	4664      	mov	r4, ip
 80007ee:	4394      	bics	r4, r2
 80007f0:	0022      	movs	r2, r4
 80007f2:	3c01      	subs	r4, #1
 80007f4:	2a02      	cmp	r2, #2
 80007f6:	d11f      	bne.n	8000838 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80007f8:	2407      	movs	r4, #7
 80007fa:	270f      	movs	r7, #15
 80007fc:	401c      	ands	r4, r3
 80007fe:	00a4      	lsls	r4, r4, #2
 8000800:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000802:	08da      	lsrs	r2, r3, #3
 8000804:	0092      	lsls	r2, r2, #2
 8000806:	1882      	adds	r2, r0, r2
 8000808:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800080a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800080c:	690f      	ldr	r7, [r1, #16]
 800080e:	40a7      	lsls	r7, r4
 8000810:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000812:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000814:	2403      	movs	r4, #3
 8000816:	005e      	lsls	r6, r3, #1
 8000818:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800081a:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800081c:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800081e:	68cc      	ldr	r4, [r1, #12]
 8000820:	40b4      	lsls	r4, r6
 8000822:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000824:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000826:	4662      	mov	r2, ip
 8000828:	06d2      	lsls	r2, r2, #27
 800082a:	0fd2      	lsrs	r2, r2, #31
 800082c:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800082e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000830:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000832:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000834:	6042      	str	r2, [r0, #4]
 8000836:	e001      	b.n	800083c <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	2c01      	cmp	r4, #1
 800083a:	d9eb      	bls.n	8000814 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800083c:	2603      	movs	r6, #3
 800083e:	0034      	movs	r4, r6
 8000840:	005d      	lsls	r5, r3, #1
 8000842:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000844:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000846:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000848:	4032      	ands	r2, r6
 800084a:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 800084c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800084e:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000850:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000852:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000854:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000856:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000858:	688a      	ldr	r2, [r1, #8]
 800085a:	40aa      	lsls	r2, r5
 800085c:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800085e:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000860:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000862:	00d2      	lsls	r2, r2, #3
 8000864:	d54d      	bpl.n	8000902 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2501      	movs	r5, #1
 8000868:	4c28      	ldr	r4, [pc, #160]	; (800090c <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800086a:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800086e:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000870:	001d      	movs	r5, r3
 8000872:	4035      	ands	r5, r6
 8000874:	00ad      	lsls	r5, r5, #2
 8000876:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	6362      	str	r2, [r4, #52]	; 0x34
 800087a:	4a25      	ldr	r2, [pc, #148]	; (8000910 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800087c:	089c      	lsrs	r4, r3, #2
 800087e:	00a4      	lsls	r4, r4, #2
 8000880:	18a4      	adds	r4, r4, r2
 8000882:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000884:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000886:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000888:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800088a:	05ff      	lsls	r7, r7, #23
 800088c:	2200      	movs	r2, #0
 800088e:	42b8      	cmp	r0, r7
 8000890:	d00c      	beq.n	80008ac <HAL_GPIO_Init+0xf4>
 8000892:	4f20      	ldr	r7, [pc, #128]	; (8000914 <HAL_GPIO_Init+0x15c>)
 8000894:	3201      	adds	r2, #1
 8000896:	42b8      	cmp	r0, r7
 8000898:	d008      	beq.n	80008ac <HAL_GPIO_Init+0xf4>
 800089a:	4f1f      	ldr	r7, [pc, #124]	; (8000918 <HAL_GPIO_Init+0x160>)
 800089c:	3201      	adds	r2, #1
 800089e:	42b8      	cmp	r0, r7
 80008a0:	d004      	beq.n	80008ac <HAL_GPIO_Init+0xf4>
 80008a2:	4f1e      	ldr	r7, [pc, #120]	; (800091c <HAL_GPIO_Init+0x164>)
 80008a4:	0032      	movs	r2, r6
 80008a6:	42b8      	cmp	r0, r7
 80008a8:	d000      	beq.n	80008ac <HAL_GPIO_Init+0xf4>
 80008aa:	9a03      	ldr	r2, [sp, #12]
 80008ac:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ae:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80008b0:	9d02      	ldr	r5, [sp, #8]
 80008b2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008b4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80008b6:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 80008b8:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80008ba:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80008bc:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80008be:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80008c0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008c2:	03ff      	lsls	r7, r7, #15
 80008c4:	d401      	bmi.n	80008ca <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 80008c6:	0035      	movs	r5, r6
 80008c8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ca:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80008cc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008ce:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80008d0:	9d00      	ldr	r5, [sp, #0]
 80008d2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d4:	03bf      	lsls	r7, r7, #14
 80008d6:	d401      	bmi.n	80008dc <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 80008d8:	0035      	movs	r5, r6
 80008da:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008dc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80008de:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008e0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80008e2:	9d00      	ldr	r5, [sp, #0]
 80008e4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e6:	02ff      	lsls	r7, r7, #11
 80008e8:	d401      	bmi.n	80008ee <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 80008ea:	0035      	movs	r5, r6
 80008ec:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ee:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80008f0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008f2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80008f4:	9e00      	ldr	r6, [sp, #0]
 80008f6:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f8:	02bf      	lsls	r7, r7, #10
 80008fa:	d401      	bmi.n	8000900 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 80008fc:	4025      	ands	r5, r4
 80008fe:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000900:	60d6      	str	r6, [r2, #12]
    position++;
 8000902:	3301      	adds	r3, #1
 8000904:	e763      	b.n	80007ce <HAL_GPIO_Init+0x16>
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	afffe400 	.word	0xafffe400
 800090c:	40021000 	.word	0x40021000
 8000910:	40010000 	.word	0x40010000
 8000914:	50000400 	.word	0x50000400
 8000918:	50000800 	.word	0x50000800
 800091c:	50000c00 	.word	0x50000c00
 8000920:	40010400 	.word	0x40010400

08000924 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000924:	2a00      	cmp	r2, #0
 8000926:	d001      	beq.n	800092c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000928:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800092a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800092c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800092e:	e7fc      	b.n	800092a <HAL_GPIO_WritePin+0x6>

08000930 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000932:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	4210      	tst	r0, r2
 8000938:	d002      	beq.n	8000940 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800093a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800093c:	f001 fd6c 	bl	8002418 <HAL_GPIO_EXTI_Callback>
  }
}
 8000940:	bd10      	pop	{r4, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40010400 	.word	0x40010400

08000948 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	699a      	ldr	r2, [r3, #24]
 800094c:	0792      	lsls	r2, r2, #30
 800094e:	d501      	bpl.n	8000954 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000954:	2201      	movs	r2, #1
 8000956:	6999      	ldr	r1, [r3, #24]
 8000958:	4211      	tst	r1, r2
 800095a:	d102      	bne.n	8000962 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800095c:	6999      	ldr	r1, [r3, #24]
 800095e:	430a      	orrs	r2, r1
 8000960:	619a      	str	r2, [r3, #24]
  }
}
 8000962:	4770      	bx	lr

08000964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000968:	0589      	lsls	r1, r1, #22
 800096a:	4333      	orrs	r3, r6
 800096c:	0d89      	lsrs	r1, r1, #22
 800096e:	4319      	orrs	r1, r3
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	6804      	ldr	r4, [r0, #0]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	0d70      	lsrs	r0, r6, #21
 8000978:	4018      	ands	r0, r3
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <I2C_TransferConfig+0x28>)
 800097c:	6865      	ldr	r5, [r4, #4]
 800097e:	0412      	lsls	r2, r2, #16
 8000980:	4318      	orrs	r0, r3
 8000982:	4385      	bics	r5, r0
 8000984:	4311      	orrs	r1, r2
 8000986:	4329      	orrs	r1, r5
 8000988:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	03ff63ff 	.word	0x03ff63ff

08000990 <I2C_WaitOnFlagUntilTimeout>:
{
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	0004      	movs	r4, r0
 8000994:	000e      	movs	r6, r1
 8000996:	0017      	movs	r7, r2
 8000998:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800099a:	6822      	ldr	r2, [r4, #0]
 800099c:	6993      	ldr	r3, [r2, #24]
 800099e:	4033      	ands	r3, r6
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	4259      	negs	r1, r3
 80009a4:	414b      	adcs	r3, r1
 80009a6:	42bb      	cmp	r3, r7
 80009a8:	d001      	beq.n	80009ae <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80009aa:	2000      	movs	r0, #0
 80009ac:	e017      	b.n	80009de <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80009ae:	1c6b      	adds	r3, r5, #1
 80009b0:	d0f4      	beq.n	800099c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009b2:	f7ff fe67 	bl	8000684 <HAL_GetTick>
 80009b6:	9b06      	ldr	r3, [sp, #24]
 80009b8:	1ac0      	subs	r0, r0, r3
 80009ba:	4285      	cmp	r5, r0
 80009bc:	d301      	bcc.n	80009c2 <I2C_WaitOnFlagUntilTimeout+0x32>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d1eb      	bne.n	800099a <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009c2:	2220      	movs	r2, #32
 80009c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80009c6:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009c8:	4313      	orrs	r3, r2
 80009ca:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009cc:	0023      	movs	r3, r4
 80009ce:	3341      	adds	r3, #65	; 0x41
 80009d0:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009d2:	0022      	movs	r2, r4
 80009d4:	2300      	movs	r3, #0
 80009d6:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80009d8:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009da:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80009dc:	7023      	strb	r3, [r4, #0]
}
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009e0 <I2C_IsAcknowledgeFailed>:
{
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009e2:	6803      	ldr	r3, [r0, #0]
{
 80009e4:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009e6:	6998      	ldr	r0, [r3, #24]
 80009e8:	2310      	movs	r3, #16
{
 80009ea:	000e      	movs	r6, r1
 80009ec:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009ee:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80009f0:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d118      	bne.n	8000a28 <I2C_IsAcknowledgeFailed+0x48>
}
 80009f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80009f8:	1c72      	adds	r2, r6, #1
 80009fa:	d016      	beq.n	8000a2a <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009fc:	f7ff fe42 	bl	8000684 <HAL_GetTick>
 8000a00:	1bc0      	subs	r0, r0, r7
 8000a02:	4286      	cmp	r6, r0
 8000a04:	d301      	bcc.n	8000a0a <I2C_IsAcknowledgeFailed+0x2a>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d10e      	bne.n	8000a28 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a12:	0023      	movs	r3, r4
 8000a14:	3341      	adds	r3, #65	; 0x41
 8000a16:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a18:	0022      	movs	r2, r4
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000a1e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a20:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8000a22:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8000a24:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8000a26:	e7e6      	b.n	80009f6 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	422a      	tst	r2, r5
 8000a2e:	d0e3      	beq.n	80009f8 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a30:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8000a32:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a34:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a36:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000a38:	f7ff ff86 	bl	8000948 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	4906      	ldr	r1, [pc, #24]	; (8000a58 <I2C_IsAcknowledgeFailed+0x78>)
 8000a40:	6853      	ldr	r3, [r2, #4]
 8000a42:	400b      	ands	r3, r1
 8000a44:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000a46:	2304      	movs	r3, #4
 8000a48:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000a4e:	0023      	movs	r3, r4
 8000a50:	3341      	adds	r3, #65	; 0x41
 8000a52:	701d      	strb	r5, [r3, #0]
 8000a54:	e7e0      	b.n	8000a18 <I2C_IsAcknowledgeFailed+0x38>
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	fe00e800 	.word	0xfe00e800

08000a5c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	0004      	movs	r4, r0
 8000a60:	000d      	movs	r5, r1
 8000a62:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000a64:	2702      	movs	r7, #2
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	423b      	tst	r3, r7
 8000a6c:	d001      	beq.n	8000a72 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000a6e:	2000      	movs	r0, #0
}
 8000a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a72:	0032      	movs	r2, r6
 8000a74:	0029      	movs	r1, r5
 8000a76:	0020      	movs	r0, r4
 8000a78:	f7ff ffb2 	bl	80009e0 <I2C_IsAcknowledgeFailed>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d115      	bne.n	8000aac <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000a80:	1c6b      	adds	r3, r5, #1
 8000a82:	d0f0      	beq.n	8000a66 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a84:	f7ff fdfe 	bl	8000684 <HAL_GetTick>
 8000a88:	1b80      	subs	r0, r0, r6
 8000a8a:	4285      	cmp	r5, r0
 8000a8c:	d301      	bcc.n	8000a92 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d1e9      	bne.n	8000a66 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a92:	2220      	movs	r2, #32
 8000a94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a96:	4313      	orrs	r3, r2
 8000a98:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a9a:	0023      	movs	r3, r4
 8000a9c:	3341      	adds	r3, #65	; 0x41
 8000a9e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aa0:	0022      	movs	r2, r4
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000aa6:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aa8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000aaa:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
 8000aae:	e7df      	b.n	8000a70 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000ab0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	0004      	movs	r4, r0
 8000ab4:	000d      	movs	r5, r1
 8000ab6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ab8:	2720      	movs	r7, #32
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	423b      	tst	r3, r7
 8000ac0:	d001      	beq.n	8000ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000ac2:	2000      	movs	r0, #0
}
 8000ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ac6:	0032      	movs	r2, r6
 8000ac8:	0029      	movs	r1, r5
 8000aca:	0020      	movs	r0, r4
 8000acc:	f7ff ff88 	bl	80009e0 <I2C_IsAcknowledgeFailed>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d113      	bne.n	8000afc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ad4:	f7ff fdd6 	bl	8000684 <HAL_GetTick>
 8000ad8:	1b80      	subs	r0, r0, r6
 8000ada:	4285      	cmp	r5, r0
 8000adc:	d301      	bcc.n	8000ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	d1eb      	bne.n	8000aba <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000aea:	0023      	movs	r3, r4
 8000aec:	3341      	adds	r3, #65	; 0x41
 8000aee:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000af0:	0022      	movs	r2, r4
 8000af2:	2300      	movs	r3, #0
 8000af4:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000af6:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000af8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000afa:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
 8000afe:	e7e1      	b.n	8000ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08000b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	0004      	movs	r4, r0
 8000b04:	000d      	movs	r5, r1
 8000b06:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000b08:	2604      	movs	r6, #4
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4233      	tst	r3, r6
 8000b10:	d111      	bne.n	8000b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b12:	003a      	movs	r2, r7
 8000b14:	0029      	movs	r1, r5
 8000b16:	0020      	movs	r0, r4
 8000b18:	f7ff ff62 	bl	80009e0 <I2C_IsAcknowledgeFailed>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d11a      	bne.n	8000b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000b20:	2120      	movs	r1, #32
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	699a      	ldr	r2, [r3, #24]
 8000b26:	420a      	tst	r2, r1
 8000b28:	d017      	beq.n	8000b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	4232      	tst	r2, r6
 8000b2e:	d004      	beq.n	8000b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8000b30:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d001      	beq.n	8000b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8000b36:	2000      	movs	r0, #0
}
 8000b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8000b42:	4002      	ands	r2, r0
 8000b44:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8000b46:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b48:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8000b4a:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b4c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000b4e:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000b50:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b52:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8000b54:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000b56:	2001      	movs	r0, #1
 8000b58:	e7ee      	b.n	8000b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b5a:	f7ff fd93 	bl	8000684 <HAL_GetTick>
 8000b5e:	1bc0      	subs	r0, r0, r7
 8000b60:	4285      	cmp	r5, r0
 8000b62:	d301      	bcc.n	8000b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d1d0      	bne.n	8000b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b68:	2220      	movs	r2, #32
 8000b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b70:	0023      	movs	r3, r4
 8000b72:	3341      	adds	r3, #65	; 0x41
 8000b74:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8000b76:	3440      	adds	r4, #64	; 0x40
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e7eb      	b.n	8000b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8000b7c:	fe00e800 	.word	0xfe00e800

08000b80 <HAL_I2C_Init>:
{
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000b84:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d03f      	beq.n	8000c0a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b8a:	0025      	movs	r5, r4
 8000b8c:	3541      	adds	r5, #65	; 0x41
 8000b8e:	782b      	ldrb	r3, [r5, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d105      	bne.n	8000ba2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000b96:	0022      	movs	r2, r4
 8000b98:	3240      	adds	r2, #64	; 0x40
 8000b9a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	f001 fc67 	bl	8002470 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000ba4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000ba8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000baa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68a6      	ldr	r6, [r4, #8]
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bb4:	6861      	ldr	r1, [r4, #4]
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_I2C_Init+0xa0>)
 8000bb8:	400a      	ands	r2, r1
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bbc:	6899      	ldr	r1, [r3, #8]
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_I2C_Init+0xa4>)
 8000bc0:	4011      	ands	r1, r2
 8000bc2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bc4:	2801      	cmp	r0, #1
 8000bc6:	d121      	bne.n	8000c0c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0209      	lsls	r1, r1, #8
 8000bcc:	4331      	orrs	r1, r6
 8000bce:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bd0:	6858      	ldr	r0, [r3, #4]
 8000bd2:	4915      	ldr	r1, [pc, #84]	; (8000c28 <HAL_I2C_Init+0xa8>)
 8000bd4:	4301      	orrs	r1, r0
 8000bd6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bd8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bda:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bdc:	400a      	ands	r2, r1
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000be0:	6961      	ldr	r1, [r4, #20]
 8000be2:	6922      	ldr	r2, [r4, #16]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	69a1      	ldr	r1, [r4, #24]
 8000be8:	0209      	lsls	r1, r1, #8
 8000bea:	430a      	orrs	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bee:	6a21      	ldr	r1, [r4, #32]
 8000bf0:	69e2      	ldr	r2, [r4, #28]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000bfe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c00:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c02:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c04:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c06:	3442      	adds	r4, #66	; 0x42
 8000c08:	7020      	strb	r0, [r4, #0]
}
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c0c:	2184      	movs	r1, #132	; 0x84
 8000c0e:	0209      	lsls	r1, r1, #8
 8000c10:	4331      	orrs	r1, r6
 8000c12:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d1db      	bne.n	8000bd0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0109      	lsls	r1, r1, #4
 8000c1c:	6059      	str	r1, [r3, #4]
 8000c1e:	e7d7      	b.n	8000bd0 <HAL_I2C_Init+0x50>
 8000c20:	f0ffffff 	.word	0xf0ffffff
 8000c24:	ffff7fff 	.word	0xffff7fff
 8000c28:	02008000 	.word	0x02008000

08000c2c <HAL_I2C_Master_Transmit>:
{
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c2e:	0005      	movs	r5, r0
{
 8000c30:	b087      	sub	sp, #28
 8000c32:	9103      	str	r1, [sp, #12]
 8000c34:	9204      	str	r2, [sp, #16]
 8000c36:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c38:	3541      	adds	r5, #65	; 0x41
 8000c3a:	782b      	ldrb	r3, [r5, #0]
{
 8000c3c:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000c3e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d114      	bne.n	8000c6e <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000c44:	0023      	movs	r3, r4
 8000c46:	3340      	adds	r3, #64	; 0x40
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	2a01      	cmp	r2, #1
 8000c4c:	d00f      	beq.n	8000c6e <HAL_I2C_Master_Transmit+0x42>
 8000c4e:	2601      	movs	r6, #1
 8000c50:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000c52:	f7ff fd17 	bl	8000684 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c56:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000c58:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c5a:	9000      	str	r0, [sp, #0]
 8000c5c:	2319      	movs	r3, #25
 8000c5e:	0032      	movs	r2, r6
 8000c60:	0209      	lsls	r1, r1, #8
 8000c62:	0020      	movs	r0, r4
 8000c64:	f7ff fe94 	bl	8000990 <I2C_WaitOnFlagUntilTimeout>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000c6c:	2001      	movs	r0, #1
}
 8000c6e:	b007      	add	sp, #28
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c72:	2321      	movs	r3, #33	; 0x21
 8000c74:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c76:	0025      	movs	r5, r4
 8000c78:	3b11      	subs	r3, #17
 8000c7a:	3542      	adds	r5, #66	; 0x42
 8000c7c:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000c7e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c80:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000c82:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c84:	466b      	mov	r3, sp
 8000c86:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000c88:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000c8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_I2C_Master_Transmit+0x124>)
 8000c90:	2aff      	cmp	r2, #255	; 0xff
 8000c92:	d921      	bls.n	8000cd8 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	045b      	lsls	r3, r3, #17
 8000c9e:	9903      	ldr	r1, [sp, #12]
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	f7ff fe5f 	bl	8000964 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ca6:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000ca8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000caa:	003a      	movs	r2, r7
 8000cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cae:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d119      	bne.n	8000ce8 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cb4:	f7ff fefc 	bl	8000ab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d1d7      	bne.n	8000c6c <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000cc0:	4e24      	ldr	r6, [pc, #144]	; (8000d54 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cc2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	4032      	ands	r2, r6
 8000cc8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000cca:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000ccc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000cce:	3341      	adds	r3, #65	; 0x41
 8000cd0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000cd2:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000cd4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000cd6:	e7ca      	b.n	8000c6e <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000cd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	049b      	lsls	r3, r3, #18
 8000ce6:	e7da      	b.n	8000c9e <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ce8:	f7ff feb8 	bl	8000a5c <I2C_WaitOnTXISFlagUntilTimeout>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d1bd      	bne.n	8000c6c <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cf2:	6822      	ldr	r2, [r4, #0]
 8000cf4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000cf6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000cf8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000cfa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000cfe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d06:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0ca      	beq.n	8000ca8 <HAL_I2C_Master_Transmit+0x7c>
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	d1c8      	bne.n	8000ca8 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d16:	9700      	str	r7, [sp, #0]
 8000d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	0020      	movs	r0, r4
 8000d1e:	f7ff fe37 	bl	8000990 <I2C_WaitOnFlagUntilTimeout>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d1a2      	bne.n	8000c6c <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d28:	2bff      	cmp	r3, #255	; 0xff
 8000d2a:	d909      	bls.n	8000d40 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d30:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d36:	9903      	ldr	r1, [sp, #12]
 8000d38:	0020      	movs	r0, r4
 8000d3a:	f7ff fe13 	bl	8000964 <I2C_TransferConfig>
 8000d3e:	e7b3      	b.n	8000ca8 <HAL_I2C_Master_Transmit+0x7c>
 8000d40:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000d42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d44:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000d46:	b292      	uxth	r2, r2
 8000d48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	9000      	str	r0, [sp, #0]
 8000d4e:	e7f2      	b.n	8000d36 <HAL_I2C_Master_Transmit+0x10a>
 8000d50:	80002000 	.word	0x80002000
 8000d54:	fe00e800 	.word	0xfe00e800

08000d58 <HAL_I2C_Master_Receive>:
{
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d5a:	0005      	movs	r5, r0
{
 8000d5c:	b087      	sub	sp, #28
 8000d5e:	9103      	str	r1, [sp, #12]
 8000d60:	9204      	str	r2, [sp, #16]
 8000d62:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d64:	3541      	adds	r5, #65	; 0x41
 8000d66:	782b      	ldrb	r3, [r5, #0]
{
 8000d68:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000d6a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d6c:	2b20      	cmp	r3, #32
 8000d6e:	d114      	bne.n	8000d9a <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8000d70:	0023      	movs	r3, r4
 8000d72:	3340      	adds	r3, #64	; 0x40
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	2a01      	cmp	r2, #1
 8000d78:	d00f      	beq.n	8000d9a <HAL_I2C_Master_Receive+0x42>
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000d7e:	f7ff fc81 	bl	8000684 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d82:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000d84:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d86:	9000      	str	r0, [sp, #0]
 8000d88:	2319      	movs	r3, #25
 8000d8a:	0032      	movs	r2, r6
 8000d8c:	0209      	lsls	r1, r1, #8
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f7ff fdfe 	bl	8000990 <I2C_WaitOnFlagUntilTimeout>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
}
 8000d9a:	b007      	add	sp, #28
 8000d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000da2:	0025      	movs	r5, r4
 8000da4:	3b12      	subs	r3, #18
 8000da6:	3542      	adds	r5, #66	; 0x42
 8000da8:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000daa:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dac:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000dae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000db0:	466b      	mov	r3, sp
 8000db2:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000db4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000db6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000db8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <HAL_I2C_Master_Receive+0x128>)
 8000dbc:	2aff      	cmp	r2, #255	; 0xff
 8000dbe:	d921      	bls.n	8000e04 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	045b      	lsls	r3, r3, #17
 8000dca:	9903      	ldr	r1, [sp, #12]
 8000dcc:	0020      	movs	r0, r4
 8000dce:	f7ff fdc9 	bl	8000964 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dd2:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dd6:	003a      	movs	r2, r7
 8000dd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000dda:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d119      	bne.n	8000e14 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de0:	f7ff fe66 	bl	8000ab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d1d7      	bne.n	8000d98 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000de8:	2120      	movs	r1, #32
 8000dea:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000dec:	4e25      	ldr	r6, [pc, #148]	; (8000e84 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4032      	ands	r2, r6
 8000df4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000df6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000df8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000dfa:	3341      	adds	r3, #65	; 0x41
 8000dfc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000dfe:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000e00:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000e02:	e7ca      	b.n	8000d9a <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000e04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e06:	b292      	uxth	r2, r2
 8000e08:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	049b      	lsls	r3, r3, #18
 8000e12:	e7da      	b.n	8000dca <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e14:	f7ff fe74 	bl	8000b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d1bd      	bne.n	8000d98 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000e26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000e28:	3301      	adds	r3, #1
 8000e2a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e2e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e38:	b292      	uxth	r2, r2
 8000e3a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0c9      	beq.n	8000dd4 <HAL_I2C_Master_Receive+0x7c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d1c7      	bne.n	8000dd4 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e44:	9700      	str	r7, [sp, #0]
 8000e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0020      	movs	r0, r4
 8000e4c:	f7ff fda0 	bl	8000990 <I2C_WaitOnFlagUntilTimeout>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d1a1      	bne.n	8000d98 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e56:	2bff      	cmp	r3, #255	; 0xff
 8000e58:	d909      	bls.n	8000e6e <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e5e:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e60:	045b      	lsls	r3, r3, #17
 8000e62:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e64:	9903      	ldr	r1, [sp, #12]
 8000e66:	0020      	movs	r0, r4
 8000e68:	f7ff fd7c 	bl	8000964 <I2C_TransferConfig>
 8000e6c:	e7b2      	b.n	8000dd4 <HAL_I2C_Master_Receive+0x7c>
 8000e6e:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000e70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e72:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000e74:	b292      	uxth	r2, r2
 8000e76:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	e7f2      	b.n	8000e64 <HAL_I2C_Master_Receive+0x10c>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	80002400 	.word	0x80002400
 8000e84:	fe00e800 	.word	0xfe00e800

08000e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e8a:	0004      	movs	r4, r0
 8000e8c:	3441      	adds	r4, #65	; 0x41
 8000e8e:	7822      	ldrb	r2, [r4, #0]
{
 8000e90:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e92:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000e94:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e96:	2a20      	cmp	r2, #32
 8000e98:	d118      	bne.n	8000ecc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000e9a:	001d      	movs	r5, r3
 8000e9c:	3540      	adds	r5, #64	; 0x40
 8000e9e:	782e      	ldrb	r6, [r5, #0]
 8000ea0:	2e01      	cmp	r6, #1
 8000ea2:	d013      	beq.n	8000ecc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000ea4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea6:	3022      	adds	r0, #34	; 0x22
 8000ea8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000eaa:	681e      	ldr	r6, [r3, #0]
 8000eac:	3823      	subs	r0, #35	; 0x23
 8000eae:	4386      	bics	r6, r0
 8000eb0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000eb2:	681e      	ldr	r6, [r3, #0]
 8000eb4:	4f06      	ldr	r7, [pc, #24]	; (8000ed0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000eb6:	403e      	ands	r6, r7
 8000eb8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000eba:	681e      	ldr	r6, [r3, #0]
 8000ebc:	4331      	orrs	r1, r6
 8000ebe:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	4308      	orrs	r0, r1
 8000ec4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000ec6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ec8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000eca:	7028      	strb	r0, [r5, #0]
  }
}
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	ffffefff 	.word	0xffffefff

08000ed4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed6:	0005      	movs	r5, r0
 8000ed8:	3541      	adds	r5, #65	; 0x41
 8000eda:	782a      	ldrb	r2, [r5, #0]
{
 8000edc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ede:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000ee0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ee2:	2a20      	cmp	r2, #32
 8000ee4:	d117      	bne.n	8000f16 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	3440      	adds	r4, #64	; 0x40
 8000eea:	7826      	ldrb	r6, [r4, #0]
 8000eec:	2e01      	cmp	r6, #1
 8000eee:	d012      	beq.n	8000f16 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000ef0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef2:	3022      	adds	r0, #34	; 0x22
 8000ef4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000ef6:	681e      	ldr	r6, [r3, #0]
 8000ef8:	3823      	subs	r0, #35	; 0x23
 8000efa:	4386      	bics	r6, r0
 8000efc:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000efe:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000f00:	4f05      	ldr	r7, [pc, #20]	; (8000f18 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000f02:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000f04:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000f06:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000f08:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	4308      	orrs	r0, r1
 8000f0e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000f10:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000f12:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000f14:	7020      	strb	r0, [r4, #0]
  }
}
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f18:	fffff0ff 	.word	0xfffff0ff

08000f1c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f1c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000f20:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000f22:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f24:	400a      	ands	r2, r1
 8000f26:	2a08      	cmp	r2, #8
 8000f28:	d026      	beq.n	8000f78 <HAL_RCC_GetSysClockFreq+0x5c>
 8000f2a:	2a0c      	cmp	r2, #12
 8000f2c:	d006      	beq.n	8000f3c <HAL_RCC_GetSysClockFreq+0x20>
 8000f2e:	2a04      	cmp	r2, #4
 8000f30:	d11a      	bne.n	8000f68 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	06db      	lsls	r3, r3, #27
 8000f36:	d421      	bmi.n	8000f7c <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000f3a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000f3c:	028a      	lsls	r2, r1, #10
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000f40:	0f12      	lsrs	r2, r2, #28
 8000f42:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000f44:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f46:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000f48:	0f89      	lsrs	r1, r1, #30
 8000f4a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f4c:	03c0      	lsls	r0, r0, #15
 8000f4e:	d504      	bpl.n	8000f5a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000f52:	4350      	muls	r0, r2
 8000f54:	f7ff f8e2 	bl	800011c <__udivsi3>
 8000f58:	e7ef      	b.n	8000f3a <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	06db      	lsls	r3, r3, #27
 8000f5e:	d501      	bpl.n	8000f64 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f62:	e7f6      	b.n	8000f52 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <HAL_RCC_GetSysClockFreq+0x68>)
 8000f66:	e7f4      	b.n	8000f52 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000f68:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000f6a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000f6c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000f72:	3301      	adds	r3, #1
 8000f74:	4098      	lsls	r0, r3
 8000f76:	e7e0      	b.n	8000f3a <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x70>)
 8000f7a:	e7de      	b.n	8000f3a <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000f7e:	e7dc      	b.n	8000f3a <HAL_RCC_GetSysClockFreq+0x1e>
 8000f80:	40021000 	.word	0x40021000
 8000f84:	00f42400 	.word	0x00f42400
 8000f88:	080026ea 	.word	0x080026ea
 8000f8c:	007a1200 	.word	0x007a1200
 8000f90:	003d0900 	.word	0x003d0900

08000f94 <HAL_RCC_OscConfig>:
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	0005      	movs	r5, r0
 8000f98:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d102      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000f9e:	2001      	movs	r0, #1
}
 8000fa0:	b007      	add	sp, #28
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	4cbe      	ldr	r4, [pc, #760]	; (80012a0 <HAL_RCC_OscConfig+0x30c>)
 8000fa8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000faa:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fac:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	025b      	lsls	r3, r3, #9
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	6802      	ldr	r2, [r0, #0]
 8000fb8:	07d2      	lsls	r2, r2, #31
 8000fba:	d441      	bmi.n	8001040 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	079b      	lsls	r3, r3, #30
 8000fc0:	d500      	bpl.n	8000fc4 <HAL_RCC_OscConfig+0x30>
 8000fc2:	e087      	b.n	80010d4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	06db      	lsls	r3, r3, #27
 8000fc8:	d528      	bpl.n	800101c <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d000      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x3c>
 8000fce:	e0d9      	b.n	8001184 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	059b      	lsls	r3, r3, #22
 8000fd4:	d502      	bpl.n	8000fdc <HAL_RCC_OscConfig+0x48>
 8000fd6:	69eb      	ldr	r3, [r5, #28]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0e0      	beq.n	8000f9e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fdc:	6862      	ldr	r2, [r4, #4]
 8000fde:	49b1      	ldr	r1, [pc, #708]	; (80012a4 <HAL_RCC_OscConfig+0x310>)
 8000fe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe8:	6861      	ldr	r1, [r4, #4]
 8000fea:	6a2a      	ldr	r2, [r5, #32]
 8000fec:	0209      	lsls	r1, r1, #8
 8000fee:	0a09      	lsrs	r1, r1, #8
 8000ff0:	0612      	lsls	r2, r2, #24
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	0b5b      	lsrs	r3, r3, #13
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	0212      	lsls	r2, r2, #8
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001002:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001004:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001006:	060a      	lsls	r2, r1, #24
 8001008:	49a7      	ldr	r1, [pc, #668]	; (80012a8 <HAL_RCC_OscConfig+0x314>)
 800100a:	0f12      	lsrs	r2, r2, #28
 800100c:	5c8a      	ldrb	r2, [r1, r2]
 800100e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001010:	4aa6      	ldr	r2, [pc, #664]	; (80012ac <HAL_RCC_OscConfig+0x318>)
 8001012:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001014:	f7ff fb02 	bl	800061c <HAL_InitTick>
        if(status != HAL_OK)
 8001018:	2800      	cmp	r0, #0
 800101a:	d1c1      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	071b      	lsls	r3, r3, #28
 8001020:	d500      	bpl.n	8001024 <HAL_RCC_OscConfig+0x90>
 8001022:	e0e6      	b.n	80011f2 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	075b      	lsls	r3, r3, #29
 8001028:	d500      	bpl.n	800102c <HAL_RCC_OscConfig+0x98>
 800102a:	e108      	b.n	800123e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	069b      	lsls	r3, r3, #26
 8001030:	d500      	bpl.n	8001034 <HAL_RCC_OscConfig+0xa0>
 8001032:	e18d      	b.n	8001350 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001034:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001036:	2b00      	cmp	r3, #0
 8001038:	d000      	beq.n	800103c <HAL_RCC_OscConfig+0xa8>
 800103a:	e1bc      	b.n	80013b6 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
 800103e:	e7af      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001040:	2e08      	cmp	r6, #8
 8001042:	d004      	beq.n	800104e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001044:	2e0c      	cmp	r6, #12
 8001046:	d109      	bne.n	800105c <HAL_RCC_OscConfig+0xc8>
 8001048:	9a01      	ldr	r2, [sp, #4]
 800104a:	2a00      	cmp	r2, #0
 800104c:	d006      	beq.n	800105c <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	039b      	lsls	r3, r3, #14
 8001052:	d5b3      	bpl.n	8000fbc <HAL_RCC_OscConfig+0x28>
 8001054:	686b      	ldr	r3, [r5, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1b0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x28>
 800105a:	e7a0      	b.n	8000f9e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105c:	686a      	ldr	r2, [r5, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	d111      	bne.n	8001086 <HAL_RCC_OscConfig+0xf2>
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	4313      	orrs	r3, r2
 8001066:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001068:	f7ff fb0c 	bl	8000684 <HAL_GetTick>
 800106c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	0292      	lsls	r2, r2, #10
 8001074:	4213      	tst	r3, r2
 8001076:	d1a1      	bne.n	8000fbc <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fb04 	bl	8000684 <HAL_GetTick>
 800107c:	1bc0      	subs	r0, r0, r7
 800107e:	2864      	cmp	r0, #100	; 0x64
 8001080:	d9f5      	bls.n	800106e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
 8001084:	e78c      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	21a0      	movs	r1, #160	; 0xa0
 8001088:	02c9      	lsls	r1, r1, #11
 800108a:	428a      	cmp	r2, r1
 800108c:	d105      	bne.n	800109a <HAL_RCC_OscConfig+0x106>
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	6821      	ldr	r1, [r4, #0]
 8001092:	02d2      	lsls	r2, r2, #11
 8001094:	430a      	orrs	r2, r1
 8001096:	6022      	str	r2, [r4, #0]
 8001098:	e7e3      	b.n	8001062 <HAL_RCC_OscConfig+0xce>
 800109a:	6821      	ldr	r1, [r4, #0]
 800109c:	4884      	ldr	r0, [pc, #528]	; (80012b0 <HAL_RCC_OscConfig+0x31c>)
 800109e:	4001      	ands	r1, r0
 80010a0:	6021      	str	r1, [r4, #0]
 80010a2:	6821      	ldr	r1, [r4, #0]
 80010a4:	400b      	ands	r3, r1
 80010a6:	9305      	str	r3, [sp, #20]
 80010a8:	9b05      	ldr	r3, [sp, #20]
 80010aa:	4982      	ldr	r1, [pc, #520]	; (80012b4 <HAL_RCC_OscConfig+0x320>)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	400b      	ands	r3, r1
 80010b0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d1d8      	bne.n	8001068 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 80010b6:	f7ff fae5 	bl	8000684 <HAL_GetTick>
 80010ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	0292      	lsls	r2, r2, #10
 80010c2:	4213      	tst	r3, r2
 80010c4:	d100      	bne.n	80010c8 <HAL_RCC_OscConfig+0x134>
 80010c6:	e779      	b.n	8000fbc <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fadc 	bl	8000684 <HAL_GetTick>
 80010cc:	1bc0      	subs	r0, r0, r7
 80010ce:	2864      	cmp	r0, #100	; 0x64
 80010d0:	d9f4      	bls.n	80010bc <HAL_RCC_OscConfig+0x128>
 80010d2:	e7d6      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 80010d4:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d6:	2e04      	cmp	r6, #4
 80010d8:	d004      	beq.n	80010e4 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010da:	2e0c      	cmp	r6, #12
 80010dc:	d125      	bne.n	800112a <HAL_RCC_OscConfig+0x196>
 80010de:	9b01      	ldr	r3, [sp, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d122      	bne.n	800112a <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	075b      	lsls	r3, r3, #29
 80010e8:	d502      	bpl.n	80010f0 <HAL_RCC_OscConfig+0x15c>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d100      	bne.n	80010f0 <HAL_RCC_OscConfig+0x15c>
 80010ee:	e756      	b.n	8000f9e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	6861      	ldr	r1, [r4, #4]
 80010f2:	692b      	ldr	r3, [r5, #16]
 80010f4:	4870      	ldr	r0, [pc, #448]	; (80012b8 <HAL_RCC_OscConfig+0x324>)
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	4001      	ands	r1, r0
 80010fa:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010fc:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	438b      	bics	r3, r1
 8001104:	4313      	orrs	r3, r2
 8001106:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001108:	f7ff ff08 	bl	8000f1c <HAL_RCC_GetSysClockFreq>
 800110c:	68e3      	ldr	r3, [r4, #12]
 800110e:	4a66      	ldr	r2, [pc, #408]	; (80012a8 <HAL_RCC_OscConfig+0x314>)
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	0f1b      	lsrs	r3, r3, #28
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	40d8      	lsrs	r0, r3
 8001118:	4b64      	ldr	r3, [pc, #400]	; (80012ac <HAL_RCC_OscConfig+0x318>)
 800111a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fa7d 	bl	800061c <HAL_InitTick>
      if(status != HAL_OK)
 8001122:	2800      	cmp	r0, #0
 8001124:	d100      	bne.n	8001128 <HAL_RCC_OscConfig+0x194>
 8001126:	e74d      	b.n	8000fc4 <HAL_RCC_OscConfig+0x30>
 8001128:	e73a      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800112a:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 800112c:	2a00      	cmp	r2, #0
 800112e:	d018      	beq.n	8001162 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001130:	2109      	movs	r1, #9
 8001132:	438b      	bics	r3, r1
 8001134:	4313      	orrs	r3, r2
 8001136:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001138:	f7ff faa4 	bl	8000684 <HAL_GetTick>
 800113c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800113e:	2204      	movs	r2, #4
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	4213      	tst	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	6862      	ldr	r2, [r4, #4]
 8001148:	692b      	ldr	r3, [r5, #16]
 800114a:	495b      	ldr	r1, [pc, #364]	; (80012b8 <HAL_RCC_OscConfig+0x324>)
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	400a      	ands	r2, r1
 8001150:	4313      	orrs	r3, r2
 8001152:	6063      	str	r3, [r4, #4]
 8001154:	e736      	b.n	8000fc4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fa95 	bl	8000684 <HAL_GetTick>
 800115a:	1bc0      	subs	r0, r0, r7
 800115c:	2802      	cmp	r0, #2
 800115e:	d9ee      	bls.n	800113e <HAL_RCC_OscConfig+0x1aa>
 8001160:	e78f      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8001162:	2201      	movs	r2, #1
 8001164:	4393      	bics	r3, r2
 8001166:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001168:	f7ff fa8c 	bl	8000684 <HAL_GetTick>
 800116c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800116e:	2204      	movs	r2, #4
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	4213      	tst	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_RCC_OscConfig+0x1e4>
 8001176:	e725      	b.n	8000fc4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff fa84 	bl	8000684 <HAL_GetTick>
 800117c:	1bc0      	subs	r0, r0, r7
 800117e:	2802      	cmp	r0, #2
 8001180:	d9f5      	bls.n	800116e <HAL_RCC_OscConfig+0x1da>
 8001182:	e77e      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001184:	69eb      	ldr	r3, [r5, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d020      	beq.n	80011cc <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4313      	orrs	r3, r2
 8001192:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001194:	f7ff fa76 	bl	8000684 <HAL_GetTick>
 8001198:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4213      	tst	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	; (80012a4 <HAL_RCC_OscConfig+0x310>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b0:	6862      	ldr	r2, [r4, #4]
 80011b2:	6a2b      	ldr	r3, [r5, #32]
 80011b4:	0212      	lsls	r2, r2, #8
 80011b6:	061b      	lsls	r3, r3, #24
 80011b8:	0a12      	lsrs	r2, r2, #8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	6063      	str	r3, [r4, #4]
 80011be:	e72d      	b.n	800101c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa60 	bl	8000684 <HAL_GetTick>
 80011c4:	1bc0      	subs	r0, r0, r7
 80011c6:	2802      	cmp	r0, #2
 80011c8:	d9e7      	bls.n	800119a <HAL_RCC_OscConfig+0x206>
 80011ca:	e75a      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	4a3b      	ldr	r2, [pc, #236]	; (80012bc <HAL_RCC_OscConfig+0x328>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011d4:	f7ff fa56 	bl	8000684 <HAL_GetTick>
 80011d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4213      	tst	r3, r2
 80011e2:	d100      	bne.n	80011e6 <HAL_RCC_OscConfig+0x252>
 80011e4:	e71a      	b.n	800101c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e6:	f7ff fa4d 	bl	8000684 <HAL_GetTick>
 80011ea:	1bc0      	subs	r0, r0, r7
 80011ec:	2802      	cmp	r0, #2
 80011ee:	d9f4      	bls.n	80011da <HAL_RCC_OscConfig+0x246>
 80011f0:	e747      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	696a      	ldr	r2, [r5, #20]
 80011f4:	2301      	movs	r3, #1
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d010      	beq.n	800121c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80011fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011fc:	4313      	orrs	r3, r2
 80011fe:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001200:	f7ff fa40 	bl	8000684 <HAL_GetTick>
 8001204:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001206:	2202      	movs	r2, #2
 8001208:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800120a:	4213      	tst	r3, r2
 800120c:	d000      	beq.n	8001210 <HAL_RCC_OscConfig+0x27c>
 800120e:	e709      	b.n	8001024 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fa38 	bl	8000684 <HAL_GetTick>
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	2802      	cmp	r0, #2
 8001218:	d9f5      	bls.n	8001206 <HAL_RCC_OscConfig+0x272>
 800121a:	e732      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 800121c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800121e:	439a      	bics	r2, r3
 8001220:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001222:	f7ff fa2f 	bl	8000684 <HAL_GetTick>
 8001226:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001228:	2202      	movs	r2, #2
 800122a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800122c:	4213      	tst	r3, r2
 800122e:	d100      	bne.n	8001232 <HAL_RCC_OscConfig+0x29e>
 8001230:	e6f8      	b.n	8001024 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff fa27 	bl	8000684 <HAL_GetTick>
 8001236:	1bc0      	subs	r0, r0, r7
 8001238:	2802      	cmp	r0, #2
 800123a:	d9f5      	bls.n	8001228 <HAL_RCC_OscConfig+0x294>
 800123c:	e721      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001240:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001242:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001244:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001246:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001248:	421a      	tst	r2, r3
 800124a:	d104      	bne.n	8001256 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800124e:	4313      	orrs	r3, r2
 8001250:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	4f19      	ldr	r7, [pc, #100]	; (80012c0 <HAL_RCC_OscConfig+0x32c>)
 800125a:	0052      	lsls	r2, r2, #1
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4213      	tst	r3, r2
 8001260:	d008      	beq.n	8001274 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	68ab      	ldr	r3, [r5, #8]
 8001266:	0052      	lsls	r2, r2, #1
 8001268:	4293      	cmp	r3, r2
 800126a:	d12b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x330>
 800126c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800126e:	4313      	orrs	r3, r2
 8001270:	6523      	str	r3, [r4, #80]	; 0x50
 8001272:	e04c      	b.n	800130e <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	4313      	orrs	r3, r2
 800127c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800127e:	f7ff fa01 	bl	8000684 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001286:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	9a03      	ldr	r2, [sp, #12]
 800128e:	4213      	tst	r3, r2
 8001290:	d1e7      	bne.n	8001262 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001292:	f7ff f9f7 	bl	8000684 <HAL_GetTick>
 8001296:	9b02      	ldr	r3, [sp, #8]
 8001298:	1ac0      	subs	r0, r0, r3
 800129a:	2864      	cmp	r0, #100	; 0x64
 800129c:	d9f5      	bls.n	800128a <HAL_RCC_OscConfig+0x2f6>
 800129e:	e6f0      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	ffff1fff 	.word	0xffff1fff
 80012a8:	080026d2 	.word	0x080026d2
 80012ac:	20000008 	.word	0x20000008
 80012b0:	fffeffff 	.word	0xfffeffff
 80012b4:	fffbffff 	.word	0xfffbffff
 80012b8:	ffffe0ff 	.word	0xffffe0ff
 80012bc:	fffffeff 	.word	0xfffffeff
 80012c0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d116      	bne.n	80012f6 <HAL_RCC_OscConfig+0x362>
 80012c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x4e8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	6523      	str	r3, [r4, #80]	; 0x50
 80012d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012d2:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x4ec>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80012d8:	f7ff f9d4 	bl	8000684 <HAL_GetTick>
 80012dc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4213      	tst	r3, r2
 80012e6:	d02a      	beq.n	800133e <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff f9cc 	bl	8000684 <HAL_GetTick>
 80012ec:	4b65      	ldr	r3, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x4f0>)
 80012ee:	1bc0      	subs	r0, r0, r7
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d9f4      	bls.n	80012de <HAL_RCC_OscConfig+0x34a>
 80012f4:	e6c5      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	00c9      	lsls	r1, r1, #3
 80012fa:	428b      	cmp	r3, r1
 80012fc:	d10b      	bne.n	8001316 <HAL_RCC_OscConfig+0x382>
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	430b      	orrs	r3, r1
 8001306:	6523      	str	r3, [r4, #80]	; 0x50
 8001308:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800130a:	431a      	orrs	r2, r3
 800130c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800130e:	f7ff f9b9 	bl	8000684 <HAL_GetTick>
 8001312:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001314:	e00e      	b.n	8001334 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001318:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x4e8>)
 800131a:	4013      	ands	r3, r2
 800131c:	6523      	str	r3, [r4, #80]	; 0x50
 800131e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001320:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x4ec>)
 8001322:	4013      	ands	r3, r2
 8001324:	e7a4      	b.n	8001270 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff f9ad 	bl	8000684 <HAL_GetTick>
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x4f0>)
 800132c:	1bc0      	subs	r0, r0, r7
 800132e:	4298      	cmp	r0, r3
 8001330:	d900      	bls.n	8001334 <HAL_RCC_OscConfig+0x3a0>
 8001332:	e6a6      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4213      	tst	r3, r2
 800133c:	d0f3      	beq.n	8001326 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 800133e:	9b01      	ldr	r3, [sp, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d000      	beq.n	8001346 <HAL_RCC_OscConfig+0x3b2>
 8001344:	e672      	b.n	800102c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001346:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	4013      	ands	r3, r2
 800134c:	63a3      	str	r3, [r4, #56]	; 0x38
 800134e:	e66d      	b.n	800102c <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001350:	69a9      	ldr	r1, [r5, #24]
 8001352:	2301      	movs	r3, #1
 8001354:	4a4d      	ldr	r2, [pc, #308]	; (800148c <HAL_RCC_OscConfig+0x4f8>)
 8001356:	2900      	cmp	r1, #0
 8001358:	d018      	beq.n	800138c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 800135a:	68a1      	ldr	r1, [r4, #8]
 800135c:	4319      	orrs	r1, r3
 800135e:	60a1      	str	r1, [r4, #8]
 8001360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001362:	430b      	orrs	r3, r1
 8001364:	6363      	str	r3, [r4, #52]	; 0x34
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	6a11      	ldr	r1, [r2, #32]
 800136a:	019b      	lsls	r3, r3, #6
 800136c:	430b      	orrs	r3, r1
 800136e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001370:	f7ff f988 	bl	8000684 <HAL_GetTick>
 8001374:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001376:	2202      	movs	r2, #2
 8001378:	68a3      	ldr	r3, [r4, #8]
 800137a:	4213      	tst	r3, r2
 800137c:	d000      	beq.n	8001380 <HAL_RCC_OscConfig+0x3ec>
 800137e:	e659      	b.n	8001034 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001380:	f7ff f980 	bl	8000684 <HAL_GetTick>
 8001384:	1bc0      	subs	r0, r0, r7
 8001386:	2802      	cmp	r0, #2
 8001388:	d9f5      	bls.n	8001376 <HAL_RCC_OscConfig+0x3e2>
 800138a:	e67a      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 800138c:	68a1      	ldr	r1, [r4, #8]
 800138e:	4399      	bics	r1, r3
 8001390:	60a1      	str	r1, [r4, #8]
 8001392:	6a13      	ldr	r3, [r2, #32]
 8001394:	493e      	ldr	r1, [pc, #248]	; (8001490 <HAL_RCC_OscConfig+0x4fc>)
 8001396:	400b      	ands	r3, r1
 8001398:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800139a:	f7ff f973 	bl	8000684 <HAL_GetTick>
 800139e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013a0:	2202      	movs	r2, #2
 80013a2:	68a3      	ldr	r3, [r4, #8]
 80013a4:	4213      	tst	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x416>
 80013a8:	e644      	b.n	8001034 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013aa:	f7ff f96b 	bl	8000684 <HAL_GetTick>
 80013ae:	1bc0      	subs	r0, r0, r7
 80013b0:	2802      	cmp	r0, #2
 80013b2:	d9f5      	bls.n	80013a0 <HAL_RCC_OscConfig+0x40c>
 80013b4:	e665      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b6:	2e0c      	cmp	r6, #12
 80013b8:	d043      	beq.n	8001442 <HAL_RCC_OscConfig+0x4ae>
 80013ba:	4a36      	ldr	r2, [pc, #216]	; (8001494 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d12e      	bne.n	800141e <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 80013c0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013c2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80013c4:	4013      	ands	r3, r2
 80013c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013c8:	f7ff f95c 	bl	8000684 <HAL_GetTick>
 80013cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013ce:	04b6      	lsls	r6, r6, #18
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	4233      	tst	r3, r6
 80013d4:	d11d      	bne.n	8001412 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80013d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013da:	68e2      	ldr	r2, [r4, #12]
 80013dc:	430b      	orrs	r3, r1
 80013de:	492e      	ldr	r1, [pc, #184]	; (8001498 <HAL_RCC_OscConfig+0x504>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	4313      	orrs	r3, r2
 80013e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013e6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	045b      	lsls	r3, r3, #17
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013f6:	f7ff f945 	bl	8000684 <HAL_GetTick>
 80013fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013fc:	04ad      	lsls	r5, r5, #18
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	422b      	tst	r3, r5
 8001402:	d000      	beq.n	8001406 <HAL_RCC_OscConfig+0x472>
 8001404:	e61a      	b.n	800103c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff f93d 	bl	8000684 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	2802      	cmp	r0, #2
 800140e:	d9f6      	bls.n	80013fe <HAL_RCC_OscConfig+0x46a>
 8001410:	e637      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff f937 	bl	8000684 <HAL_GetTick>
 8001416:	1bc0      	subs	r0, r0, r7
 8001418:	2802      	cmp	r0, #2
 800141a:	d9d9      	bls.n	80013d0 <HAL_RCC_OscConfig+0x43c>
 800141c:	e631      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 800141e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001420:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001422:	4013      	ands	r3, r2
 8001424:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001426:	f7ff f92d 	bl	8000684 <HAL_GetTick>
 800142a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800142c:	04ad      	lsls	r5, r5, #18
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	422b      	tst	r3, r5
 8001432:	d100      	bne.n	8001436 <HAL_RCC_OscConfig+0x4a2>
 8001434:	e602      	b.n	800103c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001436:	f7ff f925 	bl	8000684 <HAL_GetTick>
 800143a:	1b80      	subs	r0, r0, r6
 800143c:	2802      	cmp	r0, #2
 800143e:	d9f6      	bls.n	800142e <HAL_RCC_OscConfig+0x49a>
 8001440:	e61f      	b.n	8001082 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8001442:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	2b01      	cmp	r3, #1
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x4b6>
 8001448:	e5aa      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800144c:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001450:	0252      	lsls	r2, r2, #9
 8001452:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001454:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	428a      	cmp	r2, r1
 8001458:	d000      	beq.n	800145c <HAL_RCC_OscConfig+0x4c8>
 800145a:	e5a1      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800145c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001460:	0392      	lsls	r2, r2, #14
 8001462:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001464:	428a      	cmp	r2, r1
 8001466:	d000      	beq.n	800146a <HAL_RCC_OscConfig+0x4d6>
 8001468:	e59a      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800146a:	20c0      	movs	r0, #192	; 0xc0
 800146c:	0400      	lsls	r0, r0, #16
 800146e:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001470:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001472:	1a18      	subs	r0, r3, r0
 8001474:	1e43      	subs	r3, r0, #1
 8001476:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001478:	b2c0      	uxtb	r0, r0
 800147a:	e591      	b.n	8000fa0 <HAL_RCC_OscConfig+0xc>
 800147c:	fffffeff 	.word	0xfffffeff
 8001480:	fffffbff 	.word	0xfffffbff
 8001484:	00001388 	.word	0x00001388
 8001488:	efffffff 	.word	0xefffffff
 800148c:	40010000 	.word	0x40010000
 8001490:	ffffdfff 	.word	0xffffdfff
 8001494:	feffffff 	.word	0xfeffffff
 8001498:	ff02ffff 	.word	0xff02ffff

0800149c <HAL_RCC_ClockConfig>:
{
 800149c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800149e:	1e06      	subs	r6, r0, #0
 80014a0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
}
 80014a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	2201      	movs	r2, #1
 80014aa:	4c51      	ldr	r4, [pc, #324]	; (80015f0 <HAL_RCC_ClockConfig+0x154>)
 80014ac:	9901      	ldr	r1, [sp, #4]
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	4013      	ands	r3, r2
 80014b2:	428b      	cmp	r3, r1
 80014b4:	d327      	bcc.n	8001506 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b6:	6832      	ldr	r2, [r6, #0]
 80014b8:	0793      	lsls	r3, r2, #30
 80014ba:	d42f      	bmi.n	800151c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014bc:	07d3      	lsls	r3, r2, #31
 80014be:	d435      	bmi.n	800152c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	2301      	movs	r3, #1
 80014c2:	6822      	ldr	r2, [r4, #0]
 80014c4:	9901      	ldr	r1, [sp, #4]
 80014c6:	401a      	ands	r2, r3
 80014c8:	4291      	cmp	r1, r2
 80014ca:	d200      	bcs.n	80014ce <HAL_RCC_ClockConfig+0x32>
 80014cc:	e081      	b.n	80015d2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ce:	6832      	ldr	r2, [r6, #0]
 80014d0:	4c48      	ldr	r4, [pc, #288]	; (80015f4 <HAL_RCC_ClockConfig+0x158>)
 80014d2:	0753      	lsls	r3, r2, #29
 80014d4:	d500      	bpl.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
 80014d6:	e084      	b.n	80015e2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	0713      	lsls	r3, r2, #28
 80014da:	d506      	bpl.n	80014ea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014dc:	68e2      	ldr	r2, [r4, #12]
 80014de:	6933      	ldr	r3, [r6, #16]
 80014e0:	4945      	ldr	r1, [pc, #276]	; (80015f8 <HAL_RCC_ClockConfig+0x15c>)
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	400a      	ands	r2, r1
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ea:	f7ff fd17 	bl	8000f1c <HAL_RCC_GetSysClockFreq>
 80014ee:	68e3      	ldr	r3, [r4, #12]
 80014f0:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_RCC_ClockConfig+0x160>)
 80014f2:	061b      	lsls	r3, r3, #24
 80014f4:	0f1b      	lsrs	r3, r3, #28
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	40d8      	lsrs	r0, r3
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_RCC_ClockConfig+0x164>)
 80014fc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff f88c 	bl	800061c <HAL_InitTick>
 8001504:	e7cf      	b.n	80014a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	9901      	ldr	r1, [sp, #4]
 800150a:	4393      	bics	r3, r2
 800150c:	430b      	orrs	r3, r1
 800150e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	4013      	ands	r3, r2
 8001514:	9a01      	ldr	r2, [sp, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d1c4      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x8>
 800151a:	e7cc      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	20f0      	movs	r0, #240	; 0xf0
 800151e:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_RCC_ClockConfig+0x158>)
 8001520:	68cb      	ldr	r3, [r1, #12]
 8001522:	4383      	bics	r3, r0
 8001524:	68b0      	ldr	r0, [r6, #8]
 8001526:	4303      	orrs	r3, r0
 8001528:	60cb      	str	r3, [r1, #12]
 800152a:	e7c7      	b.n	80014bc <HAL_RCC_ClockConfig+0x20>
 800152c:	4d31      	ldr	r5, [pc, #196]	; (80015f4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001530:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	2a02      	cmp	r2, #2
 8001534:	d119      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001536:	039b      	lsls	r3, r3, #14
 8001538:	d5b4      	bpl.n	80014a4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153a:	2103      	movs	r1, #3
 800153c:	68eb      	ldr	r3, [r5, #12]
 800153e:	438b      	bics	r3, r1
 8001540:	4313      	orrs	r3, r2
 8001542:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001544:	f7ff f89e 	bl	8000684 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001548:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800154a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154c:	2b02      	cmp	r3, #2
 800154e:	d119      	bne.n	8001584 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	220c      	movs	r2, #12
 8001552:	68eb      	ldr	r3, [r5, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	2b08      	cmp	r3, #8
 8001558:	d0b2      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7ff f893 	bl	8000684 <HAL_GetTick>
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_RCC_ClockConfig+0x168>)
 8001560:	1bc0      	subs	r0, r0, r7
 8001562:	4298      	cmp	r0, r3
 8001564:	d9f4      	bls.n	8001550 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001566:	2003      	movs	r0, #3
 8001568:	e79d      	b.n	80014a6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156a:	2a03      	cmp	r2, #3
 800156c:	d102      	bne.n	8001574 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	d4e3      	bmi.n	800153a <HAL_RCC_ClockConfig+0x9e>
 8001572:	e797      	b.n	80014a4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001574:	2a01      	cmp	r2, #1
 8001576:	d102      	bne.n	800157e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001578:	075b      	lsls	r3, r3, #29
 800157a:	d4de      	bmi.n	800153a <HAL_RCC_ClockConfig+0x9e>
 800157c:	e792      	b.n	80014a4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800157e:	059b      	lsls	r3, r3, #22
 8001580:	d4db      	bmi.n	800153a <HAL_RCC_ClockConfig+0x9e>
 8001582:	e78f      	b.n	80014a4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001584:	2b03      	cmp	r3, #3
 8001586:	d10b      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001588:	220c      	movs	r2, #12
 800158a:	68eb      	ldr	r3, [r5, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	4293      	cmp	r3, r2
 8001590:	d096      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001592:	f7ff f877 	bl	8000684 <HAL_GetTick>
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_ClockConfig+0x168>)
 8001598:	1bc0      	subs	r0, r0, r7
 800159a:	4298      	cmp	r0, r3
 800159c:	d9f4      	bls.n	8001588 <HAL_RCC_ClockConfig+0xec>
 800159e:	e7e2      	b.n	8001566 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d010      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015a4:	220c      	movs	r2, #12
 80015a6:	68eb      	ldr	r3, [r5, #12]
 80015a8:	4213      	tst	r3, r2
 80015aa:	d089      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ac:	f7ff f86a 	bl	8000684 <HAL_GetTick>
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_RCC_ClockConfig+0x168>)
 80015b2:	1bc0      	subs	r0, r0, r7
 80015b4:	4298      	cmp	r0, r3
 80015b6:	d9f5      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x108>
 80015b8:	e7d5      	b.n	8001566 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff f863 	bl	8000684 <HAL_GetTick>
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_ClockConfig+0x168>)
 80015c0:	1bc0      	subs	r0, r0, r7
 80015c2:	4298      	cmp	r0, r3
 80015c4:	d8cf      	bhi.n	8001566 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c6:	220c      	movs	r2, #12
 80015c8:	68eb      	ldr	r3, [r5, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d1f4      	bne.n	80015ba <HAL_RCC_ClockConfig+0x11e>
 80015d0:	e776      	b.n	80014c0 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	439a      	bics	r2, r3
 80015d6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	421a      	tst	r2, r3
 80015dc:	d000      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x144>
 80015de:	e761      	b.n	80014a4 <HAL_RCC_ClockConfig+0x8>
 80015e0:	e775      	b.n	80014ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e2:	68e3      	ldr	r3, [r4, #12]
 80015e4:	4908      	ldr	r1, [pc, #32]	; (8001608 <HAL_RCC_ClockConfig+0x16c>)
 80015e6:	400b      	ands	r3, r1
 80015e8:	68f1      	ldr	r1, [r6, #12]
 80015ea:	430b      	orrs	r3, r1
 80015ec:	60e3      	str	r3, [r4, #12]
 80015ee:	e773      	b.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
 80015f0:	40022000 	.word	0x40022000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	ffffc7ff 	.word	0xffffc7ff
 80015fc:	080026d2 	.word	0x080026d2
 8001600:	20000008 	.word	0x20000008
 8001604:	00001388 	.word	0x00001388
 8001608:	fffff8ff 	.word	0xfffff8ff

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x14>)
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	055b      	lsls	r3, r3, #21
 8001614:	0f5b      	lsrs	r3, r3, #29
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800161a:	6810      	ldr	r0, [r2, #0]
 800161c:	40d8      	lsrs	r0, r3
}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	080026e2 	.word	0x080026e2
 8001628:	20000008 	.word	0x20000008

0800162c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x14>)
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	049b      	lsls	r3, r3, #18
 8001634:	0f5b      	lsrs	r3, r3, #29
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800163a:	6810      	ldr	r0, [r2, #0]
 800163c:	40d8      	lsrs	r0, r3
}
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	080026e2 	.word	0x080026e2
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800164c:	2382      	movs	r3, #130	; 0x82
{
 800164e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001650:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001652:	011b      	lsls	r3, r3, #4
{
 8001654:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001656:	421a      	tst	r2, r3
 8001658:	d047      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800165c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4c5f      	ldr	r4, [pc, #380]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001660:	055b      	lsls	r3, r3, #21
 8001662:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001664:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	421a      	tst	r2, r3
 8001668:	d104      	bne.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800166c:	4313      	orrs	r3, r2
 800166e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001670:	2301      	movs	r3, #1
 8001672:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	2780      	movs	r7, #128	; 0x80
 8001676:	4e5a      	ldr	r6, [pc, #360]	; (80017e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001678:	007f      	lsls	r7, r7, #1
 800167a:	6833      	ldr	r3, [r6, #0]
 800167c:	423b      	tst	r3, r7
 800167e:	d06d      	beq.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001680:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001682:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001684:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	0392      	lsls	r2, r2, #14
 800168a:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800168c:	4010      	ands	r0, r2
 800168e:	4283      	cmp	r3, r0
 8001690:	d103      	bne.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001692:	68a8      	ldr	r0, [r5, #8]
 8001694:	4002      	ands	r2, r0
 8001696:	4293      	cmp	r3, r2
 8001698:	d009      	beq.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	000a      	movs	r2, r1
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	401a      	ands	r2, r3
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d103      	bne.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80016a6:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80016aa:	039b      	lsls	r3, r3, #14
 80016ac:	d466      	bmi.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80016ae:	22c0      	movs	r2, #192	; 0xc0
 80016b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016b2:	0292      	lsls	r2, r2, #10
 80016b4:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80016b6:	d162      	bne.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016b8:	6869      	ldr	r1, [r5, #4]
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	000a      	movs	r2, r1
 80016be:	029b      	lsls	r3, r3, #10
 80016c0:	401a      	ands	r2, r3
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	4846      	ldr	r0, [pc, #280]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80016ca:	4003      	ands	r3, r0
 80016cc:	20c0      	movs	r0, #192	; 0xc0
 80016ce:	0380      	lsls	r0, r0, #14
 80016d0:	4001      	ands	r1, r0
 80016d2:	430b      	orrs	r3, r1
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016d8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016da:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016dc:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d103      	bne.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016e4:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	07da      	lsls	r2, r3, #31
 80016ee:	d506      	bpl.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016f0:	2003      	movs	r0, #3
 80016f2:	493a      	ldr	r1, [pc, #232]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80016f4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80016f6:	4382      	bics	r2, r0
 80016f8:	68e8      	ldr	r0, [r5, #12]
 80016fa:	4302      	orrs	r2, r0
 80016fc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016fe:	079a      	lsls	r2, r3, #30
 8001700:	d506      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001702:	200c      	movs	r0, #12
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001706:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001708:	4382      	bics	r2, r0
 800170a:	6928      	ldr	r0, [r5, #16]
 800170c:	4302      	orrs	r2, r0
 800170e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001710:	075a      	lsls	r2, r3, #29
 8001712:	d506      	bpl.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001714:	4931      	ldr	r1, [pc, #196]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001716:	4835      	ldr	r0, [pc, #212]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001718:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800171a:	4002      	ands	r2, r0
 800171c:	6968      	ldr	r0, [r5, #20]
 800171e:	4302      	orrs	r2, r0
 8001720:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001722:	071a      	lsls	r2, r3, #28
 8001724:	d506      	bpl.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001726:	492d      	ldr	r1, [pc, #180]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001728:	4831      	ldr	r0, [pc, #196]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800172c:	4002      	ands	r2, r0
 800172e:	69a8      	ldr	r0, [r5, #24]
 8001730:	4302      	orrs	r2, r0
 8001732:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001734:	065a      	lsls	r2, r3, #25
 8001736:	d506      	bpl.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001738:	4928      	ldr	r1, [pc, #160]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800173a:	482e      	ldr	r0, [pc, #184]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800173c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800173e:	4002      	ands	r2, r0
 8001740:	6a28      	ldr	r0, [r5, #32]
 8001742:	4302      	orrs	r2, r0
 8001744:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001746:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	d517      	bpl.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800174e:	492a      	ldr	r1, [pc, #168]	; (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001750:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001752:	400b      	ands	r3, r1
 8001754:	69e9      	ldr	r1, [r5, #28]
 8001756:	430b      	orrs	r3, r1
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	e00f      	b.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175c:	6833      	ldr	r3, [r6, #0]
 800175e:	433b      	orrs	r3, r7
 8001760:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001762:	f7fe ff8f 	bl	8000684 <HAL_GetTick>
 8001766:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	423b      	tst	r3, r7
 800176c:	d188      	bne.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7fe ff89 	bl	8000684 <HAL_GetTick>
 8001772:	9b01      	ldr	r3, [sp, #4]
 8001774:	1ac0      	subs	r0, r0, r3
 8001776:	2864      	cmp	r0, #100	; 0x64
 8001778:	d9f6      	bls.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 800177a:	2003      	movs	r0, #3
}
 800177c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800177e:	4011      	ands	r1, r2
 8001780:	428b      	cmp	r3, r1
 8001782:	d002      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001784:	6829      	ldr	r1, [r5, #0]
 8001786:	0689      	lsls	r1, r1, #26
 8001788:	d408      	bmi.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800178a:	68a9      	ldr	r1, [r5, #8]
 800178c:	400a      	ands	r2, r1
 800178e:	4293      	cmp	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001792:	e791      	b.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	051b      	lsls	r3, r3, #20
 8001798:	d400      	bmi.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x150>
 800179a:	e78d      	b.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 800179c:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800179e:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80017a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	4302      	orrs	r2, r0
 80017a6:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017a8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017ac:	4814      	ldr	r0, [pc, #80]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80017ae:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017b0:	4002      	ands	r2, r0
 80017b2:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80017b4:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80017b6:	05cb      	lsls	r3, r1, #23
 80017b8:	d400      	bmi.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x170>
 80017ba:	e77d      	b.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 80017bc:	f7fe ff62 	bl	8000684 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80017c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c4:	00bf      	lsls	r7, r7, #2
 80017c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017c8:	423b      	tst	r3, r7
 80017ca:	d000      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x182>
 80017cc:	e774      	b.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe ff59 	bl	8000684 <HAL_GetTick>
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	4298      	cmp	r0, r3
 80017d8:	d9f5      	bls.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80017da:	e7ce      	b.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	ffcfffff 	.word	0xffcfffff
 80017e8:	efffffff 	.word	0xefffffff
 80017ec:	fffff3ff 	.word	0xfffff3ff
 80017f0:	ffffcfff 	.word	0xffffcfff
 80017f4:	fbffffff 	.word	0xfbffffff
 80017f8:	fff3ffff 	.word	0xfff3ffff
 80017fc:	fffcffff 	.word	0xfffcffff
 8001800:	fff7ffff 	.word	0xfff7ffff
 8001804:	00001388 	.word	0x00001388

08001808 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001808:	6803      	ldr	r3, [r0, #0]
 800180a:	4907      	ldr	r1, [pc, #28]	; (8001828 <UART_EndRxTransfer+0x20>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	400a      	ands	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	3123      	adds	r1, #35	; 0x23
 8001816:	31ff      	adds	r1, #255	; 0xff
 8001818:	438a      	bics	r2, r1
 800181a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800181c:	2320      	movs	r3, #32
 800181e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001820:	2300      	movs	r3, #0
 8001822:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001824:	4770      	bx	lr
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	fffffedf 	.word	0xfffffedf

0800182c <HAL_UART_TxCpltCallback>:
 800182c:	4770      	bx	lr

0800182e <HAL_UART_ErrorCallback>:
 800182e:	4770      	bx	lr

08001830 <HAL_UART_IRQHandler>:
{
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001832:	6803      	ldr	r3, [r0, #0]
{
 8001834:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001836:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001838:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800183a:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800183c:	0711      	lsls	r1, r2, #28
 800183e:	d10a      	bne.n	8001856 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001840:	2120      	movs	r1, #32
 8001842:	420a      	tst	r2, r1
 8001844:	d100      	bne.n	8001848 <HAL_UART_IRQHandler+0x18>
 8001846:	e06a      	b.n	800191e <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001848:	4208      	tst	r0, r1
 800184a:	d068      	beq.n	800191e <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 800184c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 800184e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001850:	2b00      	cmp	r3, #0
 8001852:	d15a      	bne.n	800190a <HAL_UART_IRQHandler+0xda>
 8001854:	e05a      	b.n	800190c <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001856:	2101      	movs	r1, #1
 8001858:	0035      	movs	r5, r6
 800185a:	400d      	ands	r5, r1
 800185c:	d103      	bne.n	8001866 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800185e:	2790      	movs	r7, #144	; 0x90
 8001860:	007f      	lsls	r7, r7, #1
 8001862:	4238      	tst	r0, r7
 8001864:	d05b      	beq.n	800191e <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001866:	420a      	tst	r2, r1
 8001868:	d005      	beq.n	8001876 <HAL_UART_IRQHandler+0x46>
 800186a:	05c6      	lsls	r6, r0, #23
 800186c:	d503      	bpl.n	8001876 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800186e:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001870:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001872:	4331      	orrs	r1, r6
 8001874:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001876:	2102      	movs	r1, #2
 8001878:	420a      	tst	r2, r1
 800187a:	d006      	beq.n	800188a <HAL_UART_IRQHandler+0x5a>
 800187c:	2d00      	cmp	r5, #0
 800187e:	d004      	beq.n	800188a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001880:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001882:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001884:	1849      	adds	r1, r1, r1
 8001886:	4331      	orrs	r1, r6
 8001888:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800188a:	2104      	movs	r1, #4
 800188c:	420a      	tst	r2, r1
 800188e:	d006      	beq.n	800189e <HAL_UART_IRQHandler+0x6e>
 8001890:	2d00      	cmp	r5, #0
 8001892:	d004      	beq.n	800189e <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001894:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001896:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001898:	3902      	subs	r1, #2
 800189a:	4331      	orrs	r1, r6
 800189c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800189e:	0711      	lsls	r1, r2, #28
 80018a0:	d508      	bpl.n	80018b4 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80018a2:	0681      	lsls	r1, r0, #26
 80018a4:	d401      	bmi.n	80018aa <HAL_UART_IRQHandler+0x7a>
 80018a6:	2d00      	cmp	r5, #0
 80018a8:	d004      	beq.n	80018b4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80018aa:	2108      	movs	r1, #8
 80018ac:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80018b0:	4319      	orrs	r1, r3
 80018b2:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018b4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d028      	beq.n	800190c <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80018ba:	2320      	movs	r3, #32
 80018bc:	421a      	tst	r2, r3
 80018be:	d006      	beq.n	80018ce <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80018c0:	4218      	tst	r0, r3
 80018c2:	d004      	beq.n	80018ce <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 80018c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 80018ca:	0020      	movs	r0, r4
 80018cc:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80018ce:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80018d0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80018d2:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80018d4:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80018d6:	065b      	lsls	r3, r3, #25
 80018d8:	d402      	bmi.n	80018e0 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80018da:	2308      	movs	r3, #8
 80018dc:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80018de:	d01a      	beq.n	8001916 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80018e0:	f7ff ff92 	bl	8001808 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	420a      	tst	r2, r1
 80018ec:	d00f      	beq.n	800190e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018ee:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80018f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018f2:	438a      	bics	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d009      	beq.n	800190e <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_UART_IRQHandler+0x134>)
 80018fc:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018fe:	f7fe ff35 	bl	800076c <HAL_DMA_Abort_IT>
 8001902:	2800      	cmp	r0, #0
 8001904:	d002      	beq.n	800190c <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001906:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001908:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800190a:	4798      	blx	r3
}
 800190c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800190e:	0020      	movs	r0, r4
 8001910:	f7ff ff8d 	bl	800182e <HAL_UART_ErrorCallback>
 8001914:	e7fa      	b.n	800190c <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8001916:	f7ff ff8a 	bl	800182e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800191a:	67e5      	str	r5, [r4, #124]	; 0x7c
 800191c:	e7f6      	b.n	800190c <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0349      	lsls	r1, r1, #13
 8001922:	420a      	tst	r2, r1
 8001924:	d006      	beq.n	8001934 <HAL_UART_IRQHandler+0x104>
 8001926:	0275      	lsls	r5, r6, #9
 8001928:	d504      	bpl.n	8001934 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800192a:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800192c:	0020      	movs	r0, r4
 800192e:	f000 fa3d 	bl	8001dac <HAL_UARTEx_WakeupCallback>
    return;
 8001932:	e7eb      	b.n	800190c <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	420a      	tst	r2, r1
 8001938:	d003      	beq.n	8001942 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800193a:	4208      	tst	r0, r1
 800193c:	d001      	beq.n	8001942 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 800193e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001940:	e785      	b.n	800184e <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	420a      	tst	r2, r1
 8001946:	d0e1      	beq.n	800190c <HAL_UART_IRQHandler+0xdc>
 8001948:	4208      	tst	r0, r1
 800194a:	d0df      	beq.n	800190c <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800194c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800194e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001950:	438a      	bics	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001954:	2320      	movs	r3, #32
 8001956:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001958:	2300      	movs	r3, #0
 800195a:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800195c:	f7ff ff66 	bl	800182c <HAL_UART_TxCpltCallback>
 8001960:	e7d4      	b.n	800190c <HAL_UART_IRQHandler+0xdc>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	08001969 	.word	0x08001969

08001968 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001968:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	0002      	movs	r2, r0
{
 800196e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001970:	325a      	adds	r2, #90	; 0x5a
 8001972:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001974:	3a08      	subs	r2, #8
 8001976:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001978:	f7ff ff59 	bl	800182e <HAL_UART_ErrorCallback>
}
 800197c:	bd10      	pop	{r4, pc}
	...

08001980 <UART_SetConfig>:
{
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001984:	6925      	ldr	r5, [r4, #16]
 8001986:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001988:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800198a:	432a      	orrs	r2, r5
 800198c:	6965      	ldr	r5, [r4, #20]
 800198e:	69c1      	ldr	r1, [r0, #28]
 8001990:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	4d79      	ldr	r5, [pc, #484]	; (8001b7c <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001996:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001998:	4028      	ands	r0, r5
 800199a:	4302      	orrs	r2, r0
 800199c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4877      	ldr	r0, [pc, #476]	; (8001b80 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019a2:	4d78      	ldr	r5, [pc, #480]	; (8001b84 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019a4:	4002      	ands	r2, r0
 80019a6:	68e0      	ldr	r0, [r4, #12]
 80019a8:	4302      	orrs	r2, r0
 80019aa:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019ac:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019ae:	42ab      	cmp	r3, r5
 80019b0:	d001      	beq.n	80019b6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80019b2:	6a22      	ldr	r2, [r4, #32]
 80019b4:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4e73      	ldr	r6, [pc, #460]	; (8001b88 <UART_SetConfig+0x208>)
 80019ba:	4032      	ands	r2, r6
 80019bc:	4302      	orrs	r2, r0
 80019be:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019c0:	4a72      	ldr	r2, [pc, #456]	; (8001b8c <UART_SetConfig+0x20c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d113      	bne.n	80019ee <UART_SetConfig+0x6e>
 80019c6:	2203      	movs	r2, #3
 80019c8:	4b71      	ldr	r3, [pc, #452]	; (8001b90 <UART_SetConfig+0x210>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4013      	ands	r3, r2
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <UART_SetConfig+0x214>)
 80019d0:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	4299      	cmp	r1, r3
 80019d8:	d000      	beq.n	80019dc <UART_SetConfig+0x5c>
 80019da:	e092      	b.n	8001b02 <UART_SetConfig+0x182>
    switch (clocksource)
 80019dc:	2808      	cmp	r0, #8
 80019de:	d81e      	bhi.n	8001a1e <UART_SetConfig+0x9e>
 80019e0:	f7fe fb92 	bl	8000108 <__gnu_thumb1_case_uqi>
 80019e4:	1d636058 	.word	0x1d636058
 80019e8:	1d1d1d84 	.word	0x1d1d1d84
 80019ec:	87          	.byte	0x87
 80019ed:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019ee:	4a6a      	ldr	r2, [pc, #424]	; (8001b98 <UART_SetConfig+0x218>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d105      	bne.n	8001a00 <UART_SetConfig+0x80>
 80019f4:	220c      	movs	r2, #12
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <UART_SetConfig+0x210>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4013      	ands	r3, r2
 80019fc:	4a67      	ldr	r2, [pc, #412]	; (8001b9c <UART_SetConfig+0x21c>)
 80019fe:	e7e7      	b.n	80019d0 <UART_SetConfig+0x50>
 8001a00:	42ab      	cmp	r3, r5
 8001a02:	d000      	beq.n	8001a06 <UART_SetConfig+0x86>
 8001a04:	e0b3      	b.n	8001b6e <UART_SetConfig+0x1ee>
 8001a06:	21c0      	movs	r1, #192	; 0xc0
 8001a08:	2080      	movs	r0, #128	; 0x80
 8001a0a:	4a61      	ldr	r2, [pc, #388]	; (8001b90 <UART_SetConfig+0x210>)
 8001a0c:	0109      	lsls	r1, r1, #4
 8001a0e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001a10:	00c0      	lsls	r0, r0, #3
 8001a12:	400b      	ands	r3, r1
 8001a14:	4283      	cmp	r3, r0
 8001a16:	d038      	beq.n	8001a8a <UART_SetConfig+0x10a>
 8001a18:	d803      	bhi.n	8001a22 <UART_SetConfig+0xa2>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8001a1e:	2501      	movs	r5, #1
 8001a20:	e00d      	b.n	8001a3e <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a22:	2080      	movs	r0, #128	; 0x80
 8001a24:	0100      	lsls	r0, r0, #4
 8001a26:	4283      	cmp	r3, r0
 8001a28:	d00e      	beq.n	8001a48 <UART_SetConfig+0xc8>
 8001a2a:	428b      	cmp	r3, r1
 8001a2c:	d1f7      	bne.n	8001a1e <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001a2e:	2080      	movs	r0, #128	; 0x80
 8001a30:	0200      	lsls	r0, r0, #8
 8001a32:	e00d      	b.n	8001a50 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001a34:	f7ff fdea 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 8001a38:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001a3a:	42a8      	cmp	r0, r5
 8001a3c:	d108      	bne.n	8001a50 <UART_SetConfig+0xd0>
  huart->RxISR = NULL;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001a42:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a44:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	06db      	lsls	r3, r3, #27
 8001a4c:	d520      	bpl.n	8001a90 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001a4e:	4854      	ldr	r0, [pc, #336]	; (8001ba0 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001a50:	2203      	movs	r2, #3
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	435a      	muls	r2, r3
 8001a56:	4282      	cmp	r2, r0
 8001a58:	d8e1      	bhi.n	8001a1e <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001a5a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001a5c:	4282      	cmp	r2, r0
 8001a5e:	d3de      	bcc.n	8001a1e <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001a60:	2700      	movs	r7, #0
 8001a62:	0e02      	lsrs	r2, r0, #24
 8001a64:	0201      	lsls	r1, r0, #8
 8001a66:	085e      	lsrs	r6, r3, #1
 8001a68:	1989      	adds	r1, r1, r6
 8001a6a:	417a      	adcs	r2, r7
 8001a6c:	0008      	movs	r0, r1
 8001a6e:	0011      	movs	r1, r2
 8001a70:	001a      	movs	r2, r3
 8001a72:	003b      	movs	r3, r7
 8001a74:	f7fe fcc8 	bl	8000408 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <UART_SetConfig+0x224>)
 8001a7a:	18c2      	adds	r2, r0, r3
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <UART_SetConfig+0x228>)
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d8cd      	bhi.n	8001a1e <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	003d      	movs	r5, r7
 8001a86:	60d8      	str	r0, [r3, #12]
 8001a88:	e7d9      	b.n	8001a3e <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001a8a:	f7ff fa47 	bl	8000f1c <HAL_RCC_GetSysClockFreq>
        break;
 8001a8e:	e7d3      	b.n	8001a38 <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001a90:	4846      	ldr	r0, [pc, #280]	; (8001bac <UART_SetConfig+0x22c>)
 8001a92:	e7dd      	b.n	8001a50 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a94:	f7ff fdba 	bl	800160c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a98:	6863      	ldr	r3, [r4, #4]
 8001a9a:	0040      	lsls	r0, r0, #1
 8001a9c:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a9e:	18c0      	adds	r0, r0, r3
 8001aa0:	6861      	ldr	r1, [r4, #4]
 8001aa2:	e00b      	b.n	8001abc <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001aa4:	f7ff fdc2 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8001aa8:	e7f6      	b.n	8001a98 <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001aaa:	2510      	movs	r5, #16
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <UART_SetConfig+0x210>)
 8001aae:	6861      	ldr	r1, [r4, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ab2:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ab4:	4015      	ands	r5, r2
 8001ab6:	d006      	beq.n	8001ac6 <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <UART_SetConfig+0x230>)
 8001aba:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001abc:	f7fe fb2e 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ac0:	2500      	movs	r5, #0
 8001ac2:	b283      	uxth	r3, r0
        break;
 8001ac4:	e004      	b.n	8001ad0 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <UART_SetConfig+0x234>)
 8001ac8:	18c0      	adds	r0, r0, r3
 8001aca:	f7fe fb27 	bl	800011c <__udivsi3>
 8001ace:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	4839      	ldr	r0, [pc, #228]	; (8001bb8 <UART_SetConfig+0x238>)
 8001ad4:	3910      	subs	r1, #16
 8001ad6:	4281      	cmp	r1, r0
 8001ad8:	d8a1      	bhi.n	8001a1e <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ada:	210f      	movs	r1, #15
 8001adc:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ade:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ae0:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ae2:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001ae4:	6821      	ldr	r1, [r4, #0]
 8001ae6:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001ae8:	60cb      	str	r3, [r1, #12]
 8001aea:	e7a8      	b.n	8001a3e <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001aec:	f7ff fa16 	bl	8000f1c <HAL_RCC_GetSysClockFreq>
 8001af0:	e7d2      	b.n	8001a98 <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	0858      	lsrs	r0, r3, #1
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	025b      	lsls	r3, r3, #9
 8001afa:	e7d0      	b.n	8001a9e <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8001afc:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e7e6      	b.n	8001ad0 <UART_SetConfig+0x150>
    switch (clocksource)
 8001b02:	2808      	cmp	r0, #8
 8001b04:	d837      	bhi.n	8001b76 <UART_SetConfig+0x1f6>
 8001b06:	f7fe faff 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001b0a:	0c05      	.short	0x0c05
 8001b0c:	362a360f 	.word	0x362a360f
 8001b10:	3636      	.short	0x3636
 8001b12:	2d          	.byte	0x2d
 8001b13:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b14:	f7ff fd7a 	bl	800160c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b18:	6863      	ldr	r3, [r4, #4]
 8001b1a:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	6861      	ldr	r1, [r4, #4]
 8001b20:	e00b      	b.n	8001b3a <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b22:	f7ff fd83 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8001b26:	e7f7      	b.n	8001b18 <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b28:	2510      	movs	r5, #16
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <UART_SetConfig+0x210>)
 8001b2c:	6861      	ldr	r1, [r4, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001b30:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b32:	4015      	ands	r5, r2
 8001b34:	d00d      	beq.n	8001b52 <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <UART_SetConfig+0x220>)
 8001b38:	18c0      	adds	r0, r0, r3
 8001b3a:	f7fe faef 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b3e:	2500      	movs	r5, #0
 8001b40:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b42:	0019      	movs	r1, r3
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <UART_SetConfig+0x238>)
 8001b46:	3910      	subs	r1, #16
 8001b48:	4281      	cmp	r1, r0
 8001b4a:	d900      	bls.n	8001b4e <UART_SetConfig+0x1ce>
 8001b4c:	e767      	b.n	8001a1e <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	e7ca      	b.n	8001ae8 <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <UART_SetConfig+0x22c>)
 8001b54:	18c0      	adds	r0, r0, r3
 8001b56:	f7fe fae1 	bl	800011c <__udivsi3>
 8001b5a:	b283      	uxth	r3, r0
 8001b5c:	e7f1      	b.n	8001b42 <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b5e:	f7ff f9dd 	bl	8000f1c <HAL_RCC_GetSysClockFreq>
 8001b62:	e7d9      	b.n	8001b18 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	0858      	lsrs	r0, r3, #1
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	e7d6      	b.n	8001b1c <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	4299      	cmp	r1, r3
 8001b74:	d0c2      	beq.n	8001afc <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 8001b76:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e7e2      	b.n	8001b42 <UART_SetConfig+0x1c2>
 8001b7c:	efff69f3 	.word	0xefff69f3
 8001b80:	ffffcfff 	.word	0xffffcfff
 8001b84:	40004800 	.word	0x40004800
 8001b88:	fffff4ff 	.word	0xfffff4ff
 8001b8c:	40013800 	.word	0x40013800
 8001b90:	40021000 	.word	0x40021000
 8001b94:	080026c1 	.word	0x080026c1
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	080026c5 	.word	0x080026c5
 8001ba0:	003d0900 	.word	0x003d0900
 8001ba4:	fffffd00 	.word	0xfffffd00
 8001ba8:	000ffcff 	.word	0x000ffcff
 8001bac:	00f42400 	.word	0x00f42400
 8001bb0:	007a1200 	.word	0x007a1200
 8001bb4:	01e84800 	.word	0x01e84800
 8001bb8:	0000ffef 	.word	0x0000ffef

08001bbc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001bbe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bc0:	07da      	lsls	r2, r3, #31
 8001bc2:	d506      	bpl.n	8001bd2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bc4:	6801      	ldr	r1, [r0, #0]
 8001bc6:	4c28      	ldr	r4, [pc, #160]	; (8001c68 <UART_AdvFeatureConfig+0xac>)
 8001bc8:	684a      	ldr	r2, [r1, #4]
 8001bca:	4022      	ands	r2, r4
 8001bcc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bce:	4322      	orrs	r2, r4
 8001bd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bd2:	079a      	lsls	r2, r3, #30
 8001bd4:	d506      	bpl.n	8001be4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bd6:	6801      	ldr	r1, [r0, #0]
 8001bd8:	4c24      	ldr	r4, [pc, #144]	; (8001c6c <UART_AdvFeatureConfig+0xb0>)
 8001bda:	684a      	ldr	r2, [r1, #4]
 8001bdc:	4022      	ands	r2, r4
 8001bde:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001be0:	4322      	orrs	r2, r4
 8001be2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001be4:	075a      	lsls	r2, r3, #29
 8001be6:	d506      	bpl.n	8001bf6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001be8:	6801      	ldr	r1, [r0, #0]
 8001bea:	4c21      	ldr	r4, [pc, #132]	; (8001c70 <UART_AdvFeatureConfig+0xb4>)
 8001bec:	684a      	ldr	r2, [r1, #4]
 8001bee:	4022      	ands	r2, r4
 8001bf0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bf6:	071a      	lsls	r2, r3, #28
 8001bf8:	d506      	bpl.n	8001c08 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bfa:	6801      	ldr	r1, [r0, #0]
 8001bfc:	4c1d      	ldr	r4, [pc, #116]	; (8001c74 <UART_AdvFeatureConfig+0xb8>)
 8001bfe:	684a      	ldr	r2, [r1, #4]
 8001c00:	4022      	ands	r2, r4
 8001c02:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c04:	4322      	orrs	r2, r4
 8001c06:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c08:	06da      	lsls	r2, r3, #27
 8001c0a:	d506      	bpl.n	8001c1a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c0c:	6801      	ldr	r1, [r0, #0]
 8001c0e:	4c1a      	ldr	r4, [pc, #104]	; (8001c78 <UART_AdvFeatureConfig+0xbc>)
 8001c10:	688a      	ldr	r2, [r1, #8]
 8001c12:	4022      	ands	r2, r4
 8001c14:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c16:	4322      	orrs	r2, r4
 8001c18:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c1a:	069a      	lsls	r2, r3, #26
 8001c1c:	d506      	bpl.n	8001c2c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c1e:	6801      	ldr	r1, [r0, #0]
 8001c20:	4c16      	ldr	r4, [pc, #88]	; (8001c7c <UART_AdvFeatureConfig+0xc0>)
 8001c22:	688a      	ldr	r2, [r1, #8]
 8001c24:	4022      	ands	r2, r4
 8001c26:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c28:	4322      	orrs	r2, r4
 8001c2a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c2c:	065a      	lsls	r2, r3, #25
 8001c2e:	d510      	bpl.n	8001c52 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c30:	6801      	ldr	r1, [r0, #0]
 8001c32:	4d13      	ldr	r5, [pc, #76]	; (8001c80 <UART_AdvFeatureConfig+0xc4>)
 8001c34:	684a      	ldr	r2, [r1, #4]
 8001c36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c38:	402a      	ands	r2, r5
 8001c3a:	4322      	orrs	r2, r4
 8001c3c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	0352      	lsls	r2, r2, #13
 8001c42:	4294      	cmp	r4, r2
 8001c44:	d105      	bne.n	8001c52 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c46:	684a      	ldr	r2, [r1, #4]
 8001c48:	4c0e      	ldr	r4, [pc, #56]	; (8001c84 <UART_AdvFeatureConfig+0xc8>)
 8001c4a:	4022      	ands	r2, r4
 8001c4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c4e:	4322      	orrs	r2, r4
 8001c50:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	d506      	bpl.n	8001c64 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c56:	6802      	ldr	r2, [r0, #0]
 8001c58:	490b      	ldr	r1, [pc, #44]	; (8001c88 <UART_AdvFeatureConfig+0xcc>)
 8001c5a:	6853      	ldr	r3, [r2, #4]
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6053      	str	r3, [r2, #4]
}
 8001c64:	bd30      	pop	{r4, r5, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	fffdffff 	.word	0xfffdffff
 8001c6c:	fffeffff 	.word	0xfffeffff
 8001c70:	fffbffff 	.word	0xfffbffff
 8001c74:	ffff7fff 	.word	0xffff7fff
 8001c78:	ffffefff 	.word	0xffffefff
 8001c7c:	ffffdfff 	.word	0xffffdfff
 8001c80:	ffefffff 	.word	0xffefffff
 8001c84:	ff9fffff 	.word	0xff9fffff
 8001c88:	fff7ffff 	.word	0xfff7ffff

08001c8c <UART_WaitOnFlagUntilTimeout>:
{
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	0004      	movs	r4, r0
 8001c90:	000e      	movs	r6, r1
 8001c92:	0015      	movs	r5, r2
 8001c94:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	69d3      	ldr	r3, [r2, #28]
 8001c9a:	4033      	ands	r3, r6
 8001c9c:	1b9b      	subs	r3, r3, r6
 8001c9e:	4259      	negs	r1, r3
 8001ca0:	414b      	adcs	r3, r1
 8001ca2:	42ab      	cmp	r3, r5
 8001ca4:	d001      	beq.n	8001caa <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	e01b      	b.n	8001ce2 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	9b06      	ldr	r3, [sp, #24]
 8001cac:	3301      	adds	r3, #1
 8001cae:	d0f3      	beq.n	8001c98 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb0:	f7fe fce8 	bl	8000684 <HAL_GetTick>
 8001cb4:	9b06      	ldr	r3, [sp, #24]
 8001cb6:	1bc0      	subs	r0, r0, r7
 8001cb8:	4283      	cmp	r3, r0
 8001cba:	d301      	bcc.n	8001cc0 <UART_WaitOnFlagUntilTimeout+0x34>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ea      	bne.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001cc6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	31a3      	adds	r1, #163	; 0xa3
 8001cd0:	31ff      	adds	r1, #255	; 0xff
 8001cd2:	438a      	bics	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001cda:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	3470      	adds	r4, #112	; 0x70
 8001ce0:	7023      	strb	r3, [r4, #0]
}
 8001ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce4:	fffffe5f 	.word	0xfffffe5f

08001ce8 <UART_CheckIdleState>:
{
 8001ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cea:	2600      	movs	r6, #0
{
 8001cec:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cee:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001cf0:	f7fe fcc8 	bl	8000684 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cf4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001cf6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	071b      	lsls	r3, r3, #28
 8001cfc:	d415      	bmi.n	8001d2a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	075b      	lsls	r3, r3, #29
 8001d04:	d50a      	bpl.n	8001d1c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <UART_CheckIdleState+0x5c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	03c9      	lsls	r1, r1, #15
 8001d10:	002b      	movs	r3, r5
 8001d12:	0020      	movs	r0, r4
 8001d14:	f7ff ffba 	bl	8001c8c <UART_WaitOnFlagUntilTimeout>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d111      	bne.n	8001d40 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001d1c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d1e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d20:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001d22:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001d24:	3470      	adds	r4, #112	; 0x70
 8001d26:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001d28:	e00b      	b.n	8001d42 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <UART_CheckIdleState+0x5c>)
 8001d2e:	0032      	movs	r2, r6
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	0389      	lsls	r1, r1, #14
 8001d34:	0003      	movs	r3, r0
 8001d36:	0020      	movs	r0, r4
 8001d38:	f7ff ffa8 	bl	8001c8c <UART_WaitOnFlagUntilTimeout>
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d0de      	beq.n	8001cfe <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001d40:	2003      	movs	r0, #3
}
 8001d42:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001d44:	01ffffff 	.word	0x01ffffff

08001d48 <HAL_UART_Init>:
{
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
}
 8001d50:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d52:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001d58:	0002      	movs	r2, r0
 8001d5a:	3270      	adds	r2, #112	; 0x70
 8001d5c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001d5e:	f000 fbb5 	bl	80024cc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d62:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001d64:	2101      	movs	r1, #1
 8001d66:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d68:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d6a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d6c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d6e:	438b      	bics	r3, r1
 8001d70:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d72:	f7ff fe05 	bl	8001980 <UART_SetConfig>
 8001d76:	2801      	cmp	r0, #1
 8001d78:	d0e9      	beq.n	8001d4e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001d80:	0020      	movs	r0, r4
 8001d82:	f7ff ff1b 	bl	8001bbc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <HAL_UART_Init+0x60>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001d8c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d90:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	438a      	bics	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001da2:	f7ff ffa1 	bl	8001ce8 <UART_CheckIdleState>
 8001da6:	e7d3      	b.n	8001d50 <HAL_UART_Init+0x8>
 8001da8:	ffffb7ff 	.word	0xffffb7ff

08001dac <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001dac:	4770      	bx	lr
	...

08001db0 <HR_APP_MODE>:
uint8_t MAX_BUFF = 100;
uint8_t num_samp = -1;


void HR_APP_MODE()
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
	  //HAL_Delay(10);
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET); //set MFIO LOW
 8001db2:	2680      	movs	r6, #128	; 0x80
 8001db4:	4d12      	ldr	r5, [pc, #72]	; (8001e00 <HR_APP_MODE+0x50>)
 8001db6:	0236      	lsls	r6, r6, #8
 8001db8:	0031      	movs	r1, r6
 8001dba:	0028      	movs	r0, r5
 8001dbc:	2200      	movs	r2, #0
	  HAL_Delay(10);
	  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_RESET); //set RSTN low for 10ms
 8001dbe:	4c11      	ldr	r4, [pc, #68]	; (8001e04 <HR_APP_MODE+0x54>)
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET); //set MFIO LOW
 8001dc0:	f7fe fdb0 	bl	8000924 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f7fe fc63 	bl	8000690 <HAL_Delay>
	  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_RESET); //set RSTN low for 10ms
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2120      	movs	r1, #32
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f7fe fda8 	bl	8000924 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f7fe fc5b 	bl	8000690 <HAL_Delay>
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_SET); //set MFIO high while RSTN is low
 8001dda:	0031      	movs	r1, r6
 8001ddc:	0028      	movs	r0, r5
 8001dde:	2201      	movs	r2, #1
 8001de0:	f7fe fda0 	bl	8000924 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8001de4:	2005      	movs	r0, #5
 8001de6:	f7fe fc53 	bl	8000690 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, HR_RESET_Pin, GPIO_PIN_SET); //return RSTN to its high state
 8001dea:	2201      	movs	r2, #1
 8001dec:	2120      	movs	r1, #32
 8001dee:	0020      	movs	r0, r4
 8001df0:	f7fe fd98 	bl	8000924 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);	//wait 1 second (in app mode after 50ms) - will have to replace with timer later
 8001df4:	20fa      	movs	r0, #250	; 0xfa
 8001df6:	0080      	lsls	r0, r0, #2
 8001df8:	f7fe fc4a 	bl	8000690 <HAL_Delay>
}
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	50000800 	.word	0x50000800
 8001e04:	50000400 	.word	0x50000400

08001e08 <HR_MFIO_SET>:




void HR_MFIO_SET()
{
 8001e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	2214      	movs	r2, #20
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a801      	add	r0, sp, #4
 8001e10:	f000 fc2d 	bl	800266e <memset>

	  //HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_SET);

	  GPIO_InitStruct.Pin = HR_MFIO_Pin;
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	9301      	str	r3, [sp, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HR_MFIO_SET+0x38>)
	  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	a901      	add	r1, sp, #4
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1e:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e20:	2302      	movs	r3, #2
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8001e22:	4808      	ldr	r0, [pc, #32]	; (8001e44 <HR_MFIO_SET+0x3c>)
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e24:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f7fe fcc7 	bl	80007b8 <HAL_GPIO_Init>

	  //enable the interrupt
	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2007      	movs	r0, #7
 8001e2e:	0011      	movs	r1, r2
 8001e30:	f7fe fc3e 	bl	80006b0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001e34:	2007      	movs	r0, #7
 8001e36:	f7fe fc6b 	bl	8000710 <HAL_NVIC_EnableIRQ>

}
 8001e3a:	b007      	add	sp, #28
 8001e3c:	bd00      	pop	{pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	10210000 	.word	0x10210000
 8001e44:	50000800 	.word	0x50000800

08001e48 <write_cmd>:
}



uint8_t write_cmd(uint8_t arr[], uint8_t size)
{
 8001e48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t receive_buff = -3;
 8001e4a:	250f      	movs	r5, #15
 8001e4c:	23fd      	movs	r3, #253	; 0xfd
{
 8001e4e:	0002      	movs	r2, r0

	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8001e50:	20fa      	movs	r0, #250	; 0xfa
	uint8_t receive_buff = -3;
 8001e52:	446d      	add	r5, sp
 8001e54:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8001e56:	4c18      	ldr	r4, [pc, #96]	; (8001eb8 <write_cmd+0x70>)
 8001e58:	b28b      	uxth	r3, r1
 8001e5a:	4918      	ldr	r1, [pc, #96]	; (8001ebc <write_cmd+0x74>)
 8001e5c:	0080      	lsls	r0, r0, #2
 8001e5e:	8809      	ldrh	r1, [r1, #0]
 8001e60:	9000      	str	r0, [sp, #0]
 8001e62:	0020      	movs	r0, r4
 8001e64:	f7fe fee2 	bl	8000c2c <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001e68:	0022      	movs	r2, r4
 8001e6a:	3241      	adds	r2, #65	; 0x41
 8001e6c:	7813      	ldrb	r3, [r2, #0]
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d1fc      	bne.n	8001e6c <write_cmd+0x24>
	HAL_I2C_Master_Receive(&hi2c1, readAddr, &receive_buff, sizeof(receive_buff), 1000);
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <write_cmd+0x78>)
 8001e74:	002a      	movs	r2, r5
 8001e76:	8819      	ldrh	r1, [r3, #0]
 8001e78:	23fa      	movs	r3, #250	; 0xfa
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	0020      	movs	r0, r4
 8001e80:	2301      	movs	r3, #1
 8001e82:	f7fe ff69 	bl	8000d58 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001e86:	0022      	movs	r2, r4
 8001e88:	3241      	adds	r2, #65	; 0x41
 8001e8a:	7813      	ldrb	r3, [r2, #0]
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d1fc      	bne.n	8001e8a <write_cmd+0x42>
	while(receive_buff == 0xFE)
	{
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001e90:	26fa      	movs	r6, #250	; 0xfa
 8001e92:	00b6      	lsls	r6, r6, #2
	while(receive_buff == 0xFE)
 8001e94:	7828      	ldrb	r0, [r5, #0]
 8001e96:	28fe      	cmp	r0, #254	; 0xfe
 8001e98:	d001      	beq.n	8001e9e <write_cmd+0x56>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}

	return receive_buff;
}
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 8001e9e:	002a      	movs	r2, r5
 8001ea0:	9600      	str	r6, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	21ab      	movs	r1, #171	; 0xab
 8001ea6:	0020      	movs	r0, r4
 8001ea8:	f7fe ff56 	bl	8000d58 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001eac:	0022      	movs	r2, r4
 8001eae:	3241      	adds	r2, #65	; 0x41
 8001eb0:	7813      	ldrb	r3, [r2, #0]
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d1fc      	bne.n	8001eb0 <write_cmd+0x68>
 8001eb6:	e7ed      	b.n	8001e94 <write_cmd+0x4c>
 8001eb8:	20000038 	.word	0x20000038
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	20000002 	.word	0x20000002

08001ec4 <HR_INIT>:
{
 8001ec4:	b510      	push	{r4, lr}
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x02};
 8001ec6:	4c26      	ldr	r4, [pc, #152]	; (8001f60 <HR_INIT+0x9c>)
{
 8001ec8:	b086      	sub	sp, #24
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x02};
 8001eca:	0021      	movs	r1, r4
 8001ecc:	2203      	movs	r2, #3
 8001ece:	310d      	adds	r1, #13
 8001ed0:	a801      	add	r0, sp, #4
 8001ed2:	f000 fbc3 	bl	800265c <memcpy>
	if(write_cmd(arr_1_2, sizeof(arr_1_2)) != 0x00)
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	a801      	add	r0, sp, #4
 8001eda:	f7ff ffb5 	bl	8001e48 <write_cmd>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d003      	beq.n	8001eea <HR_INIT+0x26>
		return 1;
 8001ee2:	2401      	movs	r4, #1
}
 8001ee4:	0020      	movs	r0, r4
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd10      	pop	{r4, pc}
	uint8_t arr_1_3[3] = {0x10, 0x01, 0x05};
 8001eea:	0021      	movs	r1, r4
 8001eec:	2203      	movs	r2, #3
 8001eee:	3110      	adds	r1, #16
 8001ef0:	a802      	add	r0, sp, #8
 8001ef2:	f000 fbb3 	bl	800265c <memcpy>
	if(write_cmd(arr_1_3, sizeof(arr_1_3)) != 0x00)
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	a802      	add	r0, sp, #8
 8001efa:	f7ff ffa5 	bl	8001e48 <write_cmd>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d1ef      	bne.n	8001ee2 <HR_INIT+0x1e>
	uint8_t arr_1_4[3] = {0x52, 0x00, 0x01};
 8001f02:	0021      	movs	r1, r4
 8001f04:	2203      	movs	r2, #3
 8001f06:	3113      	adds	r1, #19
 8001f08:	a803      	add	r0, sp, #12
 8001f0a:	f000 fba7 	bl	800265c <memcpy>
	if(write_cmd(arr_1_4, sizeof(arr_1_4)) != 0x00)
 8001f0e:	2103      	movs	r1, #3
 8001f10:	a803      	add	r0, sp, #12
 8001f12:	f7ff ff99 	bl	8001e48 <write_cmd>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d1e3      	bne.n	8001ee2 <HR_INIT+0x1e>
	HAL_Delay(20);
 8001f1a:	3014      	adds	r0, #20
 8001f1c:	f7fe fbb8 	bl	8000690 <HAL_Delay>
	uint8_t arr_1_6[3] = {0x44, 0x03, 0x01};
 8001f20:	0021      	movs	r1, r4
 8001f22:	2203      	movs	r2, #3
 8001f24:	3116      	adds	r1, #22
 8001f26:	a804      	add	r0, sp, #16
 8001f28:	f000 fb98 	bl	800265c <memcpy>
	if(write_cmd(arr_1_6, sizeof(arr_1_6)) != 0x00)
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	a804      	add	r0, sp, #16
 8001f30:	f7ff ff8a 	bl	8001e48 <write_cmd>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d1d4      	bne.n	8001ee2 <HR_INIT+0x1e>
	HAL_Delay(40);
 8001f38:	3028      	adds	r0, #40	; 0x28
 8001f3a:	f7fe fba9 	bl	8000690 <HAL_Delay>
	uint8_t arr_1_7[3] = {0x52, 0x02, 0x01};
 8001f3e:	0021      	movs	r1, r4
 8001f40:	2203      	movs	r2, #3
 8001f42:	3119      	adds	r1, #25
 8001f44:	a805      	add	r0, sp, #20
 8001f46:	f000 fb89 	bl	800265c <memcpy>
	if(write_cmd(arr_1_7, sizeof(arr_1_7)) != 0x00)
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	a805      	add	r0, sp, #20
 8001f4e:	f7ff ff7b 	bl	8001e48 <write_cmd>
 8001f52:	1e04      	subs	r4, r0, #0
 8001f54:	d1c5      	bne.n	8001ee2 <HR_INIT+0x1e>
	HAL_Delay(40);
 8001f56:	2028      	movs	r0, #40	; 0x28
 8001f58:	f7fe fb9a 	bl	8000690 <HAL_Delay>
	return 0;
 8001f5c:	e7c2      	b.n	8001ee4 <HR_INIT+0x20>
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	08002698 	.word	0x08002698

08001f64 <read_cmd>:


void read_cmd(uint8_t arr[], uint8_t size, uint8_t * receive_buff)
{
 8001f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8001f66:	25fa      	movs	r5, #250	; 0xfa
 8001f68:	4c17      	ldr	r4, [pc, #92]	; (8001fc8 <read_cmd+0x64>)
{
 8001f6a:	0016      	movs	r6, r2
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <read_cmd+0x68>)
 8001f6e:	00ad      	lsls	r5, r5, #2
 8001f70:	b28b      	uxth	r3, r1
 8001f72:	8811      	ldrh	r1, [r2, #0]
 8001f74:	0002      	movs	r2, r0
 8001f76:	9500      	str	r5, [sp, #0]
 8001f78:	0020      	movs	r0, r4
 8001f7a:	f7fe fe57 	bl	8000c2c <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001f7e:	0022      	movs	r2, r4
 8001f80:	3241      	adds	r2, #65	; 0x41
 8001f82:	7813      	ldrb	r3, [r2, #0]
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d1fc      	bne.n	8001f82 <read_cmd+0x1e>
	HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_buff, sizeof(receive_buff), 1000);
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <read_cmd+0x6c>)
 8001f8a:	0032      	movs	r2, r6
 8001f8c:	8819      	ldrh	r1, [r3, #0]
 8001f8e:	0020      	movs	r0, r4
 8001f90:	9500      	str	r5, [sp, #0]
 8001f92:	2304      	movs	r3, #4
 8001f94:	f7fe fee0 	bl	8000d58 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001f98:	0022      	movs	r2, r4
 8001f9a:	3241      	adds	r2, #65	; 0x41
 8001f9c:	7813      	ldrb	r3, [r2, #0]
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d1fc      	bne.n	8001f9c <read_cmd+0x38>
	while(receive_buff[0] == 0xFE)
	{
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, receive_buff, sizeof(receive_buff), 1000);
 8001fa2:	25fa      	movs	r5, #250	; 0xfa
 8001fa4:	00ad      	lsls	r5, r5, #2
	while(receive_buff[0] == 0xFE)
 8001fa6:	7833      	ldrb	r3, [r6, #0]
 8001fa8:	2bfe      	cmp	r3, #254	; 0xfe
 8001faa:	d000      	beq.n	8001fae <read_cmd+0x4a>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}
}
 8001fac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, receive_buff, sizeof(receive_buff), 1000);
 8001fae:	0032      	movs	r2, r6
 8001fb0:	9500      	str	r5, [sp, #0]
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	21ab      	movs	r1, #171	; 0xab
 8001fb6:	0020      	movs	r0, r4
 8001fb8:	f7fe fece 	bl	8000d58 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8001fbc:	0022      	movs	r2, r4
 8001fbe:	3241      	adds	r2, #65	; 0x41
 8001fc0:	7813      	ldrb	r3, [r2, #0]
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d1fc      	bne.n	8001fc0 <read_cmd+0x5c>
 8001fc6:	e7ee      	b.n	8001fa6 <read_cmd+0x42>
 8001fc8:	20000038 	.word	0x20000038
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	20000002 	.word	0x20000002

08001fd4 <shut30101>:
{
 8001fd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t arr_shut[3] = {0x41, 0x03, 0x09};
 8001fd6:	4e13      	ldr	r6, [pc, #76]	; (8002024 <shut30101+0x50>)
 8001fd8:	2503      	movs	r5, #3
 8001fda:	0031      	movs	r1, r6
 8001fdc:	002a      	movs	r2, r5
 8001fde:	3122      	adds	r1, #34	; 0x22
 8001fe0:	a802      	add	r0, sp, #8
 8001fe2:	f000 fb3b 	bl	800265c <memcpy>
	uint8_t received[2] = {-3, -3};
 8001fe6:	0031      	movs	r1, r6
 8001fe8:	ac01      	add	r4, sp, #4
 8001fea:	3125      	adds	r1, #37	; 0x25
 8001fec:	2202      	movs	r2, #2
 8001fee:	0020      	movs	r0, r4
 8001ff0:	f000 fb34 	bl	800265c <memcpy>
	read_cmd(arr_shut, sizeof(arr_shut), received);
 8001ff4:	0022      	movs	r2, r4
 8001ff6:	0029      	movs	r1, r5
 8001ff8:	a802      	add	r0, sp, #8
 8001ffa:	f7ff ffb3 	bl	8001f64 <read_cmd>
	if(received[0] != 0x00)
 8001ffe:	7823      	ldrb	r3, [r4, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <shut30101+0x4c>
	received[1] = received[1]  | (1<<7);
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	7863      	ldrb	r3, [r4, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002008:	a803      	add	r0, sp, #12
	received[1] = received[1]  | (1<<7);
 800200a:	4313      	orrs	r3, r2
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 800200c:	3a40      	subs	r2, #64	; 0x40
 800200e:	7002      	strb	r2, [r0, #0]
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 8002010:	2104      	movs	r1, #4
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002012:	3a37      	subs	r2, #55	; 0x37
	received[1] = received[1]  | (1<<7);
 8002014:	7063      	strb	r3, [r4, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002016:	7045      	strb	r5, [r0, #1]
 8002018:	7082      	strb	r2, [r0, #2]
 800201a:	70c3      	strb	r3, [r0, #3]
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 800201c:	f7ff ff14 	bl	8001e48 <write_cmd>
}
 8002020:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	08002698 	.word	0x08002698

08002028 <start30101>:
{
 8002028:	b530      	push	{r4, r5, lr}
	uint8_t arr_shut[3] = {0x41, 0x03, 0x09};
 800202a:	4d1b      	ldr	r5, [pc, #108]	; (8002098 <start30101+0x70>)
 800202c:	2403      	movs	r4, #3
 800202e:	0029      	movs	r1, r5
{
 8002030:	b085      	sub	sp, #20
	uint8_t arr_shut[3] = {0x41, 0x03, 0x09};
 8002032:	3122      	adds	r1, #34	; 0x22
 8002034:	0022      	movs	r2, r4
 8002036:	a801      	add	r0, sp, #4
 8002038:	f000 fb10 	bl	800265c <memcpy>
	uint8_t received[2] = {-3, -3};
 800203c:	0029      	movs	r1, r5
 800203e:	2202      	movs	r2, #2
 8002040:	3125      	adds	r1, #37	; 0x25
 8002042:	4668      	mov	r0, sp
 8002044:	f000 fb0a 	bl	800265c <memcpy>
	read_cmd(arr_shut, sizeof(arr_shut), received);
 8002048:	466a      	mov	r2, sp
 800204a:	0021      	movs	r1, r4
 800204c:	a801      	add	r0, sp, #4
 800204e:	f7ff ff89 	bl	8001f64 <read_cmd>
	if(received[0] != 0x00)
 8002052:	466b      	mov	r3, sp
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11b      	bne.n	8002092 <start30101+0x6a>
	received[1] = (received[1]  & (~(1<<7)));
 800205a:	466b      	mov	r3, sp
 800205c:	227f      	movs	r2, #127	; 0x7f
 800205e:	785b      	ldrb	r3, [r3, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002060:	a803      	add	r0, sp, #12
	received[1] = (received[1]  & (~(1<<7)));
 8002062:	4013      	ands	r3, r2
 8002064:	466a      	mov	r2, sp
 8002066:	7053      	strb	r3, [r2, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002068:	2240      	movs	r2, #64	; 0x40
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 800206a:	2104      	movs	r1, #4
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 800206c:	7002      	strb	r2, [r0, #0]
 800206e:	3a37      	subs	r2, #55	; 0x37
 8002070:	7044      	strb	r4, [r0, #1]
 8002072:	7082      	strb	r2, [r0, #2]
 8002074:	70c3      	strb	r3, [r0, #3]
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 8002076:	f7ff fee7 	bl	8001e48 <write_cmd>
 800207a:	2800      	cmp	r0, #0
 800207c:	d109      	bne.n	8002092 <start30101+0x6a>
	uint8_t arr_1_7[3] = {0x52, 0x02, 0x01};
 800207e:	0029      	movs	r1, r5
 8002080:	0022      	movs	r2, r4
 8002082:	3119      	adds	r1, #25
 8002084:	a802      	add	r0, sp, #8
 8002086:	f000 fae9 	bl	800265c <memcpy>
	if(write_cmd(arr_1_7, sizeof(arr_1_7)) != 0x00)
 800208a:	0021      	movs	r1, r4
 800208c:	a802      	add	r0, sp, #8
 800208e:	f7ff fedb 	bl	8001e48 <write_cmd>
}
 8002092:	b005      	add	sp, #20
 8002094:	bd30      	pop	{r4, r5, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	08002698 	.word	0x08002698

0800209c <fill_buff>:


void fill_buff(uint8_t arr[], uint8_t size, uint8_t * receive_buff)
{
 800209c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800209e:	0015      	movs	r5, r2
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <fill_buff+0x4c>)
 80020a2:	b28b      	uxth	r3, r1
 80020a4:	8811      	ldrh	r1, [r2, #0]
 80020a6:	22fa      	movs	r2, #250	; 0xfa
 80020a8:	4c10      	ldr	r4, [pc, #64]	; (80020ec <fill_buff+0x50>)
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	0002      	movs	r2, r0
 80020b0:	0020      	movs	r0, r4
 80020b2:	f7fe fdbb 	bl	8000c2c <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80020b6:	0022      	movs	r2, r4
 80020b8:	3241      	adds	r2, #65	; 0x41
 80020ba:	7813      	ldrb	r3, [r2, #0]
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d1fc      	bne.n	80020ba <fill_buff+0x1e>

	HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_buff, ((num_samp * 6) + 1), 1000);
 80020c0:	2206      	movs	r2, #6
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <fill_buff+0x54>)
 80020c4:	0020      	movs	r0, r4
 80020c6:	781b      	ldrb	r3, [r3, #0]
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80020c8:	3441      	adds	r4, #65	; 0x41
	HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_buff, ((num_samp * 6) + 1), 1000);
 80020ca:	4353      	muls	r3, r2
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <fill_buff+0x58>)
 80020ce:	3301      	adds	r3, #1
 80020d0:	8811      	ldrh	r1, [r2, #0]
 80020d2:	22fa      	movs	r2, #250	; 0xfa
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	002a      	movs	r2, r5
 80020da:	f7fe fe3d 	bl	8000d58 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80020de:	7823      	ldrb	r3, [r4, #0]
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d1fc      	bne.n	80020de <fill_buff+0x42>
	{
		HAL_I2C_Master_Receive(&hi2c1, readAddr, &receive_buff[i], 1, 1000);
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}
	*/
}
 80020e4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000038 	.word	0x20000038
 80020f0:	20000001 	.word	0x20000001
 80020f4:	20000002 	.word	0x20000002

080020f8 <HR_READ>:
	uint8_t arr_2_1[2] = {0x00, 0x00};
 80020f8:	2300      	movs	r3, #0
{
 80020fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t received[2] = {-3, -3};
 80020fc:	4e47      	ldr	r6, [pc, #284]	; (800221c <HR_READ+0x124>)
{
 80020fe:	b089      	sub	sp, #36	; 0x24
	uint8_t received[2] = {-3, -3};
 8002100:	ad02      	add	r5, sp, #8
 8002102:	3625      	adds	r6, #37	; 0x25
	uint8_t arr_2_1[2] = {0x00, 0x00};
 8002104:	af01      	add	r7, sp, #4
	uint8_t received[2] = {-3, -3};
 8002106:	2202      	movs	r2, #2
 8002108:	0031      	movs	r1, r6
{
 800210a:	0004      	movs	r4, r0
	uint8_t received[2] = {-3, -3};
 800210c:	0028      	movs	r0, r5
	uint8_t arr_2_1[2] = {0x00, 0x00};
 800210e:	703b      	strb	r3, [r7, #0]
 8002110:	707b      	strb	r3, [r7, #1]
	uint8_t received[2] = {-3, -3};
 8002112:	f000 faa3 	bl	800265c <memcpy>
	read_cmd(arr_2_1, sizeof(arr_2_1), received);
 8002116:	002a      	movs	r2, r5
 8002118:	2102      	movs	r1, #2
 800211a:	0038      	movs	r0, r7
 800211c:	f7ff ff22 	bl	8001f64 <read_cmd>
	if(received[0] != 0x00)
 8002120:	782b      	ldrb	r3, [r5, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d15d      	bne.n	80021e2 <HR_READ+0xea>
	if(received[1] == 0x08)
 8002126:	786a      	ldrb	r2, [r5, #1]
 8002128:	2a08      	cmp	r2, #8
 800212a:	d15a      	bne.n	80021e2 <HR_READ+0xea>
		uint8_t arr_2_2[2] = {0x12, 0x00};
 800212c:	af03      	add	r7, sp, #12
		uint8_t received[2] = {-3, -3};
 800212e:	ad04      	add	r5, sp, #16
		uint8_t arr_2_2[2] = {0x12, 0x00};
 8002130:	320a      	adds	r2, #10
 8002132:	703a      	strb	r2, [r7, #0]
		uint8_t received[2] = {-3, -3};
 8002134:	0031      	movs	r1, r6
 8002136:	2202      	movs	r2, #2
 8002138:	0028      	movs	r0, r5
		uint8_t arr_2_2[2] = {0x12, 0x00};
 800213a:	707b      	strb	r3, [r7, #1]
		uint8_t received[2] = {-3, -3};
 800213c:	f000 fa8e 	bl	800265c <memcpy>
		read_cmd(arr_2_2, sizeof(arr_2_2), received);
 8002140:	0038      	movs	r0, r7
 8002142:	002a      	movs	r2, r5
 8002144:	2102      	movs	r1, #2
 8002146:	f7ff ff0d 	bl	8001f64 <read_cmd>
		if(received[0] != 0x00)
 800214a:	782f      	ldrb	r7, [r5, #0]
 800214c:	2f00      	cmp	r7, #0
 800214e:	d148      	bne.n	80021e2 <HR_READ+0xea>
		num_samp = received[1];
 8002150:	786a      	ldrb	r2, [r5, #1]
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HR_READ+0x128>)
		uint8_t arr_2_3[2] = {0x12, 0x01};
 8002154:	4931      	ldr	r1, [pc, #196]	; (800221c <HR_READ+0x124>)
		num_samp = received[1];
 8002156:	701a      	strb	r2, [r3, #0]
		uint8_t arr_2_3[2] = {0x12, 0x01};
 8002158:	3127      	adds	r1, #39	; 0x27
 800215a:	2202      	movs	r2, #2
 800215c:	a805      	add	r0, sp, #20
 800215e:	f000 fa7d 	bl	800265c <memcpy>
		fill_buff(arr_2_3, sizeof(arr_2_3), data);
 8002162:	0022      	movs	r2, r4
 8002164:	2102      	movs	r1, #2
 8002166:	a805      	add	r0, sp, #20
 8002168:	f7ff ff98 	bl	800209c <fill_buff>
		uint8_t arr_chk[2] = {0x12, 0x00};
 800216c:	2312      	movs	r3, #18
 800216e:	ad06      	add	r5, sp, #24
 8002170:	706f      	strb	r7, [r5, #1]
		uint8_t received4[2] = {-3, -3};
 8002172:	af07      	add	r7, sp, #28
 8002174:	2202      	movs	r2, #2
 8002176:	0031      	movs	r1, r6
 8002178:	0038      	movs	r0, r7
		uint8_t arr_chk[2] = {0x12, 0x00};
 800217a:	702b      	strb	r3, [r5, #0]
		uint8_t received4[2] = {-3, -3};
 800217c:	f000 fa6e 	bl	800265c <memcpy>
		read_cmd(arr_chk, sizeof(arr_chk), received4);
 8002180:	003a      	movs	r2, r7
 8002182:	2102      	movs	r1, #2
 8002184:	0028      	movs	r0, r5
 8002186:	f7ff feed 	bl	8001f64 <read_cmd>
		if(received4[0] != 0x00)
 800218a:	783b      	ldrb	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d128      	bne.n	80021e2 <HR_READ+0xea>
		if(MAX_BUFF == 7)
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HR_READ+0x12c>)
 8002192:	4e25      	ldr	r6, [pc, #148]	; (8002228 <HR_READ+0x130>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4f25      	ldr	r7, [pc, #148]	; (800222c <HR_READ+0x134>)
 8002198:	4d25      	ldr	r5, [pc, #148]	; (8002230 <HR_READ+0x138>)
 800219a:	2b07      	cmp	r3, #7
 800219c:	d124      	bne.n	80021e8 <HR_READ+0xf0>
				heartrate  = ((((uint16_t) data[1]) << 8) | (data[2])) / 10;
 800219e:	7860      	ldrb	r0, [r4, #1]
 80021a0:	78a3      	ldrb	r3, [r4, #2]
 80021a2:	0200      	lsls	r0, r0, #8
 80021a4:	4318      	orrs	r0, r3
 80021a6:	210a      	movs	r1, #10
 80021a8:	f7fe f842 	bl	8000230 <__divsi3>
				HR_conf    =  data[3];
 80021ac:	78e3      	ldrb	r3, [r4, #3]
				heartrate  = ((((uint16_t) data[1]) << 8) | (data[2])) / 10;
 80021ae:	8030      	strh	r0, [r6, #0]
				spo2  = ((((uint16_t) data[4]) << 8) | (data[5])) / 10;
 80021b0:	7920      	ldrb	r0, [r4, #4]
				HR_conf    =  data[3];
 80021b2:	703b      	strb	r3, [r7, #0]
				spo2  = ((((uint16_t) data[4]) << 8) | (data[5])) / 10;
 80021b4:	7963      	ldrb	r3, [r4, #5]
 80021b6:	0200      	lsls	r0, r0, #8
 80021b8:	4318      	orrs	r0, r3
 80021ba:	210a      	movs	r1, #10
 80021bc:	f7fe f838 	bl	8000230 <__divsi3>
				alg_state  =  data[6];
 80021c0:	79a3      	ldrb	r3, [r4, #6]
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HR_READ+0x13c>)
				spo2  = ((((uint16_t) data[4]) << 8) | (data[5])) / 10;
 80021c4:	8028      	strh	r0, [r5, #0]
				alg_state  =  data[6];
 80021c6:	7013      	strb	r3, [r2, #0]
		if(((heartrate > 50) && (heartrate < 255)) && ((spo2 > 50) && (spo2 < 101)))
 80021c8:	8833      	ldrh	r3, [r6, #0]
 80021ca:	3b33      	subs	r3, #51	; 0x33
 80021cc:	2bcb      	cmp	r3, #203	; 0xcb
 80021ce:	d808      	bhi.n	80021e2 <HR_READ+0xea>
 80021d0:	882b      	ldrh	r3, [r5, #0]
 80021d2:	3b33      	subs	r3, #51	; 0x33
 80021d4:	2b31      	cmp	r3, #49	; 0x31
 80021d6:	d804      	bhi.n	80021e2 <HR_READ+0xea>
			shut30101();
 80021d8:	f7ff fefc 	bl	8001fd4 <shut30101>
			read_flag = 3;
 80021dc:	2203      	movs	r2, #3
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HR_READ+0x140>)
 80021e0:	701a      	strb	r2, [r3, #0]
}
 80021e2:	2001      	movs	r0, #1
 80021e4:	b009      	add	sp, #36	; 0x24
 80021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			heartrate  = ((((uint16_t) data[13]) << 8) | (data[14])) / 10;
 80021e8:	7b60      	ldrb	r0, [r4, #13]
 80021ea:	7ba3      	ldrb	r3, [r4, #14]
 80021ec:	0200      	lsls	r0, r0, #8
 80021ee:	4318      	orrs	r0, r3
 80021f0:	210a      	movs	r1, #10
 80021f2:	f7fe f81d 	bl	8000230 <__divsi3>
			HR_conf    =  data[15];
 80021f6:	7be3      	ldrb	r3, [r4, #15]
			heartrate  = ((((uint16_t) data[13]) << 8) | (data[14])) / 10;
 80021f8:	8030      	strh	r0, [r6, #0]
			spo2  = ((((uint16_t) data[16]) << 8) | (data[17])) / 10;
 80021fa:	7c20      	ldrb	r0, [r4, #16]
			HR_conf    =  data[15];
 80021fc:	703b      	strb	r3, [r7, #0]
			spo2  = ((((uint16_t) data[16]) << 8) | (data[17])) / 10;
 80021fe:	7c63      	ldrb	r3, [r4, #17]
 8002200:	0200      	lsls	r0, r0, #8
 8002202:	4318      	orrs	r0, r3
 8002204:	210a      	movs	r1, #10
 8002206:	f7fe f813 	bl	8000230 <__divsi3>
			alg_state  =  data[18];
 800220a:	7ca3      	ldrb	r3, [r4, #18]
 800220c:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HR_READ+0x13c>)
			spo2  = ((((uint16_t) data[16]) << 8) | (data[17])) / 10;
 800220e:	8028      	strh	r0, [r5, #0]
			alg_state  =  data[18];
 8002210:	7013      	strb	r3, [r2, #0]
			alg_status =  data[19];
 8002212:	7ce2      	ldrb	r2, [r4, #19]
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HR_READ+0x144>)
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e7d6      	b.n	80021c8 <HR_READ+0xd0>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	08002698 	.word	0x08002698
 8002220:	20000001 	.word	0x20000001
 8002224:	20000000 	.word	0x20000000
 8002228:	2000002c 	.word	0x2000002c
 800222c:	20000028 	.word	0x20000028
 8002230:	20000030 	.word	0x20000030
 8002234:	20000029 	.word	0x20000029
 8002238:	2000002e 	.word	0x2000002e
 800223c:	2000002a 	.word	0x2000002a

08002240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002240:	b510      	push	{r4, lr}
 8002242:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002244:	2238      	movs	r2, #56	; 0x38
 8002246:	2100      	movs	r1, #0
 8002248:	a80e      	add	r0, sp, #56	; 0x38
 800224a:	f000 fa10 	bl	800266e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224e:	2214      	movs	r2, #20
 8002250:	2100      	movs	r1, #0
 8002252:	4668      	mov	r0, sp
 8002254:	f000 fa0b 	bl	800266e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002258:	2224      	movs	r2, #36	; 0x24
 800225a:	2100      	movs	r1, #0
 800225c:	a805      	add	r0, sp, #20
 800225e:	f000 fa06 	bl	800266e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002262:	4914      	ldr	r1, [pc, #80]	; (80022b4 <SystemClock_Config+0x74>)
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <SystemClock_Config+0x78>)
 8002266:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002268:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800226a:	401a      	ands	r2, r3
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002274:	2310      	movs	r3, #16
 8002276:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002278:	3b0f      	subs	r3, #15
 800227a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800227c:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227e:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002284:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002286:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002288:	f7fe fe84 	bl	8000f94 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800228e:	0021      	movs	r1, r4
 8002290:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002294:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002296:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002298:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800229a:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800229c:	f7ff f8fe 	bl	800149c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80022a0:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80022a4:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022a6:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022a8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	f7ff f9cf 	bl	800164c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80022ae:	b01c      	add	sp, #112	; 0x70
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40007000 	.word	0x40007000
 80022b8:	ffffe7ff 	.word	0xffffe7ff

080022bc <main>:
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	b088      	sub	sp, #32
  HAL_Init();
 80022c0:	f7fe f9c4 	bl	800064c <HAL_Init>
  SystemClock_Config();
 80022c4:	f7ff ffbc 	bl	8002240 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	2214      	movs	r2, #20
 80022ca:	2100      	movs	r1, #0
 80022cc:	a803      	add	r0, sp, #12
 80022ce:	f000 f9ce 	bl	800266e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d2:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <main+0x12c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin|HR_MFIO_Pin, GPIO_PIN_RESET);
 80022d8:	24a0      	movs	r4, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin|HR_MFIO_Pin, GPIO_PIN_RESET);
 80022dc:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	4301      	orrs	r1, r0
 80022e0:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e6:	4002      	ands	r2, r0
 80022e8:	9200      	str	r2, [sp, #0]
 80022ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin|HR_MFIO_Pin, GPIO_PIN_RESET);
 80022ee:	483f      	ldr	r0, [pc, #252]	; (80023ec <main+0x130>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4332      	orrs	r2, r6
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f6:	4032      	ands	r2, r6
 80022f8:	9201      	str	r2, [sp, #4]
 80022fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fe:	430a      	orrs	r2, r1
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin|HR_MFIO_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	400b      	ands	r3, r1
 8002308:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin|HR_MFIO_Pin, GPIO_PIN_RESET);
 800230a:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin|HR_MFIO_Pin, GPIO_PIN_RESET);
 800230e:	f7fe fb09 	bl	8000924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_SET);
 8002312:	0032      	movs	r2, r6
 8002314:	2120      	movs	r1, #32
 8002316:	4836      	ldr	r0, [pc, #216]	; (80023f0 <main+0x134>)
 8002318:	f7fe fb04 	bl	8000924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HR_func_flag_Pin HR_MFIO_Pin */
  GPIO_InitStruct.Pin = HR_func_flag_Pin|HR_MFIO_Pin;
 800231c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002320:	a903      	add	r1, sp, #12
 8002322:	4832      	ldr	r0, [pc, #200]	; (80023ec <main+0x130>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232a:	f7fe fa45 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIO_BLUE_GPIO_Port, &GPIO_InitStruct);
 800232e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <main+0x138>)
  HAL_GPIO_Init(GPIO_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002332:	a903      	add	r1, sp, #12
 8002334:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002336:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_BLUE_Pin;
 8002338:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIO_BLUE_GPIO_Port, &GPIO_InitStruct);
 800233c:	f7fe fa3c 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_RESET_Pin */
  GPIO_InitStruct.Pin = HR_RESET_Pin;
 8002340:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HR_RESET_GPIO_Port, &GPIO_InitStruct);
 8002342:	a903      	add	r1, sp, #12
 8002344:	482a      	ldr	r0, [pc, #168]	; (80023f0 <main+0x134>)
  GPIO_InitStruct.Pin = HR_RESET_Pin;
 8002346:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(HR_RESET_GPIO_Port, &GPIO_InitStruct);
 800234e:	f7fe fa33 	bl	80007b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002352:	0022      	movs	r2, r4
 8002354:	0021      	movs	r1, r4
 8002356:	2005      	movs	r0, #5
 8002358:	f7fe f9aa 	bl	80006b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800235c:	2005      	movs	r0, #5
 800235e:	f7fe f9d7 	bl	8000710 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8002362:	4d25      	ldr	r5, [pc, #148]	; (80023f8 <main+0x13c>)
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <main+0x140>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002366:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8002368:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00000708;
 800236a:	23e1      	movs	r3, #225	; 0xe1
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	606b      	str	r3, [r5, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002370:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002372:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002374:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002376:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002378:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800237a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800237e:	f7fe fbff 	bl	8000b80 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002382:	0021      	movs	r1, r4
 8002384:	0028      	movs	r0, r5
 8002386:	f7fe fd7f 	bl	8000e88 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800238a:	0021      	movs	r1, r4
 800238c:	0028      	movs	r0, r5
 800238e:	f7fe fda1 	bl	8000ed4 <HAL_I2CEx_ConfigDigitalFilter>
  huart1.Instance = USART1;
 8002392:	481b      	ldr	r0, [pc, #108]	; (8002400 <main+0x144>)
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <main+0x148>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 8002398:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800239a:	2396      	movs	r3, #150	; 0x96
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a2:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a4:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023a6:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a8:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023aa:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ac:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ae:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b0:	f7ff fcca 	bl	8001d48 <HAL_UART_Init>
	HR_APP_MODE(); //call function to put module in application mode
 80023b4:	f7ff fcfc 	bl	8001db0 <HR_APP_MODE>
	if(HR_INIT() == 1) //equals 1 means initialization failed - do something? make while loop that runs until it isnt 0?
 80023b8:	f7ff fd84 	bl	8001ec4 <HR_INIT>
 80023bc:	42b0      	cmp	r0, r6
 80023be:	d100      	bne.n	80023c2 <main+0x106>
 		asm("NOP");
 80023c0:	46c0      	nop			; (mov r8, r8)
		  HAL_Delay(1000);
 80023c2:	24fa      	movs	r4, #250	; 0xfa
	HR_MFIO_SET();
 80023c4:	f7ff fd20 	bl	8001e08 <HR_MFIO_SET>
		  HAL_Delay(1000);
 80023c8:	00a4      	lsls	r4, r4, #2
	  if(read_flag == 3)
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <main+0x14c>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	2a03      	cmp	r2, #3
 80023d0:	d106      	bne.n	80023e0 <main+0x124>
		  read_flag = 0;
 80023d2:	2200      	movs	r2, #0
		  HAL_Delay(1000);
 80023d4:	0020      	movs	r0, r4
		  read_flag = 0;
 80023d6:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 80023d8:	f7fe f95a 	bl	8000690 <HAL_Delay>
		  start30101();
 80023dc:	f7ff fe24 	bl	8002028 <start30101>
	HAL_Delay(10);
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7fe f955 	bl	8000690 <HAL_Delay>
	  if(read_flag == 3)
 80023e6:	e7f0      	b.n	80023ca <main+0x10e>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	50000800 	.word	0x50000800
 80023f0:	50000400 	.word	0x50000400
 80023f4:	10210000 	.word	0x10210000
 80023f8:	20000038 	.word	0x20000038
 80023fc:	40005400 	.word	0x40005400
 8002400:	20000084 	.word	0x20000084
 8002404:	40013800 	.word	0x40013800
 8002408:	2000002e 	.word	0x2000002e

0800240c <EXTI4_15_IRQHandler>:



void EXTI4_15_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 800240c:	2080      	movs	r0, #128	; 0x80
{
 800240e:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 8002410:	0200      	lsls	r0, r0, #8
 8002412:	f7fe fa8d 	bl	8000930 <HAL_GPIO_EXTI_IRQHandler>
}
 8002416:	bd10      	pop	{r4, pc}

08002418 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	0004      	movs	r4, r0
 800241c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800241e:	2007      	movs	r0, #7
 8002420:	f7fe f980 	bl	8000724 <HAL_NVIC_DisableIRQ>
	if(GPIO_Pin == HR_MFIO_Pin)
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	429c      	cmp	r4, r3
 800242a:	d10b      	bne.n	8002444 <HAL_GPIO_EXTI_Callback+0x2c>
	{
 800242c:	466c      	mov	r4, sp
		//do stuff now that the interrupt was set
		uint8_t received_data[MAX_BUFF];
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_GPIO_EXTI_Callback+0x38>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3307      	adds	r3, #7
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1ae3      	subs	r3, r4, r3
 800243a:	469d      	mov	sp, r3
		//uint8_t flag_read;
		//HAL_GPIO_WritePin(GPIOC, HR_func_flag_Pin, GPIO_PIN_SET);
		HR_READ(received_data);
 800243c:	4668      	mov	r0, sp
 800243e:	f7ff fe5b 	bl	80020f8 <HR_READ>
 8002442:	46a5      	mov	sp, r4

	}

	//if(read_flag != 3)
	//{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002444:	2007      	movs	r0, #7
 8002446:	f7fe f963 	bl	8000710 <HAL_NVIC_EnableIRQ>
	//}
}
 800244a:	46bd      	mov	sp, r7
 800244c:	bdb0      	pop	{r4, r5, r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002454:	2201      	movs	r2, #1
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_MspInit+0x18>)
 8002458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245a:	430a      	orrs	r2, r1
 800245c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002462:	0552      	lsls	r2, r2, #21
 8002464:	430a      	orrs	r2, r1
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002468:	4770      	bx	lr
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002470:	b510      	push	{r4, lr}
 8002472:	0004      	movs	r4, r0
 8002474:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	2214      	movs	r2, #20
 8002478:	2100      	movs	r1, #0
 800247a:	a801      	add	r0, sp, #4
 800247c:	f000 f8f7 	bl	800266e <memset>
  if(hi2c->Instance==I2C1)
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_I2C_MspInit+0x50>)
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d119      	bne.n	80024bc <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002488:	2102      	movs	r1, #2
 800248a:	4c0e      	ldr	r4, [pc, #56]	; (80024c4 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	480e      	ldr	r0, [pc, #56]	; (80024c8 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002490:	430a      	orrs	r2, r1
 8002492:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002496:	400b      	ands	r3, r1
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249c:	23c0      	movs	r3, #192	; 0xc0
 800249e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	3bae      	subs	r3, #174	; 0xae
 80024a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	3b0f      	subs	r3, #15
 80024a6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80024aa:	3b02      	subs	r3, #2
 80024ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	f7fe f983 	bl	80007b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024b6:	039b      	lsls	r3, r3, #14
 80024b8:	4313      	orrs	r3, r2
 80024ba:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024bc:	b006      	add	sp, #24
 80024be:	bd10      	pop	{r4, pc}
 80024c0:	40005400 	.word	0x40005400
 80024c4:	40021000 	.word	0x40021000
 80024c8:	50000400 	.word	0x50000400

080024cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024cc:	b510      	push	{r4, lr}
 80024ce:	0004      	movs	r4, r0
 80024d0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	2214      	movs	r2, #20
 80024d4:	2100      	movs	r1, #0
 80024d6:	a801      	add	r0, sp, #4
 80024d8:	f000 f8c9 	bl	800266e <memset>
  if(huart->Instance==USART1)
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_UART_MspInit+0x64>)
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d123      	bne.n	800252c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_UART_MspInit+0x68>)
 80024e8:	01d2      	lsls	r2, r2, #7
 80024ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ee:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	430a      	orrs	r2, r1
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	400b      	ands	r3, r1
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002504:	23c0      	movs	r3, #192	; 0xc0
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	185b      	adds	r3, r3, r1
 8002510:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002512:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002516:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f7fe f94e 	bl	80007b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	201b      	movs	r0, #27
 8002520:	0011      	movs	r1, r2
 8002522:	f7fe f8c5 	bl	80006b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002526:	201b      	movs	r0, #27
 8002528:	f7fe f8f2 	bl	8000710 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800252c:	b006      	add	sp, #24
 800252e:	bd10      	pop	{r4, pc}
 8002530:	40013800 	.word	0x40013800
 8002534:	40021000 	.word	0x40021000

08002538 <NMI_Handler>:
 8002538:	4770      	bx	lr

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	e7fe      	b.n	800253a <HardFault_Handler>

0800253c <SVC_Handler>:
 800253c:	4770      	bx	lr

0800253e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	4770      	bx	lr

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002542:	f7fe f897 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002546:	bd10      	pop	{r4, pc}

08002548 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002548:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800254a:	2001      	movs	r0, #1
 800254c:	f7fe f9f0 	bl	8000930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002550:	bd10      	pop	{r4, pc}
	...

08002554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002554:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002556:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART1_IRQHandler+0xc>)
 8002558:	f7ff f96a 	bl	8001830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255c:	bd10      	pop	{r4, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	20000084 	.word	0x20000084

08002564 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <SystemInit+0x44>)
 8002568:	0052      	lsls	r2, r2, #1
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	490e      	ldr	r1, [pc, #56]	; (80025ac <SystemInit+0x48>)
 8002574:	400a      	ands	r2, r1
 8002576:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <SystemInit+0x4c>)
 800257c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800257e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002580:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	438a      	bics	r2, r1
 8002586:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	490a      	ldr	r1, [pc, #40]	; (80025b4 <SystemInit+0x50>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4909      	ldr	r1, [pc, #36]	; (80025b8 <SystemInit+0x54>)
 8002594:	400a      	ands	r2, r1
 8002596:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <SystemInit+0x58>)
 80025a0:	0512      	lsls	r2, r2, #20
 80025a2:	609a      	str	r2, [r3, #8]
#endif
}
 80025a4:	4770      	bx	lr
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000
 80025ac:	88ff400c 	.word	0x88ff400c
 80025b0:	fef6fff6 	.word	0xfef6fff6
 80025b4:	fffbffff 	.word	0xfffbffff
 80025b8:	ff02ffff 	.word	0xff02ffff
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80025c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025c6:	e003      	b.n	80025d0 <LoopCopyDataInit>

080025c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80025ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ce:	3104      	adds	r1, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80025d0:	480b      	ldr	r0, [pc, #44]	; (8002600 <LoopForever+0xa>)
  ldr  r3, =_edata
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <LoopForever+0xe>)
  adds  r2, r0, r1
 80025d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025d8:	d3f6      	bcc.n	80025c8 <CopyDataInit>
  ldr  r2, =_sbss
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <LoopForever+0x12>)
  b  LoopFillZerobss
 80025dc:	e002      	b.n	80025e4 <LoopFillZerobss>

080025de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80025de:	2300      	movs	r3, #0
  str  r3, [r2]
 80025e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e2:	3204      	adds	r2, #4

080025e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <LoopForever+0x16>)
  cmp  r2, r3
 80025e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025e8:	d3f9      	bcc.n	80025de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025ea:	f7ff ffbb 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f000 f811 	bl	8002614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f2:	f7ff fe63 	bl	80022bc <main>

080025f6 <LoopForever>:

LoopForever:
    b LoopForever
 80025f6:	e7fe      	b.n	80025f6 <LoopForever>
  ldr   r0, =_estack
 80025f8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80025fc:	08002704 	.word	0x08002704
  ldr  r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002604:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002608:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800260c:	20000104 	.word	0x20000104

08002610 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC1_COMP_IRQHandler>
	...

08002614 <__libc_init_array>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	2600      	movs	r6, #0
 8002618:	4d0c      	ldr	r5, [pc, #48]	; (800264c <__libc_init_array+0x38>)
 800261a:	4c0d      	ldr	r4, [pc, #52]	; (8002650 <__libc_init_array+0x3c>)
 800261c:	1b64      	subs	r4, r4, r5
 800261e:	10a4      	asrs	r4, r4, #2
 8002620:	42a6      	cmp	r6, r4
 8002622:	d109      	bne.n	8002638 <__libc_init_array+0x24>
 8002624:	2600      	movs	r6, #0
 8002626:	f000 f82b 	bl	8002680 <_init>
 800262a:	4d0a      	ldr	r5, [pc, #40]	; (8002654 <__libc_init_array+0x40>)
 800262c:	4c0a      	ldr	r4, [pc, #40]	; (8002658 <__libc_init_array+0x44>)
 800262e:	1b64      	subs	r4, r4, r5
 8002630:	10a4      	asrs	r4, r4, #2
 8002632:	42a6      	cmp	r6, r4
 8002634:	d105      	bne.n	8002642 <__libc_init_array+0x2e>
 8002636:	bd70      	pop	{r4, r5, r6, pc}
 8002638:	00b3      	lsls	r3, r6, #2
 800263a:	58eb      	ldr	r3, [r5, r3]
 800263c:	4798      	blx	r3
 800263e:	3601      	adds	r6, #1
 8002640:	e7ee      	b.n	8002620 <__libc_init_array+0xc>
 8002642:	00b3      	lsls	r3, r6, #2
 8002644:	58eb      	ldr	r3, [r5, r3]
 8002646:	4798      	blx	r3
 8002648:	3601      	adds	r6, #1
 800264a:	e7f2      	b.n	8002632 <__libc_init_array+0x1e>
 800264c:	080026fc 	.word	0x080026fc
 8002650:	080026fc 	.word	0x080026fc
 8002654:	080026fc 	.word	0x080026fc
 8002658:	08002700 	.word	0x08002700

0800265c <memcpy>:
 800265c:	2300      	movs	r3, #0
 800265e:	b510      	push	{r4, lr}
 8002660:	429a      	cmp	r2, r3
 8002662:	d100      	bne.n	8002666 <memcpy+0xa>
 8002664:	bd10      	pop	{r4, pc}
 8002666:	5ccc      	ldrb	r4, [r1, r3]
 8002668:	54c4      	strb	r4, [r0, r3]
 800266a:	3301      	adds	r3, #1
 800266c:	e7f8      	b.n	8002660 <memcpy+0x4>

0800266e <memset>:
 800266e:	0003      	movs	r3, r0
 8002670:	1882      	adds	r2, r0, r2
 8002672:	4293      	cmp	r3, r2
 8002674:	d100      	bne.n	8002678 <memset+0xa>
 8002676:	4770      	bx	lr
 8002678:	7019      	strb	r1, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	e7f9      	b.n	8002672 <memset+0x4>
	...

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
